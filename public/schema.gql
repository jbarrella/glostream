directive @contact(
  """Contact title of the subgraph owner"""
  name: String!

  """URL where the subgraph's owner can be reached"""
  url: String

  """Other relevant notes can be included here; supports markdown links"""
  description: String
) on SCHEMA

"""Provides a more flexible way to determine field inclusions """
directive @include_if(
  """path to field to check, e.g. 'status' or 'location.address.city' """
  field: String!

  """operator to use for comparison """
  operator: Operator = equals

  """value to check """
  value: String!
) on FIELD

"""Formats field to upper case if type is String """
directive @upper on FIELD_DEFINITION

"""
Converts value to acres with up to 2 decimal digits. Assumes incoming field
represents data in square feet. Only works for numeric fields. 
"""
directive @acre on FIELD

"""
Retrieves the data from Insights Framework and merges it with the source data 
"""
directive @insights(
  """List of plugins to get data for """
  plugins: [InsightsPluginInput]!
  merge_strategy: InsightsMergeStrategy
) on FIELD_DEFINITION

"""
Rounds off value to certain number of digits after the decimal point if type is Float / Int 
"""
directive @round_off(
  """
  Number of digits after the decimal point. Must be in the range 0 - 10, inclusive
  """
  decimal_places: Int = 2
) on FIELD

directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__external(reason: String) on OBJECT | FIELD_DEFINITION

directive @federation__tag(name: String!) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @federation__extends on OBJECT | INTERFACE

directive @shareable on OBJECT | FIELD_DEFINITION

directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__override(from: String!) on FIELD_DEFINITION

directive @federation__composeDirective(name: String) on SCHEMA

directive @federation__interfaceObject on OBJECT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

scalar _Any

union _Entity = Consumer | Home | SearchHome

type _Service {
  sdl: String
}

type Adaptation {
  """Adaptation type """
  type: [String]

  """Adaptation name """
  name: String
}

"""Represent the type: Address """
type Address {
  address_validation_code: String
  city: String
  country: String
  county: String
  line: String
  location: AddressLocation
  postal_code: String
  state_code: String
  street_direction: String
  street_name: String
  street_number: String
  street_suffix: String
  street_post_direction: String
  unit_value: String
  unit: String
  unit_descriptor: String
  zip: String
}

"""Represent the type: AddressLocation """
type AddressLocation {
  accuracy: String
  coordinate: Coordinate
}

type AdvertiserAddress {
  line: String
  city: String
  postal_code: String
  state_code: String
  state: String
  country: String
  coordinate: SimpleCoordinate
}

type AdvertiserAwards {
  title: String
  year: Int
  description: String
}

type AdvertiserBuilder {
  fulfillment_id: String
  builder_set: String
  name: String
  href(https: Boolean): String
  logo(https: Boolean): String
  bio: String
  background: String
  specialties: [String]
  first_year: String
  awards: [AdvertiserAwards]
}

type AdvertiserCorporation {
  fulfillment_id: String
  customer_set: String
  name: String
  href: String
  logo: String
  bio: String
  background: String
  specialties: [String]
  first_year: String
  awards: [AdvertiserAwards]
}

type AdvertiserCounty {
  name: String
}

"""Advertiser information"""
input AdvertiserInput {
  address: String
  advertiser_id: ID
  advertiser_type: String
  city: String
  email: String
  is_text_emails: Boolean
  name: String
  profile_url: String
  state: String
  website_url: String
  zip: String
  phone: PhoneInput
  primary_mls: PrimaryMlsInput
}

type AdvertiserLeadEmail {
  to: String
  cc: String
}

type AdvertiserPhone {
  number: String
  type: String
  primary: Boolean
  trackable: Boolean
  ext: String
}

type AdvertiserRentalCorporation {
  fulfillment_id: String
  corporation_set: String
}

type AdvertiserRentalManagement {
  fulfillment_id: String
  management_set: String
  customer_set: String
  name: String
  href: String
  logo: String
}

type AdvertiserTeam {
  """Advertiser team fulfillment id as exposed by Profile API"""
  fulfillment_id: ID

  """Advertiser team name as exposed by Profile API"""
  name: String
}

type Agent {
  office_id: String
  source_id: String
  source_name: String
  type: String
  mls_set: MLSSet
}

"""Air information for the property """
type AirStatistics {
  """First Street air parcel ID """
  fsid: String

  """
  Air Factor Score. Valid values 1 to 10, where 1 is low air pollution risk
  """
  air_factor_score: Int

  """Air Factor Severity: Minimal, Minor, Moderate, Major, Severe, Extreme """
  air_factor_severity: String

  """
  Air pollution Trend : decreasing, not changing, increasing based on
  trend_direction (-1 is trending decreasing, 0 is not changing, 1 is increasing)
  """
  air_trend: String

  """Air trend paragraph for modal"""
  air_trend_paragraph: String

  """Property page on First Street's website """
  firststreet_url: String

  """Link to page containing more information regarding air data"""
  air_study_link: VendorUrl

  """Air forcast for next 30 years"""
  air_forecast: [EnvironmentForecast]
}

type Alert {
  """unique identifier of the alert """
  id: ID!

  """unique identifier of the property listed by the alert """
  property_id: ID!

  """unique identifier of the listing related to the alert """
  listing_id: ID!

  """date at which the alert was created """
  created_date: DateTime

  """status of the property, e.g. for_rent/for_sale """
  status: AlertPropertyStatus!

  """the source of the alert, e.g. property change, saved search match """
  match_condition: AlertMatch

  """the type of the alert, e.g new listing or reduced price """
  type: AlertType

  """details of the home related to the alert """
  home: SearchHome

  """the change in price related to the alert"""
  price_change: Float

  """
  unique identifier of the user's saved search associated to their alert notifications 
  """
  source_id: ID
}

enum AlertMatch {
  """the alert was triggered because the user has this property saved """
  saved_resource

  """
  the alert was triggered because this property matches a search the user has saved 
  """
  saved_search
}

enum AlertPropertyStatus {
  for_rent
  for_sale
}

input AlertsCriteria {
  """only show alerts created after this date """
  start_date: DateTime

  """only show alerts created before this date """
  end_date: DateTime

  """filter results by for_rent/for_sale """
  status: AlertPropertyStatus

  """filter results by alert type """
  type: [AlertType]
}

type AlertsList {
  """list of alerts """
  alerts_list: [Alert!]!

  """count of alerts returned """
  count: Int

  """total number of alerts available to be returned """
  total: Int
}

enum AlertType {
  contingent
  new_listing
  new_rental
  open_house_new
  open_house_update
  pending
  price_decrease
  price_increase
  sold
}

"""Amenities nearby a home"""
type Amenities {
  """Amenity name"""
  name: String

  """Amenity phone number"""
  phone: String

  """Amenity yelp rating"""
  rating: Float

  """Amenity yelp url"""
  yelp_url: String

  """Amenity business url/website"""
  business_url: String

  """Amenity photo url"""
  photo_url: String

  """Amenity categories - example daycare, grocery, restaurant, cafe etc."""
  categories: [String]

  """Amenity icon url"""
  icon_url: String

  """Amenity display tags - Donutes, Cofee & Tea etc."""
  display_tags: [String]

  """Amenity address"""
  address: AmenityAddress

  """Amenity yelp review counts"""
  reviews_count: Int

  """Amenity yelp review url"""
  reviews_url: String
}

"""Amenities categories mapping for location scores"""
type AmenitiesCategories {
  """Mapping for location scores"""
  location_scores_meta: [LocationScoresMapping]
}

"""Amenity Address"""
type AmenityAddress {
  """Amenity Address Line 1"""
  line_one: String

  """Amenity Address Line 2"""
  line_two: String

  """Amenity Address Line 3"""
  line_three: String

  """Amenity Address City"""
  city: String

  """Amenity latitude"""
  lat: Float

  """Amenity longitude"""
  lon: Float

  """Amenity Address State Code"""
  state_code: String

  """Amenity Address Postal Code"""
  postal_code: String

  """Amenity distance from given property"""
  distance_from_cll: Float
}

"""Amenities parameters """
input AmenityInput {
  """
  Amenities categories to search. E.g. - local_parks, local_groceries,
  local_shopping, local_nightlife, local_food_and_drink, local_cafes,
  local_preschools
  """
  categories: [String]

  """Radius in miles used for amenity search around the property """
  radius_in_miles: Float

  """Total limit for results"""
  limit: Int

  """Limit per amenity category in results"""
  category_limit: Int

  """Offset"""
  offset: Int

  """Sort field - distance, rating, reviews_count"""
  sort: AmenitySortInput

  """Order for sort - asc or desc"""
  order: AmenitySortOrderInput
}

"""Amenities sorting criteria"""
enum AmenitySortInput {
  """Sort by distance"""
  DISTANCE

  """Sort by rating"""
  RATING

  """Sort by review counts"""
  REVIEWS_COUNT
}

"""Amenities sorting order"""
enum AmenitySortOrderInput {
  """Sort in ascending order"""
  ASC

  """Sort in descending order"""
  DESC
}

"""annual/monthly amortization"""
type Amortization {
  """interest paid for the year"""
  interest: Int

  """principal paid for the year"""
  principal: Int
}

type Assessment {
  building: Int
  land: Int
  total: Int
}

"""assumable loan details"""
type AssumableLoan {
  """whether property has an assumable loan"""
  is_eligible: Boolean

  """avg rate at the time of the loan transaction"""
  avg_rate: Float

  """displayable avg rate at the time of the loan transaction"""
  avg_rate_display: Float

  """transaction date"""
  transaction_date: DateTime

  """estimated monthly payment"""
  monthly_payment: Int
}

"""Availability_date date histogram aggregation."""
input AvailabilityDateDateHistogramAgg {
  """
  Accepts calendar interval in string format like the following:
  - day
  - month
  """
  calendar_interval: String
}

"""The input to fetch the available loan brokers"""
input AvailableLoanBrokersInput {
  """Zipcode to fetch loan broker"""
  zipcode: String!

  """Inquiry Guid for loan broker"""
  inquiry_guid: String!
}

type Basic {
  baths: Int

  """Number of full bathrooms """
  baths_full: Int

  """Number of half bathrooms """
  baths_half: Int

  """Number of one quarter bathrooms """
  baths_1qtr: Int

  """Number of 3/4 bathrooms """
  baths_3qtr: Int

  """Number of beds """
  beds: Int
  list_date(format: DateFormat): DateTime
  price: Int

  """Square footage of the Home """
  sqft: Int

  """Lot square footage, the @acre and @round_off directives can be used """
  lot_sqft: Float

  """
  Listing status: 
  + for_sale 
  + for_rent 
  + sold 
  + off_market 
  + active (New Home Subdivisions) 
  + other (if none of the above conditions were met) 
  """
  status: String

  """
  Standardized property type. Available values: 
  + apartment 
  + building 
  + commercial 
  + condo_townhome 
  + condo_townhome_rowhome_coop 
  + condos 
  + coop 
  + duplex_triplex 
  + farm 
  + investment 
  + land 
  + mobile 
  + multi_family 
  + rental 
  + single_family 
  + townhomes 
  """
  type: String

  """
  Standardized property sub-type. Available values: 
  + condo 
  + condop 
  + co-op 
  + townhouse 
  """
  sub_type: String
  sold_date(format: DateFormat): DateTime
  sold_price: Int
}

"""Baths histogram aggregation."""
input BathsHistogramAgg {
  """Accepts interval size of int in range [1, 4]"""
  interval: Int
}

"""Baths range aggregation"""
input BathsRangeAgg {
  """Accepts array of float ranges."""
  ranges: [NumberAggRange]
}

"""Beds histogram aggregation."""
input BedsHistogramAgg {
  """Accepts interval size of int in range [1, 4]"""
  interval: Int
}

"""Beds range aggregation"""
input BedsRangeAgg {
  """Accepts array of int ranges."""
  ranges: [IntAggRange]
}

type Board {
  """
  The listing agents specific board name/identifier they are associated with
  """
  board_identifier: String
}

type Body {
  text: String
  data_points: JSON
}

type Borough {
  """Borough name"""
  name: String
}

"""a boundary centroid coordinate (latitude and longitude)."""
type BoundaryCentroid {
  """lat and long coordinates of the boundary centroid"""
  coordinates: [Float]

  """type of the polygon"""
  type: String
}

"""
RDC branding information which provides agent/brokerage branding of SRP/LDP
photo section. It's generated by products/advertisers results.
"""
type Branding {
  """Branding type which is generally advertisers type."""
  type: BrandingType

  """Photo url of agent photo or Brokerage logo."""
  photo: String

  """Agent name or Brokerage name."""
  name: String

  """Phone number of Agent or Brokerage."""
  phone: String

  """Slogan of Agent or Brokerage."""
  slogan: String

  """
  Branding accent color for the broker that appears on the office card on SRP and LDP.
  """
  accent_color: String

  """http url link of Agent or Brokerage site."""
  link: String
}

"""RDC Branding type."""
enum BrandingType {
  """seller agent advertiser"""
  Agent

  """seller broker advertiser"""
  Broker

  """builder advertiser"""
  Builder

  """community rental advertiser"""
  Community

  """rental corporation advertiser"""
  Corporation

  """rental management advertiser"""
  Management

  """seller office advertiesr"""
  Office
}

"""Builder home types"""
enum BuilderRecordsHomeTypes {
  COMMUNITY
  PLAN
  SPEC_HOME
}

"""Search NHC builders by geo """
input BuildersSearchCriteria {
  """City of location"""
  city: String

  """County of location"""
  county: String

  """State code of location"""
  state_code: String

  """Neighborhood name of location"""
  neighborhood: String

  """Postal code of location. """
  postal_code: String

  """Search by one or multiple school ID's."""
  school_id: [ID]

  """Search by one or multiple school discrict ID's"""
  school_district_id: [ID]

  """Search by address of the home."""
  address: String

  """Search for one or multiple neighborhoods."""
  neighborhoods: [SearchAPINeighborhoods]

  """Search for one or multiple locations."""
  locations: [SearchAPILocations]

  """Number of bathrooms range"""
  baths: FloatRange

  """Number of bedrooms range"""
  beds: IntRange

  """Listing price range"""
  list_price: FloatRange

  """Search by JSON representation of a geo object."""
  boundary: GeoJSON

  """Sqft of the property."""
  sqft: FloatRange

  """Search by all builder fulfillment id's (corporation and builder)"""
  fulfillment_id: [ID]

  """Search by property type"""
  type: String

  """Search by property type (spec, plans or community)"""
  home_type: BuilderRecordsHomeTypes

  """Search by builder name"""
  builder_name: String

  """Search by source_builder_id"""
  source_builder_id: String

  """Search by builder_id"""
  builder_id: String

  """Search by builder_set"""
  builder_set: String

  """Search by one or multiple home tags"""
  tags: [String]
}

"""result returned by builders search """
type BuildersSearchResult {
  """count of returned records """
  count: Int

  """count of records found """
  total: Int

  """results """
  results: [SearchBuilder]
}

"""Residential building permit information about the property."""
type BuildingPermitsHistory {
  """
  The project title for the permit as specified by the project owner on the permit. 
  """
  project_name: String

  """
  The category or type of work the permit is for as specified on the building permit. 
  Values vary by issuing agency. E.g. Mechanical, electrical 
  """
  permit_type_of_work: String

  """The normalized description of service performed """
  permit_project_type_1: String

  """The normalized description of service performed """
  permit_project_type_2: String

  """The normalized description of service performed """
  permit_project_type_3: String

  """
  The permit's date of issuance by the building department, 
  unless the permit is in an earlier stage of the building process. 
  If the permit has not been issued yet, 
  effective date is the date of the most recent stage in the planning process. Format: YYYYMMDD
  """
  permit_effective_date: DateTime

  """
  The most recent stage of the permit in the building and approval process, standardized. 
  This is paired with Permit Effective Date.
  """
  permit_status: String
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input CallData {
  """time when user called """
  time_of_call: DateTime

  """user phone number """
  receiver_phone: String

  """advertiser id """
  advertiser_id: ID

  """advertiser type """
  advertiser_type: CONSUMER_ADVERTISER_TYPE
}

enum CallerPlatform {
  """Desktop platform """
  desktop

  """Mobile Web platform """
  mobile_web

  """Native Android platform """
  native_android

  """Native iOS platform """
  native_ios
}

type CensusTract {
  id: ID
}

type ChatChannel {
  """The attributes that serve as an identifier for a channel """
  named_channel: NamedChannel!

  """external channel identification """
  sid: String!
}

type ChatSession {
  """Channels that the user has been joined to """
  channels: [ChatChannel]!

  """Token for use in native clients for authentication """
  token: String!

  """Participants in the chat conversation. """
  participants: [NamedChatParticipant]!
}

"""Data about a city. """
type City implements Geo {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """The county where the the city resides. """
  county: String

  """The name of the city """
  city: String

  """The centroid of the city. """
  centroid: Coordinate

  """The city boundary. """
  boundary: GeoJSON

  """
  A list of geos that are recommended to be similar and nearby to the city. 
  """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """Statistics about the city. """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """The state code of the state where the city resides. """
  state_code: String

  """Geo's Parents """
  parents: [GeoParent]

  """
  Determines if there is a city with the same name in the same state so that the
  county name is needed to uniquely identify it 
  """
  county_needed_for_uniq: Boolean

  """Find relevant schools given a city. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

"""client details info """
input ClientInfo {
  """client current time, (ie: "2017-03-02:15:15.549-07:00") """
  time: DateTime

  """client's ip address, (format: "10.238.11.35") """
  ip_address: String

  """client's user agent """
  user_agent: String

  """client's device name """
  device_type: String

  """client's app name """
  app_name: String

  """client's os """
  os: String

  """
  client name, values in ("rdc", "doorsteps", "international", "rdc-android", "rdc-ipad", "rdc-iphone", "rentals-android",  
  "rentals-ipad", "rentals-iphone") 
  """
  name: String

  """version number, (i.e. "8.0.0.1") """
  version: String

  """client's environment, values in ("qa", "prod) """
  environment: String
}

input ClosingsSearchCriteria {
  """Search by home address."""
  address: String

  """Search by state code."""
  state_code: String

  """Search by city home is located in."""
  city: String

  """Search by postal code."""
  postal_code: String
  agents: [SearchAPIAgentsMlsSet]
  boundary: GeoJSON

  """Search whether the home is a primary listing or not."""
  primary: Boolean
  sold_date: DateStringRange

  """Search by MLS abbreviation(s) example: ‘PHPA' """
  source_id: [String]

  """MLS provided listing id -- formerly mls.id """
  source_listing_id: ID

  """
  Search by seller's name(s). Gives priority to dashboard (advertiser) agent name. 
  """
  selling_agent_name: String

  """suppressed sold_date search for FIND user only """
  sold_date_unsuppressed: DateStringRange

  """suppressed sold_price search for FIND user only """
  sold_price_unsuppressed: IntRange
}

type Collaborator {
  """first name of member in co-buyer relationship """
  first_name: String

  """last name of member in co-buyer relationship """
  last_name: String

  """email of the collaborator """
  email: String

  """role of individual in co-buyer relationship """
  role: CollaboratorRoleType
}

enum CollaboratorRoleType {
  cobuyer
  self
}

type CommunityMetrics {
  """
  Number of leads generated across this community in the current calendar month 
  """
  leads_month_to_date: Int

  """Count of active listings in this community """
  active_listing_count: Int

  """Number of clicks the community received in the past 14 days"""
  clicks_total_past_14_days: Int
}

input CommunityMetricsFilter {
  """
  Only fetch community metrics if the parent property status matches one of the statuses provided
  """
  status: [String]
}

type CommunityRentalFloorplan {
  """Floorplan availability"""
  availability: HomeAvailability

  """Deposit amount"""
  deposit: Int

  """Description of floorplan, beds/baths/type/etc."""
  floorplan_description: FloorplanDescription

  """List price of floorplan."""
  list_price: Float

  """Floorplan available images/photos."""
  photos(
    """limit the number of photos returned -- optional."""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean
  ): [HomePhoto]

  """Floor plan identifier as provided by the source system - DataManager"""
  floorplan_id: ID

  """Non-composite floorplan identifier as it appears in the source feed"""
  raw_source_floorplanid: String

  """Unit data associated with floorplan"""
  floorplan_units: [FloorplanUnits]
}

"""A set of contact information specific to Community Rentals"""
type CommunityRentalsContacts {
  """
  Indicates, among all leads, which one to be preferred. DEFAULT: community 
  """
  lead_preferred: CommunityRentalsLeadSource

  """A list of Lead Contacts """
  lead_contacts: [CommunityRentalsLeadContact]

  """Secondary community id"""
  secondary_sourcecommunity_id: String

  """Secondary company id"""
  secondary_sourcecompany_id: String
}

"""
A single Lead contact (person) and it's information - specific to Community Rentals
"""
type CommunityRentalsLeadContact {
  """
  Indicates if it's the default contact or someone to copy (CC or BCC) the communication 
  """
  recipient_type: CommunityRentalsLeadRecipientType

  """Indicates from where that lead contact was extracted """
  source: CommunityRentalsLeadSource

  """The contact email """
  email: String
}

"""
A list of possible recipient types (`copy` means a recipient to CC or BCC a
message and `default` means the primary recipient) 
"""
enum CommunityRentalsLeadRecipientType {
  copy
  default
}

"""
Community Rentals documents contain leads information in multiple levels and the
source represents in what level they were extracted 	
"""
enum CommunityRentalsLeadSource {
  community
  management
}

input CommunitySearchAPISort {
  field: CommunitySearchSortField
  direction: SortDirection
}

input CommunitySearchCriteria {
  address: String
  baths: FloatRange
  beds: IntRange
  boundary: GeoJSON
  builder_id: ID
  city: String

  """Search by community set."""
  community_set: [String]
  county: String

  """Exclude one or multiple Property ID's from search."""
  exclude_property_ids: [ID]

  """Search by fulfillment ID."""
  fulfillment_id: [ID]
  list_price: FloatRange
  locations: [SearchAPILocations]
  subdivision_id: [ID]
  subdivision_name: String
  neighborhoods: [SearchAPINeighborhoods]
  postal_code: String
  state_code: String

  """Search for homes with photos."""
  has_photos: Boolean

  """Search for communities with videos."""
  has_video: Boolean
  styles: [String]
  sqft: FloatRange
  lot_sqft: FloatRange
  listing_key: String
  year_built: IntRange
  tags: [String]
  type: [String]
  plan_types: [String]

  """Filter promoted communities"""
  promoted_community: Boolean

  """Filter communities listed directly by the builder"""
  sales_builder: Boolean

  """
  Filter based on source builder ID. Both source_id and source_builder_id are required.
  """
  source_builder: [SourceBuilderSet]

  """
  Search nearby home with free location string, buffer in miles (optional) and boundary (optional).
  Overrides SearchLocation specified in search query.
  """
  search_location: SearchLocation

  """The number of active listings for community"""
  active_listing_count: IntRange

  """Number of leads for community this month"""
  leads_month_to_date: IntRange
  products: [String]
  exclude_products: [String]
}

enum CommunitySearchSortField {
  active_listing_count
  baths_max
  baths_min
  beds_max
  beds_min
  clicks_total_past_14_days
  list_date
  list_price_max
  list_price_min
  photo_count
  sqft_max
  sqft_min
  subdivision_name
}

type CommuteAreas {
  """Area id - Example - commute"""
  id: String

  """Breakpoints for different zoom levels"""
  breakpoints: [CommuteBreakpoints]

  """Radius of polygon"""
  radius: Float

  """Centroid of polygon"""
  center: CommutePolygonCenter
}

type CommuteBreakpoints {
  """Area width"""
  width: Int

  """Area height"""
  height: Int

  """Area zoom level"""
  zoom: Int
}

input CommuteFilter {
  """Coordinates of origin of commute filter"""
  origin: Origin!

  """Interval in minutes"""
  interval_in_minutes: CommuteInterval

  """Time of day. Minutes past midnight"""
  time_of_day: CommuteTimeOfDay

  """Returning polygon type as boundary"""
  polygon_type: CommutePolygonType

  """Type of transportation the polygon represents."""
  transportation_type: CommuteTransportationType
}

"""Interval of commute in minutes"""
enum CommuteInterval {
  """10 minutes."""
  _10

  """20 minutes."""
  _20

  """30 minutes."""
  _30

  """40 minutes."""
  _40

  """50 minutes."""
  _50

  """60 minutes."""
  _60
}

"""
A commute target location 
Exactly one of {address, coordinate} should be provided 
"""
input CommuteLocation {
  """
  string address of the commute target location 
  e.g. Stockton St Tunnel, San Francisco, CA 94108 
  """
  address: String

  """lat and long coordinates of the commute target location """
  coordinate: Origin
}

type CommutePolygonCenter {
  """Latitude of Centroid"""
  lat: Float

  """Longitude of Centroid"""
  lng: Float
}

type CommutePolygonResult {
  """
  The calculated commute polygon for a given coordinate, time and transportation_type to be used on map
  """
  boundary: GeoJSON

  """Area breakpoints for different zoom levels"""
  areas: [CommuteAreas]
}

"""Commute area type to be searched based on commute filters provided"""
enum CommutePolygonType {
  """Commute area would be searched as multipolygon."""
  MultiPolygon

  """Commute area would be searched as polygon."""
  Polygon
}

"""Commute time response  """
type CommuteTime {
  """commute time value """
  duration: CommuteTimeValue
}

"""Commute time parameters """
input CommuteTimeInput {
  """destination address : text address with optional numeric coordinates """
  destination: CommuteLocation!

  """method of transport, driving, walking, etc """
  transportation_type: TransportationType! = driving

  """should traffic be considered in the commute time calculation """
  with_traffic: Boolean! = false
}

"""
A commute target location 
Exactly one of {address, coordinate} should be provided 
"""
input CommuteTimeLocationDetail {
  """
  string address of the commute target location 
  e.g. Stockton St Tunnel, San Francisco, CA 94108 
  """
  address: String

  """lat and long coordinates of the commute target location """
  coordinate: Origin
}

"""Commute Time of Day. The values represents minutes past midnight."""
enum CommuteTimeOfDay {
  """120 minutes past midnight."""
  _120

  """990 minutes past midnight."""
  _990
}

"""Commute time parameters """
input CommuteTimeRequest {
  """departure address : text address with optional numeric coordinates """
  departure: CommuteTimeLocationDetail!

  """
  destination addresses : text address with optional numeric coordinates 
  """
  destination: [CommuteTimeLocationDetail]!

  """method of transport, driving, walking, etc """
  transportation_type: TransportationType! = driving

  """should traffic be considered in the commute time calculation """
  with_traffic: Boolean! = false

  """Maximum journey time (in seconds)(default is 30 mins)"""
  travel_time: Int! = 1800

  """
  Leave departure location at no earlier than given time. In ISO 8601 format
  """
  departure_time: String!

  """
  Should call the travel time fast endpoint with fallback to the route endpoint, or should directly call the route endpoint
  """
  is_fast: Boolean! = true
}

"""Commute time response  """
type CommuteTimeResponse {
  """commute time results for multiple destinations """
  locations: [CommuteTimeResult!]!
}

type CommuteTimeResult {
  """Unique destination """
  id: String!

  """travel time details for destinations """
  properties: [TravelTimeValue!]!
}

"""Commute time value  """
type CommuteTimeValue {
  """
  commute time value in human readable format 
  e.g. 3 hours 49 mins 
  """
  text: String
}

"""Types of Transportation that we build commute polygons for"""
enum CommuteTransportationType {
  """Transportation using cycle."""
  cycle

  """Transportation using a vehicle."""
  drive

  """Transportation using public transport."""
  public_transport

  """Transportation using legs."""
  walk
}

type ComparableDataAbsoluteValue {
  absolute: Int
}

"""
Comparable data value used to express the differences between a particular home and similar homes 
"""
type ComparableDataValue {
  """calculated value difference """
  absolute: Int

  """calculated percent difference """
  percent: Int
}

"""Consent data"""
input ConsentDataInput {
  """Full TCPA language """
  tcpa_language: String!

  """Jornaya id """
  jornaya_id: ID

  """Trusted_form url """
  trusted_form_cert_url: String

  """List of consent parties """
  consenting_parties: [ConsentPartyDataInput!]
}

"""Consent party"""
input ConsentPartyDataInput {
  """party id of consent party provided by the front-end"""
  party_id: ID!

  """party full name of consent party provided by the front-end"""
  party_full_name: String!
}

type Consumer {
  id: ID!

  """hidden properties """
  hidden_properties(query: HiddenPropertyCriteria): [HiddenProperty!]!

  """saved/favorite properties and metadata like total count on the list """
  saved_properties(
    """number of properties returned """
    limit: Int

    """offset 0-based index """
    offset: Int

    """filters for saved properties """
    query: SavedPropertiesFilterCriteria

    """sorting criteria for saved properties """
    sort: [SavedPropertiesSortingCriteria]
  ): SavedPropertiesList

  """Return list of SavedSearch objects with metadata like total"""
  saved_searches(
    """Criteria to filter saved searches."""
    query: SavedSearchCriteria

    """Limits the number of returned Saved Searches."""
    limit: Int

    """0-based offset by which to start in the results."""
    offset: Int
  ): SavedSearchList

  """
  Check for existance of saved searches. returns List of SavedSearch objects with metadata. Throws error object on error
  """
  saved_search_exists(input: SavedSearchExistsInput!): SavedSearchList

  """
  Fetch saved search for an ID. returns SavedSearch object with metadata. Throws error object on error
  """
  saved_search(input: SavedSearchById!): SavedSearchList
  referral_lead(email: String, phone_number: String): ReferralLead
}

"""
Type values are: Agent, Office, Broker, Builder, Management, Community 
"""
enum CONSUMER_ADVERTISER_TYPE {
  Agent
  Broker
  Builder
  Community
  Management
  Office
}

"""app-friendly abstraction of products + advertisers + mls source data """
type ConsumerAdvertiser {
  advertiser_id: String
  agent_id: String
  broker_id: String
  office_id: String
  name: String
  type: CONSUMER_ADVERTISER_TYPE
  slogan: String
  phone: String
  href: String
  photo: Photo
  show_realtor_logo: Boolean
  address: AdvertiserAddress
  hours: String
  contact_name: String
}

"""Stats of properties user showed interest in their dominant geo"""
type ConsumerCriteria {
  """The user's preferred number of bathrooms"""
  baths: ConsumerCriteriaIntRange

  """The user's preferred number of bedrooms"""
  beds: ConsumerCriteriaIntRange

  """The user's preferred price range"""
  list_price: ConsumerCriteriaIntRange

  """The user's preferred size in square feet"""
  sqft: ConsumerCriteriaIntRange
}

"""Representation of min-max range of integer values"""
type ConsumerCriteriaIntRange {
  """The minimum value"""
  min: Int

  """The maximum value"""
  max: Int
}

"""Criteria to query for contacted properties """
input ContactedPropertiesCriteria {
  """The property identifier """
  property_ids: [ID]
}

"""A Contacted Property """
type ContactedProperty {
  """The property identifier """
  property_id: ID!

  """The dates which the property was contacted """
  contacted_dates: [DateTime!]!

  """The home object for this property """
  home: SearchHome
}

"""Input to create a contacted property """
input ContactedPropertyCreateInput {
  """The property identifier """
  property_id: ID!

  """
  The listing identifier for a property. This is for legacy SRS purposes. 
  """
  listing_id: ID

  """The preferred listing type """
  status: ContactedPropertyListingType
}

"""Input to delete a contacted property """
input ContactedPropertyDeleteInput {
  """property id """
  property_id: ID!
}

"""Listing types accepted by file-cabinet """
enum ContactedPropertyListingType {
  for_rent
  for_sale
}

"""
a geographical coordinate (latitude and longitude), used as centroid of an area. 
"""
type Coordinate {
  """
  latitude: the angular distance of a place north or south of the earth's
  equator, or of a celestial object north or south of the celestial equator,
  usually expressed in degrees and minutes. 
  """
  lat: Float

  """
  longitude: is the angular distance, in degrees, minutes, and seconds, of a
  point east or west of the Prime (Greenwich) Meridian. Lines of longitude are
  often referred to as meridians 
  """
  lon: Float

  """
  indicate the accuracy of the lat/lon values, null means there is no accuracy data 
  """
  accuracy: String
}

type CostarCounts {
  """Total number of costar listings."""
  costar_total: Int

  """Total number of non costar listings."""
  non_costar_total: Int
}

"""credit level expected from lcs """
enum CreditRange {
  """excellent """
  Excellent

  """fair """
  Fair

  """good """
  Good

  """poor """
  Poor
}

"""Crime returned as geo statistics from Market Trends API """
type Crime {
  """Type of Crime (min or max) """
  type: CrimeType

  """Indicator value between 1 and 6 with 1 being safest.  """
  index: Float
}

"""Crime filters  """
input CrimeFilter {
  """Crime upper bound.  Valid values are 1 to 6, with 1 being safest. """
  max: Int
}

"""Types of crime values returned from Market Trends API """
enum CrimeType {
  """property crime """
  property

  """total (aggregation over all type) cirme """
  total

  """the max total crime """
  total_max

  """the min total crime """
  total_min

  """violent crime """
  violent
}

"""
Buckets used for date range aggregation in string in ISO format i.e. "2023-10-14".
"to" must be greater than "from"
"""
input DateAggRange {
  """Bucket from."""
  from: String

  """Bucket to."""
  to: String
}

enum DateFormat {
  """iso formatted date string eg: "17-05-08T23:16:58.000Z" """
  ISO

  """return the raw value provided by the api """
  NONE

  """microseconds since 1970, eg: "1494285418000" """
  TIMESTAMP

  """utc formatted date string eg: "Mon, 08 May 2017 23:16:58 GMT" """
  UTC
}

"""
Date histogram aggregation for a given field.
Accepted fields:
+ availability_date (for_rent only)
"""
input DateHistogramAgg {
  availability_date: AvailabilityDateDateHistogramAgg
}

input DateRange {
  """Start date for historical estimate values """
  min: DateTime

  """End date for historical estimate values """
  max: DateTime
}

"""
Date range aggregation for a given field.
Accepted fields:
+ list_date (for_sale or ready_to_build status)
"""
input DateRangeAgg {
  list_date: ListDateDateRangeAgg
}

input DateStringRange {
  """
  Accepts datetime as string or accept keyword with optional offset.
  Example: "2019-02-17T03:00:00Z" (datetime) or "$now7DT9H" or "$nowUTC-5Y" or "$today+5D".
  """
  min: DateTimeString

  """
  Accepts datetime as string or accept keyword with optional offset.
  Example: "2019-02-17T03:00:00Z" (datetime) or "$now7DT9H" or "$nowUTC-5Y" or "$today+5D".
  """
  max: DateTimeString
}

"""Date Time object"""
scalar DateTime

"""
This scalar allows date string to accept either a date as string ("2019-02-17T03:00:00Z") 
  or with keyword ($now / $nowUTC / $today) and offset. 
  
  Offset is defined as accepted by moment.duration shorthand format with out a P in the beginning.
  
  Ordering should be in the decreasing period length, Y year should always be before M month.
  
  Offset period letters defined in decreasing period length below
  
    - Y: years
    - M: months (before time separator T) or minutes (after time separator T)
    - D: days
    - T: time separator
    - H: hours
    - M: minutes (after time separator T)
    - S: seconds
  
  - In order to add period just add the number (example: $now7D)
  - In order to subtract include the subtraction sign (example: $now-9D)
  
  The time offset part is separated by T.
  
  Example of input are given below
  
  - Local Date Time with all periods 5 years 2 months 3 days 4 hours 5 minutes 6 seconds 
  
    '$now5Y2M3DT4H5M6S'
    
  - Local Date Time 5 months 9 days from current time 
    
    '$now5M9D'
    
  - UTC Date Time 2 years 9 H before current UTC time 
  
    '$nowUTC-2YT9H'
    
  - UTC Date only 30 Days from current date
  
    '$today+30D'
  
  
"""
scalar DateTimeString

type DeepLinks {
  ios: String
  android: String
}

type DeleteAllSavedSearch {
  """Total deleted saved searches"""
  total_deleted: Int
}

"""status of delete Contacted Property request """
type DeletedContactedProperty {
  """boolean to specify if deletion is successful """
  deleted: Boolean!
}

type DeletedHiddenProperty {
  """whether or not the delete operation succeeds """
  deleted: Boolean
}

"""The return type of a deleted collection """
type DeletedPropertyCollection {
  """True if status code = 200 """
  deleted: Boolean!
}

"""The return type of a deleted note """
type DeletedPropertyNote {
  """True if status code = 200 """
  deleted: Boolean!
}

type DeletedSavedResources {
  """whether or not the delete operation succeeds """
  deleted: Boolean!

  """Full saved property object to make frontend state management easier """
  deleted_property: [SavedProperty!]!

  """
  Collections membership can change when deleting in subtle/complex ways with Cobuyer 
  """
  property_collections: [PropertyCollection!]!
}

type DeleteSavedSearch {
  """Successful deleted ids"""
  deleted_saved_searches: [ID]

  """unsuccessful deleted ids"""
  unsuccessful_deleted_saved_searches: [ID]
}

type Details {
  date_updated(format: DateFormat): DateTime
  garage: Int
  source: DetailsSource
  permalink: String
  year_built: String
  stories: Int
  styles: [String]
}

type DetailsSource {
  status: String
  style: String
  type: String
}

"""
Down payment input for mortgage calculation in absolute amount and percentage
"""
input DownPaymentInput {
  """down payment in percentage"""
  percentage: Float

  """down payment in amount"""
  value: Float
}

"""
This parameter may be specified multiple times to indicate the 
prospective buyers work in one or more targeted occupations 
or meet one or more household criteria
"""
enum DPAEligibleOccupationInput {
  """A household member is disabled"""
  DISABILITY

  """K-12 or University educator or staff"""
  EDUCATION

  """Firefighter / EMT"""
  FIRE

  """Healthcare worker"""
  HEALTHCARE

  """Active / reserve US military"""
  MILITARY

  """Native American"""
  NATIVE

  """Law enforcement"""
  POLICE

  """US military surviving spouse"""
  SPOUSE

  """US military veteran"""
  VETERAN
}

"""The prospective buyer’s home ownership history"""
enum DPAEligibleOwnInput {
  """
  Prospective homebuyer does not currently own a home and has never owned a home
  """
  NO1

  """
  Prospective homebuyer does not currently own a home and has own a home within last 3 years
  """
  NO2

  """
  Prospective homebuyer does not currently own a home and has owned a home 3 or more years ago
  """
  NO3

  """Prospective homebuyer currently owns a home"""
  YES
}

type DPAEligiblePrograms {
  """The amount of down payment assistance available"""
  assistance: Int

  """The name of the program"""
  name: String

  """The url to the agency's website"""
  url: String

  """
  A boolean indicating whether the program is eligible for first time homebuyers
  """
  first_time_homebuyer: Boolean

  """
  A boolean indicating whether the program is only eligible for the current homeowner
  """
  current_homeowner: Boolean
}

"""DPAEligible response"""
type DPAEligibleResponse {
  """Status of the request"""
  success: Boolean

  """The number of programs available"""
  count: Int

  """The maximum amount of down payment assistance available"""
  max: Int

  """Available down payment assistance programs"""
  programs: [DPAEligiblePrograms]
}

"""Enum for education level field used in schools api """
enum EducationLevel {
  """maps to public elementary schools"""
  elementary

  """maps to public high schools"""
  high

  """maps to public middle schools"""
  middle

  """maps to private schools"""
  private
}

type EmbeddingResults {
  """best photo that gave highest score across all search terms"""
  total_score: Float

  """full text input embedding match"""
  text_full_input: [TextEmbeddingInfo]

  """matching details for each terms"""
  terms_result: [TermResult]

  """[DEPRECATED] matching details for each search terms"""
  search_terms_result: [SearchTermResult] @deprecated(reason: "Please use terms_result instead")
}

input EmbeddingsSearchAPIBucket {
  """parameters for embeddings sort"""
  sort_options: EmbeddingsSortOptions!
}

input EmbeddingsSortOptions {
  """Embedding tag to use for sorting (ex: kitchen, living_room, etc...)"""
  embedding_tags: EmbeddingsSortTags!

  """
  Listing Id of the listing from which the images will be used to search (should be specified except for plans)
  """
  listing_id: String

  """
  Property Id of the listing from which the images will be used to search
  """
  property_id: String!
}

"""Type of embeddings used to sort the results."""
enum EmbeddingsSortTags {
  bathroom
  bedroom
  closet
  dining_room
  exterior
  floor_plan
  garage_indoor
  gymnasium
  home_office
  kitchen
  living_room
  other_interiors
  other_plan
  recreation_room
  swimming_pool
  utility_room
}

"""Forecast for environment data"""
type EnvironmentForecast {
  """
  key for different stat types e.g. days_98th_30, days_30, tropstorm_30 etc
  """
  key: String

  """Unit for different stat types e.g. count of days, percentile etc"""
  axis_y_unit: String

  """Description for graph heading"""
  descriptions: [EnvironmentForecastDescriptions]

  """Forecast values for different years"""
  values: [EnvironmentForecastDetails]
}

"""Environment Forecast descriptions for next 30 years"""
type EnvironmentForecastDescriptions {
  """key for different descriptions- title, paragraph etc."""
  key: String

  """Value for different descriptions- title, paragraph etc."""
  text: String
}

"""Environment forecast information for a specific year for the bar chart"""
type EnvironmentForecastDetails {
  """Year"""
  year: String

  """Stat value (count of days, percentage likelihood of risk etc )"""
  axis_y_value: String

  """
  The recommended max value for the Y-Axis to make the data on chart readable
  """
  axis_y_height: String
}

type EstimateRecord {
  """Estimated value of a property """
  estimate: Int

  """Date of estimation """
  date: DateTime
}

type EstimateSource {
  """
  Type of the avm vendor, list of values for "type": 
  + corelogic 
  + collateral 
  + quantarium 
  """
  type: String

  """Name of the avm vendor """
  name: String
}

type ExpandedCount {
  """
  Expansion key name (e.g. for geo: Bellevue_WA (geo_id), radius: radius_20, filter: beds_2_5)
  """
  key: String

  """title of expansion"""
  title: String

  """count for the expansion key name"""
  count: Int

  """boundary_centroid for the geo"""
  boundary_centroid: BoundaryCentroid
}

type ExpandedCounts {
  """number of counts per nearby geo expansion"""
  geo_expansion: [ExpandedCount]

  """number of counts per radius expansion"""
  radius_expansion: [ExpandedCount]

  """number of counts per filter expansion"""
  filter_expansion: [ExpandedCount]

  """number of counts per filter aggregation"""
  filter_aggregation_counts: [ExpandedCount]

  """number of counts per geo aggregation"""
  geo_aggregation_counts: [ExpandedCount]
}

"""
RDC lead customer information provided by front-end for FAR submissions
"""
input FarCustomer {
  """Agent Id of agent"""
  agent_id: ID!

  """Frofile Id of agent"""
  profile_id: ID

  """Is the agent monetized"""
  is_monetized: Boolean!
}

scalar federation__FieldSet

type Feedback {
  """id for a feedback """
  id: ID!

  """The timestamp when this link was created in Move system """
  created_date: DateTime

  """The timestamp when this link was updated in Move system """
  updated_date: DateTime

  """The feedback comment """
  comment: String

  """The anonymous user's rating """
  rating: Int

  """The anonymous user's name """
  name: String
}

type FeedbackLink {
  """id for a feedback link """
  id: ID!

  """property id for saved property """
  property_id: ID!

  """The timestamp when this link was created in Move system """
  created_date: DateTime

  """The timestamp when this link was updated in Move system """
  updated_date: DateTime

  """The searchHome object """
  home: SearchHome
}

input FeedbackLinkCreateInput {
  """property id """
  property_id: ID!
}

type FeedbackList {
  feedback_list: [Feedback!]!

  """total count of feedbacks for this saved property """
  total_count: Int
}

input FilterExpansionCriteria {
  """list_price expansion (%)"""
  list_price: String

  """hoa_fee expansion (%)"""
  hoa_fee: String

  """sqft expansion (%)"""
  sqft: String

  """lot_sqft expansion (%)"""
  lot_sqft: String

  """beds expansion (absolute number)"""
  beds: Int

  """baths expansion (absolute number)"""
  baths: Int

  """garage expansion (absolute number)"""
  garage: Int

  """year_built expansion (absolute number)"""
  year_built: Int

  """
  list exclude filters. For each filter, expansion will not be computed by removing it from query
  """
  exclude: [String!]
}

input FilterRange {
  min: Int
  max: Int
}

"""Valid filter types to enable based on consumer attributes"""
enum FilterTypeInput {
  """Filter on the user's preferred number of bathrooms"""
  BATHS

  """Filter on the user's preferred number of bedrooms"""
  BEDS

  """Filter on the user's preferred price range"""
  LIST_PRICE

  """Filter on the user's preferred size in square feet"""
  SQFT
}

input FloatRange {
  """Start of range."""
  min: Float

  """End of range."""
  max: Float
}

type Flood {
  """First Street flood parcel ID """
  fsid: String

  """Flood Factor Score. Valid values 1 to 10, where 1 is low flood risk. """
  flood_factor_score: Int

  """
  Flood Factor Severity: Minimal, Minor, Moderate, Major, Severe, Extreme 
  """
  flood_factor_severity: String

  """Property page on First Street's website """
  firststreet_url: String

  """
  Trend direction: -1, 0, 1.  -1 is trending less risky, 0 is stationary, 1 is trending riskier. 
  """
  trend_direction: Int

  """
  Flood Trend : decreasing, not changing, increasing based on trend_direction
  (-1 is trending decreasing, 0 is not changing, 1 is increasing). 
  """
  flood_trend: String

  """
  FEMA Zone.  Flood zones as defined by fema.gov. 
  https://www.fema.gov/disaster/updates/fema-flood-maps-and-zones-explained 
  """
  fema_zone: [String]

  """Historical flood events """
  flood_events: [FloodEvent]

  """Future flood risk chances """
  flood_chances: [FloodChance]

  """Adaptation - preventative measures. """
  adaptations: [Adaptation]

  """
  insurance requirement: B, C, X or A99 are "Recommended".  All other zones are Required. 
  """
  insurance_requirement: String

  """Insurance quotes """
  insurance_quotes: [InsuranceQuote]

  """Insurance rate. New field for flood insurance rates"""
  insurance_rates: [InsuranceQuote]

  """
  Denotes what environmental risks impact the location  (1 = precipitation, 2 =
  precipitation and sea level rise, 3 = precipitation, sea level rise and
  hurricane storm surge). 
  """
  environmental_risk: Int

  """
  Flood trend paragraph for property. Example - This property's risk of flood is constant 
  """
  flood_trend_paragraph: String

  """
  Flood insurance texual decaription. Ex. whether insurance is required or not.
  """
  flood_insurance_text: String

  """Flood risk over 30 years"""
  flood_cumulative_30: String
}

type FloodChance {
  """Time, current month and day default to Janurary 01 """
  time: DateTime

  """
  Minimum depth threshold in centimeters.  For examples, 0 is any depth, 15 is 15cm or deeper. 
  """
  threshold: Int

  """Probability in decimal: [{type: mid, value: 0.1}, ....] """
  probability: [FloodChanceProbability]
}

type FloodChanceProbability {
  type: String
  value: Float
}

type FloodEvent {
  """year and month when event occurred """
  time: DateTime

  """event type: hurricane, fluvial, nor'easter, tropical storm, etc. """
  type: String

  """Depth of flood in centimeters """
  depth: Int

  """Name of flood """
  name: String
}

type FloorPlan2d {
  href: String
  type: String
}

type FloorPlan3d {
  href: String
  type: String
  thumbnail_url: String
}

type FloorplanDescription {
  """Number of bathrooms."""
  baths: Float

  """Number of half bathrooms."""
  baths_half: Int

  """Number of beds."""
  beds: Int

  """Rental community/management/corporation name"""
  name: String

  """Square footage of the floorplan"""
  sqft: Float

  """Listing description"""
  text: String

  """Floorplan type."""
  type: String
}

type FloorPlanInteractive {
  href: String
  type: String
  source: String
}

type FloorPlans {
  floorplan_2d: [FloorPlan2d]
  floorplan_3d: [FloorPlan3d]
  floorplan_interactive: [FloorPlanInteractive]
}

type FloorplanUnits {
  """Unit availability"""
  availability: HomeAvailability

  """Unit availability"""
  amenities: [String]

  """Description of floorplan, beds/baths/type/etc."""
  unit_description: UnitDescription

  """Unit available images/photos."""
  photos(
    """limit the number of photos returned -- optional."""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean
  ): [HomePhoto]

  """
  Standardized rental type. Available values:
  + Unit
  + Condo
  + Apt
  """
  type: String

  """Source ID."""
  source_id: ID

  """ID associated with unit."""
  unit_id: ID
}

type ForecastEstimate {
  source: EstimateSource
  estimates: [EstimateRecord]
}

"""The user's dominant zip code information"""
type ForYouDominantZip {
  """zip code"""
  zip: String

  """city"""
  city: String

  """state code"""
  state: String

  """county"""
  county: String

  """will return false when  city is unique in the state else true """
  county_needed_for_uniq: Boolean
}

"""Monthly price trend data points"""
type ForYouHistoricalTrend {
  """Median list price for home property type for the month"""
  home_median_listing_price: Float

  """The month for this datapoint (1: January, 12: December)"""
  month: Int

  """The year for this datapoint"""
  year: Int
}

"""Monthly price trend statistics"""
type ForYouMarketTrendStats {
  """Text summary of the trend information"""
  snippet: String

  """Median list price for home property type"""
  home_median_listing_price: Float

  """Year to year trend statistics"""
  year_to_year: ForYouTrendYearToYear

  """Monthly price trend data points"""
  historical_trends: [ForYouHistoricalTrend]
}

"""Neighborhood details and statistics"""
type ForYouNeighborhoodStats {
  """The neighborhood name"""
  neighborhood: String

  """city"""
  city: String

  """state code"""
  state_code: String

  """Number of property listings for sale"""
  for_sale_count: Int

  """Median days on the market for home property type"""
  home_median_days_on_market: Int

  """Median list price for home property type"""
  home_median_listing_price: Float

  """Neighborhood border outline coordinates"""
  boundary: GeoJSON

  """Schools statistics"""
  schools: ForYouSchoolsStats
}

"""
Output holding the list of neighborhood recommendations and dominant zip metadata
"""
type ForYouNeighborhoodStatsListResult {
  """The list of neighborhoods along with the respective statistics"""
  results: [ForYouNeighborhoodStats]
}

"""A news article"""
type ForYouNewsArticle {
  """Article's unique ID"""
  id: String

  """Image URL for the article thumbnail"""
  image: String

  """Article link for IOS device"""
  ios_link: String

  """Publication date in ISO 8601 format"""
  pub_date: String

  """Article's title"""
  title: String
}

"""Output holding a list of articles"""
type ForYouNewsArticlesResult {
  """The list of news articles"""
  articles: [ForYouNewsArticle]
}

"""Output holding the list of property results and dominant zip metadata"""
type ForYouPropertyListResult {
  """Total number of potential search results"""
  total: Int

  """The user's dominant zip location information"""
  dominant_zip: ForYouDominantZip

  """The list of property results as recommendations"""
  results: [SearchHome]

  """Property search criteria based on user's preferences"""
  consumer_criteria: ConsumerCriteria
}

"""The statistics for the schools in a neighborhood"""
type ForYouSchoolsStats {
  """The number of schools for all levels in the neighborhood"""
  count: Int

  """The minimum rating among schools in the neighborhood"""
  rating_min: Int

  """The maximum rating among schools in the neighborhood"""
  rating_max: Int
}

"""Input passed to for_you_feeds query"""
input ForYouSearchCriteria {
  """User's visitor_id"""
  visitor_id: ID!

  """
  Date and time when the user last used the app in the past, prior to today
  """
  last_visited_date: DateTime

  """Max number of recommendations per category to return"""
  limit: Int

  """List of Filter types to enable based on consumer attributes"""
  filter_by: [FilterTypeInput]
}

"""Input passed to for_you_feeds_with_fallback query"""
input ForYouSearchLocationFallbackCriteria {
  """User's visitor_id"""
  visitor_id: ID!

  """
  Date and time when the user last used the app in the past, prior to today
  """
  last_visited_date: DateTime

  """Max number of recommendations per category to return"""
  limit: Int

  """City used as fallback when user is too new to have dominant zip"""
  city: String!

  """
  County used as fallback when user is too new to have dominant zip and if duplicate city then county will be used
  """
  county: String

  """State used as fallback when user is too new to have dominant zip"""
  state_code: String!

  """List of Filter types to enable based on consumer attributes"""
  filter_by: [FilterTypeInput]

  """
  Flag to indicate whether to override the user's dominant location with the fallback location
  """
  fallback_override: Boolean
}

"""Output of for you feed recommendations"""
type ForYouSearchResult {
  """List of properties that have been recently listed"""
  new_listings: ForYouPropertyListResult

  """List of properties with upcoming open houses"""
  open_houses: ForYouPropertyListResult

  """List of properties that had a reduction in price"""
  price_reduced: ForYouPropertyListResult

  """List of recommended neighborhoods and corresponding statistics"""
  neighborhoods: ForYouNeighborhoodStatsListResult

  """Monthly price trend statistics for the user's city"""
  market_trends: ForYouMarketTrendStats

  """A list of recommended articles for the user"""
  news_articles: ForYouNewsArticlesResult
}

"""Year to year trend statistics"""
type ForYouTrendYearToYear {
  """The percentage change in the median list price compared to last year"""
  home_median_listing_price_percent_change: Float
}

"""input schema for free_text"""
input FreeTextInput {
  """free text input (e.g. 2+ beds with swimming pool and basement)"""
  text: String

  """
  Whitelisted filters that can be used out of all the filters detected by models or external service (e.g. beds, list_price)
  """
  include_filters: [String]

  """
  flag to return error when ML API returns failure status (e.g. failed, rejected)
  """
  terminate_on_ml_api_failure: Boolean

  """flag to use text embeddings for search"""
  use_text_embedding: Boolean
}

"""FreeTextSearch params for free-text-filter"""
type FreeTextSearch {
  """(DEPRECATED) Search terms recognized by model from free_text_filter"""
  search_terms: [String] @deprecated(reason: "Please use terms instead")

  """Search terms recognized by model from free_text_filter"""
  terms: [SearchTerm]

  """Filters used after applying LLM model to filter-out homes"""
  search_query: HomeSearchCriteriaJSON
}

"""FreeTextSearch input parameters"""
input FreeTextSearchInput {
  """Search terms recognized by model from free_text_filter"""
  search_terms: [String]

  """Filters used after applying LLM model to filter-out homes"""
  search_query: HomeSearchCriteria
}

"""All Geo implementations must support these fields. """
interface Geo {
  """
  The type of each Geo implementation 
  + city 
  + county 
  + neighborhood  
  + postal_code 
  + state 
  """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """Centroid to help position the map. """
  centroid: Coordinate

  """
  Statitics of the Geo.  
  Currently available values 
  + housing market 
  + unique insights 
  + images 
  + crime range 
  """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """A list of recommended / similar geos. """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """Geo's boundary """
  boundary: GeoJSON

  """Geo's Parents """
  parents: [GeoParent]

  """state_code"""
  state_code: String

  """county_needed_for_uniq"""
  county_needed_for_uniq: Boolean

  """Find relevant schools given a geo. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

input GeoExpansionCriteria {
  """geo area type. Valid ["city", "postal_code"]"""
  area_type: String!

  """type of expansion. Valid ["nearby", "radius", "ml-model"]"""
  type: [String!]!

  """name of model in case ml-model type is selected"""
  model: String

  """top max_geos to return in case of nearby expansion type"""
  max_geos: Int

  """location used for search. (e.g. "Seattle, WA")"""
  location: String
}

"""JSON representation of a geo object"""
scalar GeoJSON

"""List of geos """
type GeoList {
  """the total number of geos in the list """
  total: Int

  """the list of geos """
  geos: [Geo]
}

"""Data about a geo parent """
type GeoParent {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """The name of the Parent """
  name: String!
}

"""Photos of this geo """
type GeoPhoto {
  """file name of the the geo image """
  public_id: String

  """type of image file. jpg, png ... """
  format: String

  """descriptive title of the image """
  title: String

  """each geo can have a single hero image designating the best image """
  hero: Boolean
}

"""Output of geo recommendations search """
type GeoRecommendationSearchList {
  """The list of recommended geos """
  recommended_geos: [RecommendedGeo]
}

"""Geo Statistics from Markettrends API"""
type GeoStat {
  """average elementary school rating"""
  elementary_school_rating_average: Float

  """average middle school rating"""
  middle_school_rating_average: Float

  """average high school rating"""
  high_school_rating_average: Float
}

"""
Geo statistics from the Market Trends API (E.g. minimum and maximum crime index for geo) 
"""
type GeoStatistics {
  """data about the housing market in geo """
  housing_market: HousingMarket

  """
  insights, like affordable or good schools, that are unique to the geo. 
  """
  unique_insights: [UniqueInsights]

  """photograph data for the geo """
  photos: [GeoPhoto]

  """crime data for the geo """
  crimes: [Crime]

  """
  geo statistics, like average elementary school rating, middle school rating and high school rating. 
  """
  geo_stat: GeoStat
}

"""
The type of geos to recommend  
It is used as input parameter to search recommended geos 
"""
enum GeoType {
  city
  county
  neighborhood
  postal_code
  state
}

"""The rdc geo (gis) data of the school district """
type Gis {
  """The gis city """
  gis_city: String

  """The gis county """
  gis_county: String
}

"""
GroupBy is used to group geo_insights endpoint results based on selected criteria 
currently supported values 
+ property_type - group attributes for different property types(land,
single_family, multi_family, condos, townhomes, condo_townhome_rowhome_coop,
apartment, townhomes, duplex_triplex, coop, home) 
"""
enum GroupBy {
  """group results by property types """
  property_type
}

"""
Housing market statistics from Market Trends API for types available in selected group_by. 
For group_by = property_type, these median statistics will be returned for the different property types 
"""
type GroupTypeAttributes {
  """the median list price for listings """
  median_listing_price: Float

  """the median lot size for properties """
  median_lot_size: Float

  """the median sold price for listings """
  median_sold_price: Float

  """the median price per sqare foot for listings """
  median_price_per_sqft: Float

  """the median days on market for listings """
  median_days_on_market: Float
}

"""Heat information for the property """
type HeatStatistics {
  """First Street heat parcel ID """
  fsid: String

  """Heat Factor Score. Valid values 1 to 10, where 1 is low heat risk """
  heat_factor_score: Int

  """
  Heat Factor Severity: Minimal, Minor, Moderate, Major, Severe, Extreme 
  """
  heat_factor_severity: String

  """Property page on First Street's website """
  firststreet_url: String

  """Heat warning paragraph for heat modal """
  heat_warning_paragraph: String

  """Number of days above hot temperature for property """
  heat_trend: String

  """Number of days above hot temperature for property """
  heat_days_text: String

  """Link to page containing more information regarding heat data"""
  heat_study_link: VendorUrl

  """Cooling cost paragraph for heat"""
  cooling_cost_paragraph: String

  """Heat forcast for next 30 years"""
  heat_forecast: [EnvironmentForecast]
}

"""A property that is hidden from the user """
type HiddenProperty {
  """property id for hidden property """
  property_id: ID

  """home status """
  status: HiddenPropertyStatus

  """The timestamp when this listing was created in Move system """
  created_date: DateTime
  home: SearchHome
}

"""Specify criteria to query the user's hidden properties """
input HiddenPropertyCriteria {
  """
  If this value is null, hidden properties of BOTH types are returned. 
  Otherwise, only hidden properties of the specified type are returned 
  """
  status: HiddenPropertyStatus
}

input HiddenPropertyInput {
  """property id """
  property_id: ID!

  """home status """
  status: HiddenPropertyStatus!
}

"""Supported statuses to query hidden properties by """
enum HiddenPropertyStatus {
  for_rent
  for_sale
  new_community
}

"""
Information about property's highlight phrase. It provides a useful insight for the customer regarding the property. 
"""
type HighlightPhrase {
  """full phrase """
  text: String

  """start index in the full phrase  """
  start_index: Int

  """end index in the full phrase """
  end_index: Int

  """Listing description score. Valid description_score >=0. """
  description_score: Float

  """phrase extracted from text """
  phrase: String
}

"""
Information about property's real tip. It provides a useful tip for the customer such as pool or tennis court access. 
"""
type HighlightTip {
  """Description from real tip result. """
  text: String
}

enum HighlightType {
  """ML based highlight phrase about a property """
  phrase

  """top_phrases from HighlightPhrase """
  phrase_srp_spl_homes

  """Real Tip from Apollo API """
  tip
}

"""
Histogram aggregation for a given field.
Accepted fields:
+ list_price
+ year_built (for_sale or ready_to_build status)
+ lot_sqft
+ sqft
+ hoa_fee (for_sale or ready_to_build status)
+ beds
+ baths
"""
input HistogramAgg {
  list_price: ListPriceHistogramAgg
  year_built: YearBuiltHistogramAgg
  lot_sqft: LotSqftHistogramAgg
  sqft: SqftHistogramAgg
  hoa_fee: HoaFeeHistogramAgg
  beds: BedsHistogramAgg
  baths: BathsHistogramAgg
}

"""
Histogram segment aggregation.
Accepted fields:
+ list_price
"""
input HistogramSegmentAggInput {
  """Field to perform histogram segment aggregation on."""
  field: HistogramSegmentFields!

  """
  Multiplier used to calculate interval, formula is (median * multiplier) / buckets.
  """
  multiplier: Int!

  """Number of buckets to be used for histogram segment aggregation."""
  buckets: Int!
}

"""Valid fields for histogram segment aggregation."""
enum HistogramSegmentFields {
  """List price."""
  list_price
}

type HistoricalEstimate {
  """Source of the historical estimate value """
  source: EstimateSource

  """Historical estimates """
  estimates: [EstimateRecord]
}

"""Historical wind events """
type HistoricalWindEvents {
  """Name of the event"""
  name: String

  """Date of the event"""
  date: DateTime

  """Number of properties impacted"""
  num_properties_impacted: Int

  """Maximum wind speed"""
  max_wind_speed_mph: Int

  """Total damages cost in usd """
  damages_usd: Int
}

"""Hoa_fee histogram aggregation."""
input HoaFeeHistogramAgg {
  """Accepts interval size of int in range [10, 500]"""
  interval: Int
}

"""Hoa_fee range aggregation"""
input HoaFeeRangeAgg {
  """Accepts array of float ranges."""
  ranges: [NumberAggRange]
}

type Home {
  """Unique Home identifier also known as property id"""
  property_id: ID!

  """
  Unique identifier of a listing selected to present this Home. Might be null if
  Home is based on information from public records.
  """
  listing_id: ID

  """Unique identifier of a listing"""
  listing_key: ID

  """
  Availability data representing when and if this home will be available. Data
  elements include date, description, and link to external web site containing
  additional info. Currently only some rental data will have it.
  """
  availability: HomeAvailability

  """A home builder info provided by BDX"""
  builder: HomeBuilder

  """
  A link to a parent community. Could be one of the following:
  + New Home subdivision - if current Home is New Home plan
  + New Home subdivision - if current Home is MLS listing linked to New Home spec
  + New Home subdivision - if current Home is New Home spec listing
  + Building assembly - if current Home is a unit inside the building
  """
  community: Home

  """
  Indicates quality of property, validated against a set criteria
  + 1111 denotes a high quality property which passed all criteria
  + 0000 denotes a low quality property which failed all criteria
  """
  confidence_code: String
  description: HomeDescription

  """Categorized listing attributes for display on LDP"""
  details: [HomeDetails]

  """
  Green Program infomration. It comes from New Homes data. Null value means no
  specific green program associated with New Home Community from the data provider.
  """
  ecofriendly: [HomeEcoFriendly]
  flags: HomeFlags

  """Complete URL as exposed on RDC"""
  href: String

  """Last price change amount - could be positive or negative"""
  last_price_change_amount: Float

  """Last time the price has changed"""
  last_price_change_date: DateTime

  """Last sold price for this Home"""
  last_sold_price: Float

  """Last time the Home was sold"""
  last_sold_date: DateTime
  last_status_change_date: DateTime
  last_update_date: DateTime

  """The time this Home entered Move system"""
  list_date: DateTime

  """The current price of the Home"""
  list_price: Float

  """The current price per sqft of the Home"""
  price_per_sqft: Float

  """Min range for rental community listings or New Home subdivision"""
  list_price_min: Float

  """Max range for rental community listings or New Home subdivision"""
  list_price_max: Float
  list_price_hint: String

  """
  Listing status:
  + for_sale
  + for_rent
  + sold
  + off_market
  + active (New Home Subdivisions)
  + other (if none of the above conditions were met)
  """
  status: String

  """MLS standardized listing status"""
  mls_status: String

  """String value containing Application Link URL"""
  application_url: String

  """
  Boolean flag to indicate if daylight savings applies to this listing's office location
  """
  daylight_saving: Boolean

  """A value determining the timezone of this listing's office location"""
  timezone: String

  """location related information and can be null"""
  location: HomeLocation

  """Monthly fees. Currently only some rental data will have them."""
  monthly_fees: HomeMonthlyFee

  """One time fees. Currently only some rental data will have them."""
  one_time_fees: [HomeOneTimeFee]

  """Move in date for the New Home spec listing"""
  move_in_date: String

  """Coming soon to market date for the listing"""
  coming_soon_date: String

  """List of open house events. Only current/future events are exposed."""
  open_houses: [HomeOpenHouse]

  """A list of other listings available for this Home"""
  other_listings: HomeOtherListings

  """Parking information. Currently only some rental data will have it."""
  parking: HomeParkingDetails

  """The date listing went into pending state"""
  pending_date: DateTime
  pet_policy: HomePetPolicy

  """Home available image/photo count"""
  photo_count: Int

  """Home available images/photos"""
  photos(
    """limit the number of photos returned -- optional"""
    limit: Int

    """
    Selects the most suitable photos for the first and second positions in the
    photo order for active listings to improve user click-through rate helping
    SRP to LDP conversion and increase lead submission. Defaults to true.
    """
    ctr_reordering: Boolean

    """
    photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """exclude the type of photos returned"""
    excluded_types: [String]

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): [HomePhoto]

  """Home available images/photos with ability to get only required images"""
  images(
    """limit the number of photos returned -- optional"""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """what types of images to return --optional, defaults to all"""
    type: ImageType
  ): HomeImages

  """Previously used property ids for this property"""
  previous_property_ids: [ID]

  """Indicates if this Home is based on a default (primary) listing"""
  primary: Boolean

  """List of available promotions for New Home data"""
  promotions: [HomePromotions]
  provider_url: HomeProviderUrl

  """Information about the source of the data"""
  source: MlsSource
  specials: [HomeSpecials]

  """
  A list of applicable suppression rules. See the documentation for the JSON type for extended information
  """
  suppression_flags: JSON

  """
  Search tags used for advanced feature search
  Currently available values (additional values might be added at any time):
  + baseball
  + basement
  + basketball
  + basketball_court
  + beach
  + beautiful_backyard
  + big_bathroom
  + big_lot
  + big_yard
  + boat_dock
  + carport
  + cathedral_ceiling
  + central_air
  + central_heat
  + city_view
  + clubhouse
  + coffer_ceiling
  + community_boat_facilities
  + community_center
  + community_clubhouse
  + community_doorman
  + community_elevator
  + community_golf
  + community_gym
  + community_horse_facilities
  + community_outdoor_space
  + community_park
  + community_security_features
  + community_spa_or_hot_tub
  + community_swimming_pool
  + community_tennis_court
  + conversation_pit
  + corner_lot
  + courtyard_entry
  + courtyard_style
  + cul_de_sac
  + den_or_office
  + detached_guest_house
  + detached_in_law_unit
  + dining_room
  + disability_features
  + dishwasher
  + dog_kennel
  + dual_master_bedroom
  + efficient
  + elevator
  + emoov
  + energy_efficient
  + ensuite
  + equestrian
  + exposed_brick
  + fallout_shelter
  + family_room
  + farm
  + fenced_courtyard
  + fenced_yard
  + finished_basement
  + fireplace
  + first_floor_master_bedroom
  + fixer_upper
  + floor_plan
  + folsom_lake_view
  + forced_air
  + front_porch
  + fruit_trees
  + furnished
  + furniture
  + game_room
  + garage
  + garage_1_or_more
  + gated_community
  + golf_course
  + golf_course_lot_or_frontage
  + golf_course_view
  + gourmet_kitchen
  + granite_kitchen
  + greenbelt
  + greenhouse
  + groundscare
  + guest_house
  + guest_parking
  + handicap_access
  + hardwood_floors
  + helipad
  + hidden_passageway
  + hidden_room
  + high_ceiling
  + hill_or_mountain_view
  + hoa
  + hollywood_sign_view
  + horse_facilities
  + horse_property
  + horse_stables
  + hunting_land
  + in_law_unit
  + indoor_basketball_court
  + investment_opportunity
  + jack_and_jill_bathroom
  + kitchen_diner
  + kitchen_island
  + kosher_diner
  + lake
  + lake_view
  + large_kitchen
  + large_porch
  + las_vegas_strip_view
  + laundry_room
  + lease_option
  + level
  + library
  + low_hoa
  + maintenance
  + marina
  + master_bathroom
  + master_bedroom
  + master_suite
  + media_room
  + medicalcare
  + modern_kitchen
  + mount_rainier_view
  + mountain_view
  + new_construction
  + new_roof
  + no_hoa
  + ocean_view
  + open_floor_plan
  + open_house
  + open_kitchen
  + outbuilding
  + outdoor_kitchen
  + park
  + parking_garage
  + pets_allowed
  + playground
  + pond
  + pool
  + private_backyard
  + private_bathroom
  + private_courtyard
  + private_parking
  + race_track
  + ranch
  + recording_studio
  + recreation_facilities
  + rental_property
  + river_access
  + river_view
  + runway
  + rv_or_boat_parking
  + rv_parking
  + screen_porch
  + security
  + senior_community
  + shopping
  + smart_homes
  + soccer
  + solar_panels
  + solar_system
  + spa_or_hot_tub
  + storm_shelter
  + swimming_pool
  + table_rock_lake_view
  + tax_lien
  + tennis
  + tennis_court
  + theater_room
  + trails
  + two_kitchen
  + two_master_suites
  + unfinished_basement
  + updated_kitchen
  + vaulted_ceiling
  + view
  + views
  + volleyball
  + washer_dryer
  + water_view
  + waterfront
  + well_water
  + white_kitchen
  + wine_cellar
  + wooded_land
  + wrap_around_porch
  """
  tags: [String]

  """
  A complete tax history for this Home. The source is Tax Assessor data from 3rd
  party Public Record vendor. Another attribute tax_record provides information
  for public record itself.
  """
  tax_history: [TaxHistory]

  """Rental community terms"""
  terms: [HomeTerms]
  videos: [Video]

  """
  Number of floor plans for community rental or New Home plans for subdivision
  """
  unit_count: Int

  """Number of New Home plans for subdivision"""
  plan_count: Int

  """Number of New Home Spec for subdivision"""
  spec_count: Int

  """
  List of units that belong to this home. See below for possible scenarios
  + Community rental - units represent floor plans (status parameter is ignored)
  (Deprecated - Use community_rental_floorplans)
  + Building - units represent individual homes inside the building. `status`
  parameter should be used to specify types of homes to return. If not provided,
  no units will be returned.
  + New Home Subdivision - units represent either New Home Plans or New Home
  Spec. `status` parameter should be used to specify types of homes to return.
  If not provided, no units will be returned.
  """
  units(
    """Specifies which units to provide -- optional"""
    status: [HomeStatus]

    """Limit the number of units returned -- optional"""
    limit: Int
  ): [SearchHome]

  """
  List of floorplans that belong to this home. See below for possible scenarios
  + Community rental - units represent floor plans
  """
  community_floorplans(
    """Limit the number of floorplans returned -- optional"""
    limit: Int
  ): [SearchHome] @deprecated(reason: "Please use community_rental_floorplans")

  """Number of floor plans for community rental"""
  community_floor_plan_count: Int @deprecated(reason: "Please use community_rental_floor_plan_count")
  last_sold_price_min: Float
  last_sold_price_max: Float

  """The timestamp when this listing was created in Move system"""
  create_date: DateTime

  """Home Owners Association"""
  hoa: HomeHOA

  """
  DEPRECATED (Please use suppressed_data) Fields that were suppressed from Home. Available to authorized clients only.
  """
  original_data: JSON

  """
  Fields that were suppressed from Home. Available to authorized clients only.
  See the documentation for the JSON type for extended information
  """
  suppressed_data: JSON

  """
  Fields that have restricted use and removed from Home. Available to authorized
  clients only. See the documentation for the JSON type for extended information
  """
  restricted_data: JSON

  """
  Home private data. Available to authorized clients only. See the documentation for the JSON type for extended information.
  """
  private_data: JSON

  """
  Related Homes provide data for different types like similar_homes etc.,
  """
  related_homes(query: RelatedHomesQuery!): SearchHomeResult

  """Primary listing photo """
  primary_photo(
    """
    photos should use https schema if set to true -- optional, default to false 
    """
    https: Boolean

    """size of the photo to be returned -- optional """
    size: SizeStrategy
  ): HomePhoto

  """Number of videos available """
  video_count: Int

  """
  The 'permalink' portion of the full property url - also known as address slug 
  """
  permalink: String
  raw_json_debug_only: JSON @deprecated(reason: "Debug only don't use!!! Deprecated Date: always")

  """Metrics related to the community."""
  community_metrics(filter: CommunityMetricsFilter): CommunityMetrics

  """Rent to own prices for listings."""
  rent_to_own: [RentToOwn]

  """Source level timestamp"""
  refresh_timestamp: DateTime

  """Number of days listing is active on market. Provided directly by MLS."""
  days_on_market: Int

  """
  Estimate is: Automated Valuation Model, commonly known as the estimated value
  of a property. An estimated value is a starting point to understand what a
  property might sell for. 
  We always encourage homeowners to take the next step and speak with a real
  estate professional to understand the real value of a home. 
  """
  estimates: HomeEstimates

  """Popularity of the home on RDC """
  popularity(filter: PopularityFilter): HomePopularity

  """
  Information about tax record as provided by Tax Assessor data from 3rd party
  Public Record vendor. – API Info: Homes API. See tax_history for the detailed
  data from tax_record. 
  """
  tax_record: TaxRecord

  """Find schools assigned to a given coordinate (centroid) """
  assigned_schools(
    """payload sent to schools api assigned endpoint"""
    query: SchoolsInput
  ): SchoolList

  """Find nearby schools given a coordinate """
  nearby_schools(radius: Float, limit_per_level: Int, include_suppressed_schools: Boolean): SchoolList

  """Find school districts assigned to a given coordinate (centroid) """
  assigned_school_districts: SchoolDistrictList

  """
  Find relevant schools given a coordinate. 
  Behind the scene, it returns assigned schools if found, otherwise nearby schools. 
  """
  schools(
    """payload sent to schools api nearby endpoint"""
    query: SchoolsInput
  ): SchoolList

  """
  Parties advertising the Home for sale/rent. It could be an agent/office (for
  sale listings) or community/management/corporation (for rental properties).
  The source of data is coming from Relator.com Profile system and it might be
  different from source.agent information that is coming from MLS.
  """
  advertisers: [HomeAdvertiser]

  """List of advertisers representing a buyer"""
  buyers: [HomeAdvertiser]

  """product information from the Products API """
  products: ProductSummary

  """
  Complete property history showing events from all listings/public records 
  """
  property_history: [HomePropertyHistory]

  """Retrieve the Matterport media associated with the specified property """
  matterport: Matterport
  virtual_tours: [VirtualTour]

  """app-friendly abstraction of products + advertisers + mls source data """
  consumer_advertisers: [ConsumerAdvertiser]

  """Branding information for LDP specific to RDC web/mobile"""
  branding: [Branding]

  """lead_attributes information for LDP specific to RDC web/mobile. """
  lead_attributes(caller: CallerPlatform): LeadAttributes

  """Promotion information for LDP specific to RDC web/mobile """
  seller_promotion: SellerPromotion

  """
  Information about property's highlight which provides enriched content using a
  machine learning or an algorithm like NLP based on the listing data. 
  
  1) Available highlight data : 
  + Tip : Porperty tip data by calculating % by zipcode for each property
  attribute in terms of sq ft, lot sq ft, bed, bath, school, neighborhood. 
  
  2) Arguments 
  + highlight_type : The type of highlights data to fetch. 
  + limit : how many results to return. The default is 1. 
  """
  highlights(highlight_type: HighlightType!, limit: Int): [PropertyHighlight]
  seo_linking_modules(type: SeoModuleType!, limit: Int): SeoLinkingModuleResponse

  """
  mortgage provides mortgage rates, monthly payment including property tax, and
  home insurance based on home's location and price
  loan_id examples: (fifteen_year_fix, five_one_arm, seven_one_arm,
  ten_year_fix, thirty_year_fha, thirty_year_fix, thirty_year_va,
  twenty_year_fix)
  """
  mortgage(down_payment: Int, loan_id: ID, options: MortgageFlags): Mortgage

  """
  commute time from this home to the specified destination 
  returns null if an error occurs, for example if a home does not have lat. lon. coordinates 
  """
  commute_time(input: CommuteTimeInput!): CommuteTime @deprecated(reason: "Use get_commute_time instead")

  """Nearby transit options """
  nearby_transit(input: NearbyTransitInput = {limit: 10}): [NearbyTransit!]!

  """
  Gstat local statistics - statistical information about the surrounding areas that the property is in, such as noise level 
  """
  local: Local

  """Home available 2d/3d """
  floorplans: FloorPlans
  home_tours: HomeTours

  """Represents vector values of house styles of a listing  """
  style_vector: HomeStyleVector

  """
  Contains style type, its probability and whether or not it is a label. Allows
  users to filter listings by house styles on SRP 
  """
  style_categories: HomeStyleCategories

  """Number of floor plans for community rental """
  community_rental_floor_plan_count: Int

  """
  List of floorplans that belong to this home. See below for possible scenarios 
  + Community rental - units represent floor plans 
  """
  community_rental_floorplans(
    """Limit the number of floorplans returned -- optional """
    limit: Int
  ): [CommunityRentalFloorplan]

  """New Homes linkage between spec listings and MLS listings"""
  mls_link_spec: MlsLinkSpec

  """
  Amenities near home: cofee shops, restaurants, grocery shops, daycares etc.
  """
  amenities(query: AmenityInput!): [Amenities]

  """Amenities categories mapping to location scores"""
  amenities_categories: AmenitiesCategories

  """
  Provided by CoreLogic, the Building Permit data presents residential building permit information 
  about the property, hence giving insight into what has happened to the home over time before.
  """
  building_permits_history: [BuildingPermitsHistory]
}

type HomeAddress {
  line: String
  street_number: String
  street_direction: String
  street_name: String
  street_suffix: String
  street_post_direction: String
  unit: String
  city: String
  state_code: String
  postal_code: String
  country: String

  """
  Describes the quality of the address and whenver it was validated against USPS/Canada Post data.
  """
  validation_code: String
  coordinate: HomeCoordinate

  """state name, looked up from the provided state code """
  state: String
}

"""
Parties advertising the Home for sale/rent and representing renter/seller and may or may not represent buyer
"""
type HomeAdvertiser {
  """List Team Name of the seller"""
  team_name: String @deprecated(reason: "team_name will be replaced by team.name")

  """Advertiser fulfillment id as exposed by Profile API"""
  fulfillment_id: ID
  nrds_id: ID

  """Advertiser name"""
  name: String
  email: String
  team: AdvertiserTeam

  """Advertiser agent state license number"""
  state_license: String

  """Reference to advertiser web site"""
  href: String
  photo(
    """
    photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): Href
  slogan: String
  address: AdvertiserAddress

  """
  Advertisers office - this is an office that listed the advertisement (listing).
  """
  office: HomeAdvertiserOffice

  """
  Phone number information which is only shown if there is an advantage license (from licensing API)
  """
  phones: [AdvertiserPhone]

  """
  Agent that creates listings in MLS and has ownership of the listings. Null
  means data error or the listing agent isn't under any brokerage. used on LDP
  as "Presented By". maintained by SLPA API, a cache for Profile API
  """
  broker: HomeAdvertiserBroker

  """
  Advertiser type. Can be one of the following values:
  + seller
  + co_seller
  + buyer
  + co_buyer
  + community (applies to community rental listings only)
  """
  type: String

  """Helps correlate advertiser data with data in home.source"""
  mls_set: ID

  """
  Helps correlate advertiser data with data in home.source for communities
  """
  community_set: ID

  """
  Helps correlate advertiser data with data in home.source for syndicator communities and units
  """
  customer_set: ID

  """Add fulfillment_id for builder"""
  builder: AdvertiserBuilder
  corporation: AdvertiserCorporation
  rental_management: AdvertiserRentalManagement
  rental_corporation: AdvertiserRentalCorporation
}

type HomeAdvertiserBroker {
  """Advertiser fulfillment id as exposed by Profile API"""
  fulfillment_id: ID

  """Advertiser name"""
  name: String
  accent_color: String
  designations: [String]
  logo: String
}

type HomeAdvertiserOffice {
  """Advertiser fulfillment id as exposed by Profile API"""
  fulfillment_id: ID

  """Advertiser name"""
  name: String
  email: String

  """Reference to advertiser website"""
  href: String
  photo(
    """
    photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): Href
  slogan: String
  address: AdvertiserAddress

  """
  Phone number information which is only shown if there is an advantage license (from licensing API)
  """
  phones: [AdvertiserPhone]

  """
  Office hours:
  + either a string or
  + an array of following objects `{ start_time: '12:00 pm', end_time: '4:00 pm', day: 'sunday' }`
  """
  hours: JSON
  county: AdvertiserCounty
  out_of_community: Boolean
  lead_email: AdvertiserLeadEmail
  application_url: String

  """helps correlate adveriser data with data in home.source"""
  mls_set: ID
}

union HomeAgentOffice = AdvertiserCorporation | AdvertiserBuilder | HomeAdvertiser | HomeAdvertiserOffice

"""Frequency of home alert emails """
enum HomeAlertEmailFrequency {
  """daily """
  daily

  """real time """
  realtime
}

"""
Home availability information. Describes when and if this Home/unit is available.
"""
type HomeAvailability {
  """Description of availability"""
  text: String

  """Date when the Home/unit becomes available"""
  date: DateTime

  """Flag indicating if Home/unit is currently available"""
  available: Boolean

  """
  A link to an external web site containing more info regarding this Home/unit
  """
  href: String

  """
  Availability status as provided by the source of data (DataManager for
  community rental listings). Contains words "available" or "unavailable"
  """
  status: String
}

type HomeBuilder {
  builder_id: ID
  href: String
  logo: Href
  name: String
  source_builder_id: String
}

"""Information comparing a particular home with similar homes """
type HomeComparableData {
  price: ComparableDataValue
  sqft: ComparableDataValue
  lot_sqft: ComparableDataValue
  year_built: ComparableDataAbsoluteValue
}

"""a geographical coordinate (latitude and longitude) for home"""
type HomeCoordinate {
  """
  latitude: the angular distance of a place north or south of the earth's
  equator, or of a celestial object north or south of the celestial equator,
  usually expressed in degrees and minutes.
  """
  lat: Float

  """
  longitude: is the angular distance, in degrees, minutes, and seconds, of a
  point east or west of the Prime (Greenwich) Meridian. Lines of longitude are
  often referred to as meridians
  """
  lon: Float

  """
  The accuracy of the lat/lon values
  + parcel
  + address
  + custom - manual override
  + null - not available or poor quality
  """
  accuracy: String
}

"""Data for a county. """
type HomeCounty implements Geo {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """The name of the county """
  name: String

  """The name of the county """
  county: String

  """The centroid of the county. """
  centroid: Coordinate

  """The county boundary. """
  boundary: GeoJSON

  """Statistics about the county. """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """
  A list of geos that are recommended to be similar and nearby to the county. 
  """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two rated geos in
  California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """
  The FIPs (Federal Information Processing Standard) code for the county 
  """
  fips_code: String

  """The state code of the state where the county resides. """
  state_code: String

  """Geo's Parents """
  parents: [GeoParent]

  """county_needed_for_uniq"""
  county_needed_for_uniq: Boolean

  """Find relevant schools given a county. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

type HomeDescription {
  """
  The representation of functional baths considering fulls, 3/4 and halfs. For
  example: 3 could be interpreted as 1 full + 1 3/4 + 1 half
  """
  baths: Float

  """
  Min range for rental community listings or New Home subdivision (Rentals and New Homes exclusive)
  """
  baths_min: Float

  """
  Max range for rental community listings or New Home subdivision (Rentals and New Homes exclusive)
  """
  baths_max: Float

  """
  Total number of full bathrooms (4 parts: Sink, Shower, Bathtub and Toilet)
  """
  baths_full: Int

  """
  Total number of 3/4 bathrooms (3 parts: Usually Shower, Sink and Toilet)
  """
  baths_3qtr: Int

  """Total number of 1/2 bathrooms (2 parts: Usually Sink and Toilet)"""
  baths_half: Int

  """Total number of 1/4 bathrooms (1 part only: Usually the Toilet)"""
  baths_1qtr: Int

  """
  Total number of rooms considered as baths regardess of the parts available (mostly unused)
  """
  baths_total: Int

  """
  Total number of baths_full + baths_3qtr + 0.5 if there is a single baths_half + "+"" if there is more than one baths_half
  """
  baths_consolidated: String

  """
  (DEPRECATED) Total number of full bathrooms calculated from baths_full and baths_3qtr fields.
  """
  baths_full_calc: Int @deprecated(reason: "baths_full_calc and baths_partial_calc will be consolidated into baths_consolidated")

  """
  (DEPRECATED) Total number of partial bathrooms calculated from baths_half field.
  """
  baths_partial_calc: Int @deprecated(reason: "baths_full_calc and baths_partial_calc will be consolidated into baths_consolidated")

  """Total number of bedrooms"""
  beds: Int

  """Min range for rental community listings or New Home subdivision"""
  beds_min: Int

  """Max range for rental community listings or New Home subdivision"""
  beds_max: Int
  construction: String
  cooling: String
  exterior: String
  fireplace: String

  """Number of garage spaces"""
  garage: Int

  """Min range for New Home subdivision"""
  garage_min: Int

  """Max range for New Home subdivision"""
  garage_max: Int
  garage_type: String
  heating: String

  """Rental community/management/corporation log url"""
  logo: Href

  """
  Either a rental community/management/corporation name or rental floor plan name (if field is requested under "units" node)
  """
  name: String
  pool: String

  """Square footage of the Home"""
  sqft: Float

  """Min range for rental community listings or New Home subdivision"""
  sqft_min: Float

  """Max range for rental community listings or New Home subdivision"""
  sqft_max: Float

  """Lot square footage"""
  lot_sqft: Float

  """
  List of property types from all New Home plans owned by this subdivision
  """
  plan_types: [String]
  roofing: String
  rooms: Int
  styles: [String]
  stories: Int

  """
  Standardized property sub-type. Available values:
  + condo
  + condop
  + co-op
  + townhouse
  """
  sub_type: String

  """Listing description"""
  text: String

  """
  Standardized property type. Available values:
  + apartment
  + building
  + commercial
  + condo_townhome
  + condo_townhome_rowhome_coop
  + condos
  + coop
  + duplex_triplex
  + farm
  + investment
  + land
  + mobile
  + multi_family
  + rental
  + single_family
  + townhomes
  """
  type: String
  units: Int

  """
  The type of a unit inside a building. Applies to building only. Available values:
  + apartment
  + condo
  + condop
  + co-op
  + townhouse
  """
  unit_type: String
  year_built: Int
  year_renovated: Int
  zoning: String
}

"""All other attributes available from MLS exposed in groups (categories)"""
type HomeDetails {
  category: String
  text: [String]
  parent_category: String

  """
  Relevant photos for this category based on image tags
  |Category |Image tags|
  |---------|----------|
  |Bathrooms|bathroom|
  |Bedrooms |bedroom|
  |Exterior and Lot Features|exterior|
  |Kitchen and Dining|dining_room, kitchen|
  """
  photos(
    """Limit the number of photos returned. Optional, defaults to all photos"""
    limit: Int

    """
    Photos should use https schema if set to true. Optional, defaults to false
    """
    https: Boolean

    """
    The minimum image tag probability for exposed photos. Valid values are between 0 and 1. Optional, defaults to 0
    """
    probability: Float

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): [HomePhoto]
}

"""Green Program infomration. It comes from New Homes data"""
type HomeEcoFriendly {
  """Title of the program"""
  headline: String

  """URL of the program"""
  href: String
}

type HomeEstimates {
  """'current' is DEPRECATED. Please use 'current_values' """
  current: LatestEstimate @deprecated(reason: "migrating to current_values!!! Deprecated Date: always")

  """
  Current valuation and best value for home from multiple AVM vendors. 
  When "source" parameter is omitted, return current valuation from all vendors. 
  Supported values for "source" parameter: 
  + corelogic 
  + collateral 
  + quantarium 
  When "status" parameter is omitted, return valuations with any statuses.
  """
  current_values(source: [String], filter: ListingFilter): [LatestEstimate]

  """
  Historical valuation from multiple AVM vendors. 
  When "source" parameter is omitted, return historical valuation from all vendors. 
  Day is not considered when fetching estimates using "date_range" parameter.
  When "date_range" parameter is omitted, return all historical valuation of the requested source.
  Supported values for "source" parameter: 
  + corelogic 
  + collateral 
  + quantarium 
  When "status" parameter is omitted, return valuations with any statuses. 
  """
  historical_values(source: [String], date_range: DateRange, filter: ListingFilter): [HistoricalEstimate]

  """
  Forecast valuation from multiple AVM vendors. 
  When "source" parameter is omitted, return forecast valuation from all vendors. 
  When "max_date" parameter is omitted, return forecast valuation for 12 months from current valuation. 
  Supported values for "source" parameter: 
  + corelogic 
  + collateral 
  + quantarium 
  When "status" parameter is omitted, return valuations with any statuses. 
  """
  forecast_values(source: [String], max_date: DateTime, filter: ListingFilter): [ForecastEstimate]
}

type HomeFlags {
  """
  MLS-provided status that indicates if Home is coming soon (not yet active)
  """
  is_coming_soon: Boolean
  is_contingent: Boolean

  """
  An indicator that Home has a garage but number of spaces is unknown/not provided
  """
  is_garage_present: Boolean

  """Indicates if this Home is a new construction"""
  is_new_construction: Boolean
  is_pending: Boolean
  is_short_sale: Boolean
  is_foreclosure: Boolean
  is_senior_community: Boolean

  """Indicates if this Home is (active) or used to be (off market) for rent"""
  is_for_rent: Boolean

  """Indicates if a deal on a New Home subdivision/plan is available"""
  is_deal_available: Boolean

  """Indicates if listed price includes land for New Home plans/specs"""
  is_price_excludes_land: Boolean

  """Indicates if there are promotions for this Home"""
  is_promotion_present: Boolean

  """Indicates if this represents a New Home subdivision (community)"""
  is_subdivision: Boolean

  """Indicates if this represents a New Home plan"""
  is_plan: Boolean

  """Indicates if Home has price reduction in the last n days"""
  is_price_reduced(
    """
    Number of days to use when calculating price reduction. Optional, defaults
    to 30 days if not provided or outside of 0-366 range
    """
    days: Int = 30
  ): Boolean

  """Indicates if Home has been listed in the last n days"""
  is_new_listing(
    """
    Number of days to use when determing if this is a new listing. Optional,
    defaults to 14 days if not provided or outside of 0-366 range
    """
    days: Int = 14
  ): Boolean

  """direct builder property"""
  is_sales_builder: Boolean

  """Whether this home is eligibile for USDA loans"""
  is_usda_eligible: Boolean
}

type HomeHOA {
  """monthly fee"""
  fee: Float

  """
  indicates if at least one other listing (including historical listings) on the property had a confirmed hoa fee
  """
  historic_fee: Boolean
}

type HomeImages {
  total: Int
  count: Int
  items: [HomePhoto]
}

type HomeListing {
  """The current price of the Home"""
  list_price: Float
  last_status_change_date: DateTime
  last_update_date: DateTime

  """
  Listing status:
  + for_sale
  + for_rent
  + sold
  + off_market
  + other
  + active (New Home Subdivisions)
  """
  status: String

  """The time this Home entered Move system"""
  list_date: DateTime
  listing_id: ID
  photos(
    """limit the number of photos returned -- optional"""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): [HomePhoto]
  photo_count: Int
  description: HomeDescription

  """Information about the source of the data"""
  source: MlsSource

  """A list of applicable suppression rules"""
  suppression_flags: JSON

  """Categorized listing attributes for display on LDP"""
  details: [HomeDetails]

  """Search tags used for advanced feature search"""
  tags: [String]

  """
  Parties advertising the Home for sale/rent. It could be an agent/office (for
  sale listings) or community/management/corporation (for rental properties).
  The source of data is coming from Relator.com Profile system and it might be
  different from source.agent information that is coming from MLS.
  """
  advertisers: [HomeAdvertiser]

  """List of advertisers representing a buyer"""
  buyers: [HomeAdvertiser]
}

type HomeLocation {
  """
  A display address for this Home. Created by overlaying agent entered address
  parts on top of standardized address (location->property_address). Only used
  when a listing is active.
  """
  address: HomeAddress

  """List of neihgborhoods for this Home"""
  neighborhoods: [Neighborhood]
  search_areas: [SearchArea]
  city: City
  county: HomeCounty
  postal_code: PostalCode
  state: State

  """A borough this Home falls into (applies to New York area only)"""
  borough: Borough

  """A cross street location"""
  cross_street: String

  """driving directions to New Home sales office"""
  driving_directions: String

  """A standardized property address"""
  property_address: HomeAddress

  """parcel data for this Home from parcel api """
  parcel: HomeParcel

  """
  Google street view url link - used by clients if there are no images of a property available 
  """
  street_view_url(input: StreetViewUrlInput): String

  """
  Google street view metadata url link - used by clients for getting metadata from google to initialize dynamic street view 
  """
  street_view_metadata_url(input: StreetViewUrlInput): String
}

type HomeMatterport {
  source_id: String
  url: String
}

type HomeMonthlyFee {
  description: String
  display_amount: String
}

type HomeOneTimeFee {
  description: String
  display_amount: String
}

"""Represents an open house event"""
type HomeOpenHouse {
  """Open house start date/time"""
  start_date(
    """Specify a timezone to change how the start_date is returned/formatted"""
    timezone: TimeZoneType
  ): DateTime

  """Open house end date/time"""
  end_date(
    """Specify a timezone to change how the start_date is returned/formatted"""
    timezone: TimeZoneType
  ): DateTime

  """Open house remarks/description"""
  description: String

  """Time zone name (PST, EST, etc.)"""
  time_zone: String

  """Flags indicating if time zone observing Daylight Saving Time"""
  dst: Boolean

  """Reference to an external resource hosting the open house"""
  href: String

  """
  Ways the open house is available. Possible values:
  + in_person
  + virtual
  """
  methods: [String]
}

type HomeOtherListing {
  listing_id: ID
  status: String
  listing_key: String
  sold_date: DateTime

  """Indicate if a listing is a primary one (default)"""
  primary: Boolean

  """
  Flag used to mark listings that may not be the primary listing for a property
  but have unique characteristics such that users may be interested in them
  """
  unique: Boolean

  """
  Additional information about listing. Resolved from Homes API /listings endpoint
  """
  listing(
    """
    filter for controlling the subset of listings returned. Preferred over @include_if directive
    """
    filter: ListingFilter
  ): HomeListing
}

type HomeOtherListings {
  rdc: [HomeOtherListing]
  prosoft: [HomeOtherListing] @deprecated(reason: "Prosoft listings have been depreacted and are no longer supported")
}

"""Represents parcel data for this Home """
type HomeParcel {
  """Parcel boundary polygon in GeoJSON format """
  boundary: GeoJSON

  """Parcel geometric center in GeoJSON format """
  centroid: Coordinate

  """Unique parcel identifier """
  parcel_id: ID
}

type HomeParkingDetails {
  description: String
  assigned_space_rent: String
  assigned_spaces_available: Boolean
  unassigned_space_rent: String
}

type HomePetPolicy {
  cats: Boolean
  dogs: Boolean
  dogs_small: Boolean
  dogs_large: Boolean
  text: String
}

type HomePhoto {
  description: String
  href: String
  info: HomePhotoInfo
  tags(
    """
    Specifies which set of image tags to retrieve (defaults to version 1 of image tags if not provided).
    """
    version: TagVersion
  ): [Tag]
  type(
    """
    filter for controlling the subset of listings returned. Preferred over @include_if directive
    """
    filter: ListingFilter
  ): String
  title: String
}

"""
The info object returned from the rdcpix-library containing the components of the parsed URL.
"""
type HomePhotoInfo {
  host_name: String!
  check_sum: String
  entity_key: String
  hash_key: String
  source_type: String!
  sequence: String
  filetype: String!
  format: String!
}

type HomePopularity {
  """Popularity metrics related to the periods of last n days """
  periods: [HomePopularityPeriod]
}

type HomePopularityPeriod {
  """Length of the period in days """
  last_n_days: Int!

  """Total number of clicks received """
  clicks_total: Int

  """
  Number of clicks received when the listing was ranked in the first few positions of the search 
  """
  clicks_top_ranks: Int

  """
  Number of clicks received when the listing was ranked in the middle positions of the search 
  """
  clicks_middle_ranks: Int

  """
  Number of clicks received when the listing was not ranked in the top or middle positions of the search 
  """
  clicks_bottom_ranks: Int

  """Total number of views """
  views_total: Int

  """
  Number of views with the listing ranked in the first few positions of the search 
  """
  views_top_ranks: Int

  """
  Number of views with the listing ranked in the middle positions of the search 
  """
  views_middle_ranks: Int

  """
  Number of views with the listing not ranked in the top or middle positions of the search 
  """
  views_bottom_ranks: Int

  """
  Mean time in milliseconds that shoppers spent on the listing page after clicking a listing
  """
  dwell_time_mean: Int

  """
  Median time in milliseconds that shoppers spent on the listing page after clicking a listing
  """
  dwell_time_median: Int

  """Number of leads generated by the listing over the period """
  leads_total: Int

  """Number of times the listing was saved over the period """
  saves_total: Int

  """Number of times the listing was shared over the period """
  shares_total: Int
}

"""List of available promotions for New Home data"""
type HomePromotions {
  """Promotion short headline/title"""
  headline: String

  """Promotion detailed description"""
  description: String

  """Link to promotion on providers web site"""
  href: String
}

type HomePropertyHistory {
  date: DateTime
  event_name: String
  price: Float

  """
  Indicates amount of price change. Positive number indicates price increase, negative - reduction. 
  """
  price_change: Float

  """MLS name """
  source_name: String

  """MLS provided listing id """
  source_listing_id: String

  """Price per square feet """
  price_sqft: Float

  """
  Price range for sold event when Home is in no sold price disclosure state 
  """
  price_range_min: Float

  """
  Price range for sold event when Home is in no sold price disclosure state 
  """
  price_range_max: Float

  """Mortgage amount """
  mortgage_amount: Float

  """
  Arm's length flag indicating whether this event is a public record arm's length transaction (sale transaction) 
  """
  arms_length: Boolean

  """Listing status (standardized) """
  status: String

  """Raw listing status (as sent by MLS) """
  raw_status: String

  """
  List of sellers for this transaction. Available for "Sold" events from public records only. 
  """
  sellers: [PropertyHistorySeller]

  """
  List of buyers for this transaction. Available for "Sold" events from public records only. 
  """
  buyers: [PropertyHistoryBuyer]

  """Mortages assocciated when a sale occured """
  mortgages: [PropertyHistoryMortgage]

  """Transfer information """
  recorded: PropertyHistoryRecorded

  """Indicator showing the transaction is a foreclosure"""
  is_foreclosure: Boolean

  """
  Describes the number of days between a Listed event and a Sold or Listing Removed event
  """
  days_after_listed: String

  """
  Describes change in price between last time Sold or last time Listed for For Sale properties
  """
  price_change_percentage: String

  """
  Additional information about listing. Resolved from Homes API /listings endpoint
  """
  listing(
    """
    filter for controlling the subset of listings returned. Preferred over @include_if directive
    """
    filter: ListingFilter
  ): HomeListing
}

type HomeProviderUrl {
  href: String
  level: String
  type: String
}

input HomeSearchCountsCriteria {
  """
  Query based on HomeSearchCriteria, which involves particulars of a given home,
  number of beds, neighbourhood location, etc.
  """
  query: HomeSearchCriteria!

  """
  unique ID for query -- Used to identify the query and its count in the response 
  """
  uuid: String!

  """monthly payment parameters"""
  mortgage_params: MortgageParamsInput
}

type HomeSearchCountsResult {
  """number of queries that returned results"""
  total: Int

  """JSON containing uuid of queries from input and their count"""
  counts: JSON
}

input HomeSearchCriteria {
  """Search by number of bedrooms in home."""
  beds: IntRange

  """Search by number of bathrooms in home."""
  baths: FloatRange

  """Search whether the home is a primary listing or not."""
  primary: Boolean

  """
  Flag used to mark listings that may not be the primary listing for a property
  but have unique characteristics such that users may be interested in them
  """
  unique: Boolean

  """Search by city home is located in."""
  city: String

  """Search by address of the home."""
  address: String

  """Search by multiple or single county names."""
  county: [String]

  """Exclude one or multiple listing ID's from search."""
  exclude_listing_ids: [ID]

  """Exclude one or multiple Property ID's from search."""
  exclude_property_ids: [ID]

  """Exclude homes with specified set of mls abbreviation."""
  exclude_source_ids: [String]

  """Search by fulfillment ID."""
  fulfillment_id: [ID]

  """Search by number of garages in home."""
  garage: IntRange

  """Search by date home was listed."""
  list_date: DateStringRange

  """Search by MLS provided listing contract date"""
  contract_date: DateStringRange

  """
  Search by unique identifier of a listing selected to present this Home.
  """
  listing_id: ID

  """Search by multiple unique listing identifiers."""
  listing_ids: [ID]

  """Search by unique identifier of a listing."""
  listing_key: String

  """Search by square footage of home lot."""
  lot_sqft: FloatRange

  """Search by fulfillment ID where agent is the seller."""
  seller_fulfillment_id: [ID]

  """Search by MLS abbreviation(s) example: ‘PHPA'"""
  source_id: [String]

  """Search by source type of property."""
  source_type: [String]

  """MLS provided listing id -- formerly mls.id"""
  source_listing_id: ID

  """MLS provided listing id partial"""
  source_listing_id_partial: ID

  """MLS provided source management id"""
  source_management_id: ID

  """Unique Home identifier also known as property id"""
  property_id: [ID]

  """MLS standardized listing status"""
  mls_status: [String]

  """
  Filters homes where last status change (home.last_status_change_date) falls within specified range.
  """
  last_status_change_date: DateStringRange

  """
  Search for homes where pending_date is known and falls within specified range.
  """
  pending_date: DateStringRange

  """Search by neighborhood where home is located."""
  neighborhood: String

  """Search by open-house dates."""
  open_house: DateStringRange

  """Search by floor plan identifier as provided by the source system."""
  plan_id: [ID]

  """Search by postal code."""
  postal_code: String

  """Search by list of postal codes."""
  postal_codes: [String]

  """Search by list of postal code prefixes."""
  postal_code_prefixes: [String]

  """Search by range of listing prices."""
  list_price: FloatRange

  """
  Search by range of monthly payments which includes mortage, tax, home insurance and hoa_fee.
  """
  monthly_payment: FloatRange

  """Filter communities listed directly by the builder"""
  sales_builder: Boolean

  """Search by dates sold."""
  sold_date: DateStringRange

  """Search by prices sold."""
  sold_price: IntRange

  """Suppressed sold_date search for FIND user only"""
  sold_date_unsuppressed: DateStringRange

  """Suppressed sold_price search for FIND user only"""
  sold_price_unsuppressed: IntRange

  """Search by date of price reduction."""
  price_reduced_date: DateStringRange

  """Search by move in date."""
  move_in_date: DateStringRange

  """Search by one or multiple school discrict ID's"""
  school_district_id: [ID]

  """Search by school district name."""
  school_district_name: String

  """Search by one or multiple school ID's."""
  school_id: [ID]

  """Search by school name."""
  school_name: String

  """
  School filter wiki: https://wiki.move.com/display/ps/School+Filters.
  Search elementary schools within specified rating range.
  """
  elementary_school_rating: IntRange

  """Search middle schools within specified rating range."""
  middle_school_rating: IntRange

  """Search high schools within specified rating range."""
  high_school_rating: IntRange

  """Search by range of home square footage."""
  sqft: FloatRange

  """Search by state code."""
  state_code: String

  """Search by home status for_rent/for_sale/etc"""
  status: [HomeStatus]

  """Search by street name."""
  street_name: String

  """Search by street suffix."""
  street_suffix: String

  """Search by one or multiple home types."""
  type: [String]

  """Search by one or multiple home tags."""
  tags: [String]

  """
  Exclude home with specified set of tags. (specifying same tag for both tags and exclude_tags field will return 0 results).
  """
  exclude_tags: [String]

  """Keywords search - eg. pool, garage etc."""
  keywords: [String]

  """Search for pending homes."""
  pending: Boolean

  """Search for foreclosure homes."""
  foreclosure: Boolean

  """Search for contingent homes."""
  contingent: Boolean

  """Search by one or multiple sub types."""
  sub_type: [String]

  """Search for short sale homes."""
  short_sale: Boolean

  """Search for homes with photos."""
  has_photos: Boolean

  """Search for homes by year built."""
  year_built: IntRangeNullableInput

  """Search for one or multiple locations."""
  locations: [SearchAPILocations]

  """Search for one or multiple neighborhoods."""
  neighborhoods: [SearchAPINeighborhoods]

  """Search for new construction homes."""
  new_construction: Boolean

  """Search for homes by agent source ID."""
  agent_source_id: String

  """Search for homes by agent source name."""
  agent_source_name: String

  """Search for homes by office source ID."""
  office_source_id: String

  """Search for homes by office source name."""
  office_source_name: String

  """Search by office type."""
  office_type: String

  """Search by area with given coordinates."""
  nearby: SearchAPINearby

  """Search by JSON representation of a geo object."""
  boundary: GeoJSON

  """Search for homes which allow cats."""
  cats: Boolean

  """Search for homes which allow dogs."""
  dogs: Boolean

  """Search for homes with allow small dogs."""
  dogs_small: Boolean

  """Search for homes which allow large dogs."""
  dogs_large: Boolean

  """Search for homes with a no-pet policy."""
  no_pet_policy: Boolean

  """Search for homes which allow pets."""
  no_pets_allowed: Boolean

  """Search for homes which have matterport media."""
  matterport: Boolean

  """Search for homes that have virtual_tours."""
  has_virtual_tour: Boolean

  """Search for homes that have videos."""
  has_video: Boolean

  """Search for homes that either have 3-D tour or virtual_tours."""
  has_tour: Boolean

  """Search for homes A community ID as exposed by DataManager."""
  community_id: ID

  """Search for homes by one or multiple home types."""
  home_type: [HomeType]

  """
  Search for homes where HOA fee is known and falls within specified range.
  """
  hoa_fee: IntRange

  """
  Search for homes where HOA fee is known and falls within specified range, or HOA fee is unknown.
  """
  hoa_fee_optional: IntRange

  """Search for homes where there's no confirmed HOA fee."""
  no_hoa_fee: Boolean

  """
  Search flag to check if at least one other listing (including historical
  listings) on the property had a confirmed hoa fee.
  """
  hoa_historic_fee: Boolean

  """Search for homes by the first letter of their street name."""
  street_first_letter: String

  """
  Search by array of MLS sets of agents or offices with type seller.
  ex: ["A-JAFL-46182", "O-JAFL-F18795"]
  """
  selling_parties: [String]

  """
  Search by array of MLS sets of agents or offices with type buyer.
  ex: ["A-JAFL-63157", "O-JAFL-F19118"]
  """
  buying_parties: [String]

  """
  Search by seller's name(s). Gives priority to dashboard (advertiser) agent name.
  """
  selling_agent_name: String

  """
  Search for homes where a certain value exists, currently only listing_id is supported.
  """
  exists: [String]

  """
  Search nearby home with free location string, buffer in miles (optional) and boundary (optional).
  Overides boundary provided in search query.
  """
  search_location: SearchLocation

  """
  Search home with commute filter given a coordinate, time of day and interval.
  Overrides boundary provided in search query
  When used with Search Location filter, search expansion boundary will be overridden by commute boundary.
  """
  commute: CommuteFilter

  """Search by units.availability.date for rentals."""
  availability_date: DateStringRange

  """Search homes with available promotions."""
  promotion_present: Boolean

  """Search homes within specified crime rating range."""
  crime_rating: IntRange

  """Search by exterior style tags."""
  exterior_styles: [String]

  """The number of active listings for community"""
  active_listing_count: IntRange

  """Number of leads for community this month"""
  leads_month_to_date: IntRange

  """Price per lead for this community."""
  community_price_per_lead: FloatRange

  """Search for homes with Rent To Own option."""
  has_rent_to_own: Boolean

  """Search for homes with specials"""
  has_specials: Boolean

  """Search range for rentals_go_direct.sponsored_ad_tier."""
  sponsored_ad_tier: IntRange

  """recursively allow OR operation on provided filters"""
  or_filters: HomeSearchCriteria

  """Search by assumable loan eligibility"""
  assumable_loan_eligibility: Boolean

  """Management office for a listing."""
  advertiser_management_office: String

  """
  Text-to-image embeddings search filter (e.g. 2+ beds with swimming pool and basement)
  """
  free_text: FreeTextInput

  """
  Filter listing based on their priority score (monetized listings have a value >= 1)
  """
  priority_score: IntRange
}

"""JSON representation of a HomeSearchCriteria object"""
scalar HomeSearchCriteriaJSON

type HomeSearchExpandedCountsResult {
  """number of queries that returned results"""
  total: Int

  """JSON containing uuid of queries from input and their count"""
  counts: ExpandedCounts
}

type HomeSpecials {
  description: String
  title: String
  disclaimer: String
  start_date: DateTime
  end_date: DateTime
}

"""
A supported status of a home used as a input parameter when querying for data
"""
enum HomeStatus {
  for_rent
  for_sale
  new_community
  off_market
  other
  ready_to_build
  sold
}

"""
Listing-level style categories with separate components of a listing ('exterior', 'interior', 'living_room') 
"""
type HomeStyleCategories {
  exterior: [HomeStyleCategory]
  kitchen: [HomeStyleCategory]
  living_room: [HomeStyleCategory]
}

type HomeStyleCategory {
  """
  Supported types: ['all_styles', 'colonial', 'contemporary', 'craftsman' ,
  'dutch_colonial', 'french_provincial', 'greek_revival', 'italianate',
  'monterey', 'other', 'ranch', 'spanish', 'tudor', 'victorian'] 
  """
  style_type: String

  """Probability of each style_type """
  probability: Float

  """Returns true if the respective style_type is a label """
  passes_threshold: Boolean
}

"""
Listing-level style vector with separate components of a listing ('exterior', 'interior', 'living_room') 
"""
type HomeStyleVector {
  exterior: [Float]
  kitchen: [Float]
  living_room: [Float]
}

type HomeTerms {
  category: String
  text: [String]
}

type HomeTours {
  virtual_tours: [HomeVirtualTour]
}

enum HomeType {
  """Regular home."""
  home

  """A home that has not yet been constructed."""
  plan

  """A home built and sourced from BDX."""
  spec_home
}

type HomeVirtualTour {
  """Tour category (ex: 3d, virtual_tour, etc... ) """
  category: String
  href: String

  """Label used to identify tours (ex: 1BD - 1BA, Club room, Pool, etc...) """
  label: String

  """Tour type (ex: matterport, website, etc...) """
  type: String

  """List of tags (ex: [interior, exterior]) """
  tags: [String]
}

"""Housing market statistics from Market Trends API. """
type HousingMarket {
  """the median list price for listings in the geo """
  median_listing_price: Float

  """the median lot size for properties in the geo  """
  median_lot_size: Float

  """the median rent price for rentals in the geo """
  median_rent_price: Float

  """the median sold price for listings in the geo """
  median_sold_price: Float

  """the median price per sqare foot for listings the geo """
  median_price_per_sqft: Float

  """the median days on market for listings in the geo """
  median_days_on_market: Float

  """the number of listings in the geo """
  listing_count: Int

  """the number of rental listings in the geo """
  rental_listing_count: Int

  """data about the year to year market in the geo """
  year_to_year: HousingMarketYearToYear

  """data about the month to month market in the geo """
  month_to_month: HousingMarketMonthToMonth

  """data about the type of market for the geo """
  market_condition: MarketCondition

  """a measure of the market temperature within a county """
  local_hotness_score: Float

  """a measure of the market temperature within the country """
  national_hotness_score: Float

  """
  a classification of the market temperature within a county (Very Hot 80+; Hot 60<80) 
  """
  local_temperature: String

  """
  a classification of the market temperature within the country (Very Hot 80+; Hot 60<80) 
  """
  national_temperature: String

  """
  hot market badge classification. For example a geo with badge value of "hot" will mark as having a "hot" market. 
  """
  hot_market_badge: String

  """hot market ranking """
  hot_market_rank: Int

  """
  the ratio of the median days on market of active properties in the geo vs the
  median days on market for a typical property in the county 
  """
  ratio_of_days_on_market_vs_typical_property_in_county: Float

  """
  the ratio of the number of ldp views in the geo vs the ldp views for a typical property in the county 
  """
  ratio_of_ldp_views_vs_typical_property_in_county: Float

  """
  the ratio of the median days on market of active properties in the geo vs the
  median days on market for a typical property in the US 
  """
  ratio_of_days_on_market_vs_typical_property_in_us: Float

  """
  the ratio of the number of ldp views in the geo vs the ldp views for a typical property in the USA 
  """
  ratio_of_ldp_views_vs_typical_property_in_us: Float

  """
  Median statistics by property type (single_family, multi_family, condos,
  townhomes, condo_townhome_rowhome_coop, apartment, townhomes, duplex_triplex,
  coop, home, land) 
  """
  by_prop_type(type: [String]): [HousingMarketPropertyType]

  """The year this housing market statistics is calculated for."""
  year: Int

  """The month this housing market statistics is calculated for."""
  month: Int

  """
  List of market trend values, providing median values for properties in a geo. Aggregated on a monthly basis 
  """
  historical_trends: [HousingMarket]
}

"""
Housing market percentage change during the past month from Market Trends API. 
"""
type HousingMarketMonthToMonth {
  """the change in the listing count year to year """
  active_listing_count_percent_change: Percent

  """the change in the days on market year to year """
  median_days_on_market_percent_change: Percent

  """the change in the listing price year to year """
  median_listing_price_percent_change: Percent

  """the change in the listing price year to year """
  median_listing_price_sqft_percent_change: Percent

  """the monthly change in the rental listing count """
  active_rental_listing_count_percent_change: Percent

  """the monthly change in the rental listing price. """
  median_rental_listing_price_percent_change: Percent
}

"""
Housing market statistics from Market Trends API grouped by property type. 
"""
type HousingMarketPropertyType {
  """
  type of property (single_family, condo_townhome_rowhome_coop, apartment ...) 
  """
  type: String

  """attributes for property type """
  attributes: GroupTypeAttributes
}

"""
Housing market percentage change during the past 12 months from Market Trends API. 
"""
type HousingMarketYearToYear {
  """the change in the listing count year to year """
  active_listing_count_percent_change: Percent

  """the change in the days on market year to year """
  median_days_on_market_percent_change: Percent

  """the change in the listing price year to year """
  median_listing_price_percent_change: Percent

  """the change in the listing price year to year """
  median_listing_price_sqft_percent_change: Percent

  """the yearly change in the rental listing count """
  active_rental_listing_count_percent_change: Percent

  """the yearly change in the rental listing price. """
  median_rental_listing_price_percent_change: Percent
}

type Href {
  href: String
}

"""Categories of image type (based on tags with probability > 50%)"""
enum ImageType {
  """
  Image representing an exterior view of a home (based on following image tags: exterior)
  """
  exterior

  """
  Image representing an interior view of a home (based on following image tags:
  bathroom, bedroom, dining_room, kitchen, living_room)
  """
  interior
}

input InitiatePasswordRequestInput {
  """users' emails address"""
  email: String!

  """
  Context Origin from where the request is generated
  Defines the context on consumer journey from where the user has initiated the update password flow
  Eg. value swap_save_home_registration swap_save_search_registration swap_save_home_send_link 
  swap_save_search_send_link pcx-lead marketing_registration_campaign account_settings_reset 
  Default it to account_settings_reset in case not sure 
  """
  password_context: String!

  """User to understand the type of request like reset or add password"""
  request_type: PasswordRequestType!

  """redict url after successful add/reset password"""
  redirect_url: String

  """Description of add/reset password model popup"""
  header_description: String

  """Title of add/reset password model popup"""
  header_title: String
}

enum InsightsMergeStrategy {
  """
  Simply merge objects. 
  In case of array, arrays are merged with unique/non-null values. 
  In case of objects, are combined to form one. 
  """
  merge

  """Use and return the insights loaded from insights-framework. """
  use_insights

  """
  Use and return the insights loaded from insights-framework. If insights 
  could not be found or not loaded, use the value of the existing node if available. 
  """
  use_insights_with_fallback
}

"""Input parameters used by insights directive """
input InsightsPluginInput {
  """
  Specifies the "." separated field path in the insights response(value attribute). This param is optional. 
  If no value or if the value is empty/null, value attribute of the insights response is used. 
  Pls refer to the insights-framework data contract: https://wiki.move.com/display/ps/Insights+Data+Contract 
  """
  data_path: String

  """Specifies the plugin name for which to retrieve insights """
  plugin_name: String!

  """Specifies the plugin type for which to retrieve insights """
  plugin_type: InsightsPluginType!
}

"""List of available Insights plugin types """
enum InsightsPluginType {
  """Indicates a listing level plugin """
  listing

  """Indicates a property level plugin """
  property
}

type InsuranceQuote {
  """Provider Name """
  provider_name: String

  """Provider url """
  provider_url: String

  """Provider logo """
  provider_logo: String

  """Expires date """
  expires: DateTime

  """Price """
  price: Float

  """Min Price """
  min_price: Float

  """Max Price """
  max_price: Float

  """Home coverage """
  home_coverage: Float

  """Content coverage """
  contents_coverage: Float

  """Disclaimer """
  disclaimer: [String]

  """
  Classification of insurance based on property type. Example - HO3  = Single family, HO4 = Renters, HO6 = Condos/Townhomes
  """
  classification: String

  """Number of Providers """
  providers: Int
}

"""
Buckets used for integer range aggregation.
"to" must be greater than "from"
"""
input IntAggRange {
  """Bucket from."""
  from: Int

  """Bucket to."""
  to: Int
}

input IntRange {
  """Start of range."""
  min: Int

  """End of range."""
  max: Int
}

"""
Int Range input type with nullable values flag.
include_null_values can be used to decide if we want to populate results with homes that has null value for the field.
"""
input IntRangeNullableInput {
  """Start of range."""
  min: Int

  """End of range."""
  max: Int

  """Flag to include null values"""
  include_null_values: Boolean
}

"""A range of integer values """
type IntRangeType {
  """min """
  min: Int

  """max """
  max: Int
}

"""
invitation delivery mechanism. Currently invitation to connect can be delivered only through email 
"""
enum InvitationMethodType {
  email
}

"""
Generic JavaScript object, please refer to <a
href=https://wiki.move.com/x/CJh1Hw>Schema of JSON fields</a> for detailed schema
"""
scalar JSON

"""result of keyword search """
type Keyword {
  """the ranking of the keyword in the top most used list of keywords. """
  usage_rank: Int

  """user-friendly keyword name """
  keyword_name: String

  """search tags the keyword maps to """
  tags: [String]
}

"""
Search relevant keywords by arbitrary text 
NOTE: when no criteria is provided then most used keywords are returned in the order of their use frequency 
"""
input KeywordsSearchCriteria {
  """Search keywords by input text """
  keyword_text: String
}

"""sort fields used by keyword search """
enum KeywordsSearchField {
  """user-friendly name of the keyword """
  keyword_name
}

"""result returned by keyword search """
type KeywordsSearchResult {
  """count of returned records """
  count: Int

  """count of records found """
  total: Int

  """results """
  results: [Keyword]
}

"""sort criteria for keyword search """
input KeywordsSearchSort {
  """sort field """
  field: KeywordsSearchField

  """sort direction """
  direction: SortDirection
}

type LatestEstimate {
  """Source of the latest estimate value """
  source: EstimateSource

  """Estimated value of a property """
  estimate: Int

  """Estimated high value of a property """
  estimate_high: Int

  """Estimated low value of a property """
  estimate_low: Int

  """Date of estimation """
  date: DateTime

  """Best value  for a home from multiple AVM vendors"""
  isbest_homevalue: Boolean
}

"""News and Insights Playlist details from MVS API """
type LatestVidoraArticles {
  """The unique id of the Article in UUID """
  id: ID!

  """The title of the Article in plain text """
  title: String

  """The Article Published Date and Time"""
  pub_date: String

  """The Article URL for IOS device"""
  ios_link: String

  """Image URL for the Article Thumbnail"""
  image: String

  """The article's author's name"""
  author_name: String
}

"""Input passed to the query to get vidora latest articles by categories """
input LatestVidoraArticlesInput {
  """
  The categories of the articles. example: "buy|finance|trends|real estate news"
  """
  categories: String

  """The maximum number of article items to return """
  limit: Int
}

"""lead form resource details address fields """
input LeadAddressData {
  """city """
  city: String

  """postal code """
  postal_code: String

  """state code """
  state_code: String
}

"""
RDC lead attributes information. It's generating lead form attributes in LDP and contact agent button in SRP. 
"""
type LeadAttributes {
  """Lead Attributes related to integration with OpCity """
  opcity_lead_attributes: OpCityLeadAttributes

  """Lead Attributes related to Ready Connect Mortgage """
  ready_connect_mortgage: ReadyConnectMortgage

  """contact agent button flag for SRP """
  show_contact_an_agent: Boolean

  """Based on the product purchased by the broker """
  lead_type: String

  """Flag to indicate if we need to show lead form """
  show_lead_form: Boolean

  """
  Disclaimer text shown in the lead form (may be different for different brokers) 
  """
  disclaimer_text: String

  """Flag to indicate if we have to display TCPA message """
  is_tcpa_message_enabled: Boolean

  """a flag to indicate if we need to give an option for text leads """
  show_text_leads: Boolean

  """a flag to indicate if premium LDP"""
  is_premium_ldp: Boolean

  """a flag to indicate if schedule a tour is enabled"""
  is_schedule_a_tour: Boolean

  """Shows the market type of the property it can be pure, choice or unity"""
  market_type: String

  """Shows the elegibility of the property for veterans united"""
  is_veterans_united_eligible: Boolean
}

"""Provide broker information such as from text lead """
input LeadBroker {
  """advertiser id """
  advertiser_id: ID

  """local expert id """
  lex_id: ID

  """paid type """
  type: String
}

"""this is the LCS response """
type LeadCaptureResponse {
  """lead id """
  id: ID!
}

"""RDC lead customer information provided by front-end"""
input LeadCustomer {
  """RDC lead customer information provided by front-end"""
  advertiser_id: ID!

  """RDC lead customer information provided by front-end"""
  advertiser_name: String!

  """RDC lead customer information provided by front-end"""
  selection_type: String!

  """product information of the customer"""
  product_id: String

  """url of the offer provided by the customer on the marketplace"""
  offer_url: String
}

"""user data from lead form """
input LeadData {
  """lead email """
  email: String

  """last name in lead """
  last_name: String

  """first name in lead """
  first_name: String

  """phone in lead """
  phone: String

  """selected tour date time """
  tour_datetime: LeadTourDateTime

  """move_in_date in lead """
  move_in_date: String

  """message in lead """
  message: LeadMessage

  """
  veterans United customer flag and will be passed on to Veterans United as the customer if it's true 
  """
  is_military_agent: Boolean

  """lender data """
  lender_data: LenderData

  """call data """
  call_data: CallData

  """tour type """
  tour_type: String

  """when does the user want to buy """
  timeframe: String

  """sell by date value and enumerated value from picklist """
  sell_by_date: SellByDate

  """rental LDP can be for different floor plans related to the listing """
  floor_plan_name: String

  """Marketplace information"""
  marketplace: MarketplaceData

  """
  User Intent - whether a user intends to buy, sell, rent or a combination of them
  """
  user_intent: String

  """Redirect Url - agent application redirect url"""
  redirect_url: String

  """Application ID - agent application id"""
  application_id: String

  """
  Agent Application Acceptance Status - agent application acceptance status. (e.g. OPTED_IN/UNKNOWN)
  """
  agent_application_acceptance_status: String

  """Application Processor Name - agent processor name. (e.g. rental_beast)"""
  application_processor_name: String

  """Tour Data - Request a tour feature allows user to submit tour dates"""
  tour_data: [RequestedTourData]
}

"""data collected from lead form """
input LeadForm {
  """form name """
  name: String

  """variant name """
  variant: String

  """target name """
  target: String

  """referral target """
  referral: String

  """page name """
  page_name: String

  """ab test values """
  ab_test: [LeadSubmissionABTestValue]
}

"""lead form message """
input LeadMessage {
  """lead message body """
  body: String

  """lead message subject """
  subject: String

  """if lead message has been modified """
  modified: Boolean
}

"""Lead Receiver information"""
input LeadReceiverInput {
  advertiser: AdvertiserInput!
}

"""prop status and ID """
input LeadResource {
  """
  property type, values in "property", "community", "listing", "new_homes_plan",
  "new_homes_community, "new_homes_moveinready" 
  """
  resource_type: String

  """property Id (MPR ID, or new homes property id or community id) """
  resource_id: ID

  """property Status, value in "for_sale", "rental", "not_for_sale" """
  sub_resource_type: String

  """master Listing Id (optional) """
  sub_resource_id: ID

  """mew Homes Spec/Move-In-Ready property type """
  spec_id: ID

  """resource details """
  resource_details: LeadResourceDetails
}

"""lead form resource details """
input LeadResourceDetails {
  """address details """
  address: LeadAddressData
}

"""this is the response expected from lead_submit mutation """
type LeadResponse {
  """lead response object should contain lead_id """
  lead: LeadCaptureResponse

  """
  lead value used for optimization/reporting 
  returns null values if postal_code is empty or null 
  """
  lead_value(postal_code: String): LeadValueResponse

  """up to 3 properties deemed 'similar' to suggest to the user """
  you_might_also_like(input: YMALInput!): SearchHomeResult
}

input LeadSubmissionABTestValue {
  """name of the ab test """
  ab_test_name: String!

  """variation of the ab test """
  variation: String!
}

"""input object for lead submission """
input LeadSubmissionInput {
  """
  lead method, values in "email" (complete lead form), "call" (non-tfn/tpn phone
  number), "text" (lead form with phone but no email 
  and no name fields) 
  """
  method: String

  """
  user object has "visitor_id", "session_id", "member_id" (optional), and "is_logged_in" (optional) 
  """
  user: LeadUser!

  """lead form info with minium name, and page_name values """
  form: LeadForm

  """client's device info that submitted the lead """
  client: ClientInfo!

  """property info """
  resource: LeadResource!

  """
  lead info, method email requires first_name, last_name, email, phone, message info.  method call requires call_node with 
  reciever_phone, time_of_call, advertiser_id of customer 
  """
  lead_data: LeadData!

  """user browsing history, top 5 recent_searches and top by recent_views """
  user_history: JSON

  """
  accepted user browsing history as a serialzed JSON string. Will be sent as user_history to LCS. 
  user_history will be used over user_history_serialized if user_history exists. 
  """
  user_history_serialized: String

  """
  lead type, (ie. "co_broke", "advantage_pro", "rental_basic_mls", "managed_service", "consumer_text", ...) 
  """
  type: String

  """broker node required if customer is specified by Front End """
  broker: LeadBroker

  """list of customers as provided by RDC frontend"""
  customers: [LeadCustomer!]

  """list of FAR customers as provided by RDC frontend"""
  far_customers: [FarCustomer!]

  """lead_receivers as provided by the backend"""
  lead_receivers: [LeadReceiverInput!]

  """
  Consent Data - Lead consent data with TCPA language and consent parties
  """
  consent: ConsentDataInput
}

"""Lead tour date time """
input LeadTourDateTime {
  """date time in UTC format (ie: "2021-03-08T18:38:06.000Z") """
  datetime: DateTime

  """
  enum for the selected date/time option 
  "as_soon_as_possible", "this_weekend", "this_coming_week", "next_week", "next_weekend" 
  """
  enum: String

  """
  value for the selected date/time option 
  "As soon as possible", "This weekend", "This coming week", "Next week", "Next weekend" 
  """
  value: String
}

"""user info """
input LeadUser {
  """visitor id is a UUID """
  visitor_id: ID

  """session id """
  session_id: ID

  """member id of logged in users """
  member_id: ID

  """user's logged in status while submitting the inquiry """
  is_logged_in: Boolean
}

type LeadValueResponse {
  """CFB revenue per lead """
  initial_revenue_lead: Float

  """
  Opcity revenue per lead(higher priority) or CFB revenue per lead. This value
  is expected to be used for optimization/reporting. 
  """
  revenue_lead: Float
}

"""lender info """
input LenderData {
  """can you contact lender """
  contact_is_ok: Boolean

  """is lender military """
  military: Boolean

  """lender's credit range """
  credit_range: CreditRange

  """lead validation id """
  lead_validation_id: String

  """
  Indicates if the lead should be sent to the new LCE service via LCS during migration testing
  """
  lce_migration: Boolean
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

"""
List of Linking Module types Available. For now there is only nearby homes but we will extend in future 
"""
enum LinkedHomesModuleType {
  """When nearby_homes is selected, then linked nearby homes are returned """
  nearby_homes
}

"""Input to the query """
input linkedHomesQuery {
  """Unique Home identifier also known as property id """
  property_id: ID!

  """
  preferred linked homes modules type, valid value for now - nearby_homes  
  """
  type: LinkedHomesModuleType!
}

type LinkingModuleType {
  title: String
  url: String
}

"""List_date date range aggregation"""
input ListDateDateRangeAgg {
  """Accepts array of string ISO date ranges."""
  ranges: [DateAggRange]
}

type Listing {
  listing_id: ID
  listing_key: ID
  address: Address
  agents: [Agent]
  basic: Basic
  description: String
  details: Details
  flags: [String]
  offices: [Office]

  """Information about the source of the data """
  source: MlsSource
  other_listings: [String]
  provider_urls: [ProviderUrl]
  suppression_flags: [String]
  media: Media
  tags: [String]

  """product information from the Products API """
  products: [ProductSummary]
}

input ListingFilter {
  status: [String]
}

type ListingStyle {
  """Sample style type """
  style_type: String

  """Link to the static image of respective style_type """
  uri: String

  """How style_type is displayed for filtering """
  label: String
}

"""
Listing-level style categories with separate components of a listing ('exterior', 'interior', 'living_room') 
"""
type ListingStyleCategories {
  exterior: [ListingStyle!]!
  kitchen: [ListingStyle!]!
  living_room: [ListingStyle!]!
}

"""List_price histogram aggregation."""
input ListPriceHistogramAgg {
  """
  Accepts interval size of int in range [500, 3000] for for_rent status
  Accepts interval size of int in range [1000, 500000] otherwise
  """
  interval: Int
}

"""List_price range aggregation"""
input ListPriceRangeAgg {
  """Accepts array of int ranges."""
  ranges: [IntAggRange]
}

"""loan_amount query response"""
type LoanAmount {
  """the calculated loan for the given montly_payment parameter"""
  loan_amount: Int

  """
  will always be "30-Year Fixed" as this api doesn't accept multiple loan types
  """
  loan_type: String

  """interest rate percent in decimal used to determine home price"""
  loan_rate: Float
}

"""loan analysis response with rates + market data"""
type LoanAnalysis {
  """average home price of request location"""
  target_price: Int

  """down payment"""
  down_payment: Int

  """market data"""
  market: Market

  """location details"""
  location: Location

  """monthly payment details"""
  mortgage(loan_id: ID, rate: RateInput, property_tax_rate: Float, costs: MonthlyCostsInput, options: MortgageFlags): LoanMortgage
}

"""Represents a Loan Broker """
type LoanBroker {
  """Loan Broker id"""
  id: ID!

  """Loan Broker name"""
  name: String!

  """Loan Broker logo url"""
  logo_url: String

  """Loan Broker branch nmls id"""
  branch_nmls_id: String!
}

"""The input to submit the loan choice"""
input LoanBrokerChoiceSubmitInput {
  """The loan broker id to submit"""
  loan_broker_id: ID!

  """The inquiry guid to submit for"""
  inquiry_guid: String!
}

"""The result of submitting Loan Broker Choice"""
type LoanBrokerChoiceSubmitResult {
  """Returns whether the submit was successful or not"""
  success: Boolean!
}

"""loan details"""
input LoanInput {
  """home price"""
  price: Int!

  """down payment"""
  down_payment: Int!

  """loan type ie. thirty_year_fix, thirty_year_fha"""
  loan_type: ID

  """interest rate + term"""
  rate: RateInput!
}

"""loan mortgage response (monthly payment)"""
type LoanMortgage {
  """loan amount"""
  loan_amount: Int

  """mortgage rate"""
  rate: Float

  """loan term"""
  term: Int

  """monthly payment"""
  monthly_payment: Int

  """monthly payment details"""
  monthly_payment_details: [MonthlyOwnershipExpense]

  """sum total of payments over term of loan"""
  total_payment: Int

  """annual/monthly amortization details"""
  amortizations: [Amortization]

  """due at close"""
  due_at_close: Int

  """closing cost"""
  closing_cost: Int

  """closing cost rate (ie. '4%')"""
  closing_cost_rate: String
}

"""type of loan"""
type LoanType {
  """internal identifier for the loan type"""
  loan_id: ID

  """amortization period"""
  term: Int

  """display label"""
  display_name: String

  """mortgage loan guaranteed by US Department of Veterans Affairs"""
  is_va_loan: Boolean

  """whether loan has a fixed rate for the duration of the loan"""
  is_fixed: Boolean
}

"""Gstat local statistics """
type Local {
  """Noise information for the property """
  noise: Noise

  """Flood information for the property """
  flood: Flood

  """Crime information for the property """
  crime: PropertyCrime

  """Wildfire information for the property """
  wildfire: Wildfire

  """Heat information for the property """
  heat: HeatStatistics

  """Wind information for the property """
  wind: WindStatistics

  """Air information for the property """
  air: AirStatistics

  """Location scores for the property """
  location_scores: LocationScores
}

"""location details"""
type Location {
  """zip code"""
  zip: String

  """city"""
  city: String

  """state code"""
  state: String

  """slug_id"""
  slug_id: String
}

"""Enum for property using location"""
enum LocationOptionsInput {
  """Lat/Long coordinate"""
  COORDINATE

  """full property address"""
  FULL_ADDRESS
}

"""Location score fields for a given lat long"""
type LocationScoreCategory {
  """Type of location score """
  label: String

  """Score value between 0 and 5 """
  value: Float

  """Detail regarding score """
  text: String

  """Score icon url"""
  icon_url: String

  """Groups for Location Score"""
  groups: [String]
}

"""Location scores for the property """
type LocationScores {
  """Scores for the given point """
  point_scores: [LocationScoreCategory]

  """Vendor information"""
  vendor: VendorData

  """Group categories for Location Scores"""
  group_categories: [String]
}

"""Amenities categories mapping for location scores"""
type LocationScoresMapping {
  """Location scores category"""
  ls_category: String

  """Amenities category"""
  am_category: [String]
}

"""Lot_sqft histogram aggregation."""
input LotSqftHistogramAgg {
  """
  Accepts interval size of int in range [400, 12000] for for_rent status
  Accepts interval size of int in range [800, 63000] otherwise
  """
  interval: Int
}

"""Lot_sqft range aggregation"""
input LotSqftRangeAgg {
  """Accepts array of int ranges."""
  ranges: [IntAggRange]
}

"""location market data"""
type Market {
  """rates for home insurance, property tax, mortgage rates"""
  mortgage_data: MortgageData

  """average sale price"""
  average_sale_price: Int
}

"""Market condition for a particular geo """
enum MarketCondition {
  """the market is balanced """
  balanced

  """the market is favorable to home buyers """
  buyer

  """the market is favorable to home sellers """
  seller
}

"""Current agent information"""
input MarketplaceAgentInfo {
  """name of the agent"""
  name: String
}

"""information collected by the marketplaces about the property"""
input MarketplaceData {
  """property information"""
  property_info: MarketplacePropertyInfo!

  """property address"""
  address: MarketplacePropertyAddress!

  """home value"""
  est_home_value: MarketplaceEstimatedHomeValue

  """user's estimated mortgage balance"""
  est_mortgage_balance: Int

  """property id"""
  property_id: String!

  """user's current agent information"""
  agent_info: MarketplaceAgentInfo

  """lender data"""
  lender_data: MarketplaceLenderData
}

"""property value information as collected on the marketplace"""
input MarketplaceEstimatedHomeValue {
  """home value provided by the avm model"""
  avm_home_value: Int

  """home value provided by the rdc user"""
  user_home_value: Int
}

"""Lender Data from marketplace"""
input MarketplaceLenderData {
  """Lead Validation ID """
  lead_validation_id: ID
}

"""property address as collected on the marketplace"""
input MarketplacePropertyAddress {
  """property address - line"""
  line: String!

  """property address - city"""
  city: String!

  """property address - state code"""
  state_code: String!

  """property address - postal code"""
  postal_code: String!
}

"""property information as collected on the marketplace"""
input MarketplacePropertyInfo {
  """type of property as provided by the user"""
  property_type: String

  """RDC internal property mpr_id provided by front-end"""
  property_id: String!

  """number of full bathrooms as provided by the user"""
  full_bathrooms: Int

  """number of partial bathrooms as provided by the user"""
  partial_bathrooms: Int

  """size of the lot as provided by the user"""
  lot_size: Float

  """size of the property as provided by the user"""
  sqft: Float

  """number of bedrooms as provided by the user"""
  beds: Int

  """type"""
  type: String

  """condition of the property as rated by the consumer"""
  condition: Int

  """built year of the property"""
  year_built: Int
}

type Markets {
  url: String
  city: String
}

type Matterport {
  property_id: String
  videos: [MatterportVideo]
  loc: String
}

type MatterportVideo {
  id: String
  thumb_href: String
  href: String
}

"""MaxAffordableHomeByMonthlyPaymentResult results item"""
type MaxAffordableHomeByMonthlyPayment {
  """home price in dollars"""
  home_price: Int

  """
  will be a string of either "30-Year Fixed" or "VA 30-Year Fixed" depending on veteran status used in request
  """
  loan_type: String

  """percentage of down payment used to determine home price"""
  down_payment_percent: Float

  """interest rate percent in decimal used to determine home price"""
  loan_rate: Float
}

"""max_affordable_home_by_monthly_payment query response type"""
type MaxAffordableHomeByMonthlyPaymentResult {
  """
  List of home prices returned in the same order as monthly_payments list in max_affordable_home_by_monthly_payment query
  """
  results: [MaxAffordableHomeByMonthlyPayment]
}

type Media {
  photos: [Photo]
  video: [Video]
  virtual_tour: [VirtualTour] @deprecated(reason: "this field is not in use and currently not working")
}

type MergeSavedSearch {
  """
  Unique Saved search count that are moved from source to destination member ID
  """
  merged: Int

  """
  Source Member ID which might contain duplicated saved searches to be merged with Destination Member ID
  """
  source_member_id: String

  """
  Destination Member ID where the duplicate saved searches that have been merged are stored
  """
  destination_member_id: String
}

type MetaData {
  title: String
  description: String
  canonical_url: String
  header_1: String
  header_2: String
  deep_links: DeepLinks
}

type MlsAgent {
  """MLS abbreviation"""
  id: String

  """Listing agent's mls id"""
  agent_id: ID

  """Listing agent's full name"""
  agent_name: String

  """Agent's phone number"""
  agent_phone: String

  """Agent's email address"""
  agent_email: String

  """Office's MLS id"""
  office_id: ID

  """Listing office's name"""
  office_name: String

  """Listing office's phone number"""
  office_phone: String

  """
  Agent type:
  + seller
  + co_seller
  + buyer
  + co_buyer
  """
  type: String
}

type MlsCopyrightnotice {
  """MLS provided copyright message text"""
  text: String
}

type MlsDisclaimer {
  """MLS logo"""
  logo: MlsPhoto

  """MLS provided copyright message"""
  text: String

  """MLS web site url"""
  href: String
}

"""Represents MLS Link Spec data for this Home """
type MlsLinkSpec {
  """Builder Feed Logo"""
  builder_feed_logo: String

  """Name of the builder"""
  builder_name: String

  """Builder link"""
  builder_href: String

  """Internal Builder Source ID"""
  builder_source_id: String

  """Internal New Home Source ID"""
  newhome_source_id: String

  """Internal New Home Subdivision ID"""
  subdivision_id: String

  """Source New Home Subdivision ID"""
  source_subdivision_id: String
}

"""MLS Member information"""
input MlsMemberInput {
  id: ID
}

type MlsPhoto {
  """MLS logo url"""
  href: String

  """MLS logo width for display"""
  width: Int

  """MLS logo height for display"""
  height: Int
}

type MlsRawData {
  """MLS listing area as provided by MLS"""
  area: String

  """MLS listing status as provided by MLS"""
  status: String

  """MLS listing style as provided by MLS"""
  style: String

  """
  The annual property tax amount as of the last assessment made by the taxing authority - provided by MLS
  """
  tax_amount: Float
}

type MLSSet {
  mls_set: String
  type: String
  source_id: String
  source_name: String
}

type MlsSource {
  """MLS disclaimer"""
  disclaimer: MlsDisclaimer
  last_update_date: DateTime

  """MLS provided copyright notice"""
  copyrightnotice: MlsCopyrightnotice

  """MLS provided listing contract date. Can be different from list_date"""
  contract_date: DateTime

  """Several fields as provided by MLS with their original values"""
  raw: MlsRawData

  """MLS abbreviation"""
  id: String

  """MLS provided listing id  -- formerly mls.id"""
  listing_id: String

  """MLS display name"""
  name: String

  """
  Specifies the source of data:
  + mls - represents MLS listings
  + community - represents Rental Community listings
  + unit - represents Unit Rental listings
  + new_home - represents New Home spec listings (this and flags.is_plan!=true uniquely identifies New Home spec listings)
  """
  type: String

  """
  List of agents linked to current listing. The source of data is MLS and it might be different from home.advertisers data.
  """
  agents: [MlsAgent]
  listing_href: String

  """A community id as exposed by DataManager"""
  community_id: Int

  """
  A source management id as exposed by DataAgg to check rentals management set
  (RM-RLHC-xxyy123 where xxyy123 is the source management id) This will be used
  to call product cache to check if the rental management has the product
  """
  management_id: ID

  """
  A source corporation id as exposed by DataAgg to check rentals corporation set
  (RM-RLHC-xxyy123 where xxyy123 is the source corporation id) This will be used
  to call product cache to check if the rental corporation has the product
  """
  corporation_id: ID

  """
  New Home source spec id (applies to MLS/New Home spec listings linked to New Home data)
  """
  spec_id: String

  """
  New Home plan id (applies to MLS/New Home listings linked to New Home data)
  """
  plan_id: ID

  """
  A rank value used to help with advanced sorting for Zillow (previously used for CoStar) community rental data source.
  """
  tier_rank: String

  """An interger value determined by the mls to calculate days on market."""
  days_on_mls: Int

  """
  Boolean value to flag if application links can appear on LDP. This flag will
  also assist in SRP slots and aid in understanding lead performance.
  """
  listing_promotion_enabled: Boolean

  """
  A value determining the type of listing to help search boost logic and optimization.
  """
  source_provided_package_type: String

  """
  A standardized status received from the builder; Default: "Active"
  """
  subdivision_status: NewHomesBuilderStatus

  """An association of agents under an MLS"""
  board: Board

  """
  Specifies the feed type of data:
  + Syndicator Unit
  + Syndicator Community
  + PMS
  """
  feed_type: String
}

input MobileNotificationTokenInput {
  """Visitor id of the client """
  client_visitor_id: ID

  """Push token for delivering push notification"""
  device_token: ID!

  """mobile operating system type """
  caller_platform: NotificationPlatform

  """
  client app identifier, which is the concatenation of app, app version, and
  platform (eg. rdc_mobile_native,14.13.0.68,iphone) 
  """
  client_app_id: ID
}

"""List of all the available module types """
enum ModuleType {
  all
  now_sold
  open_houses
  pending_contingent
  price_dropped
  recent_search
  recommended_homes
  recommended_search
  saved_search
}

"""monthly costs for home"""
input MonthlyCostsInput {
  """monthly hoa fees"""
  hoa_fees: Int

  """monthly home insurance"""
  home_insurance: Int
}

"""home ownership monthly expense"""
type MonthlyOwnershipExpense {
  """type of expense"""
  type: OwnershipExpenseType

  """expense amount"""
  amount: Int

  """expense display name"""
  display_name: String
}

"""monthly_payment query response"""
type MonthlyPayments {
  """
  List of monthly payments returned in the same order as loan_amounts parameter list in monthly_payment query
  """
  monthly_payments: [Int]

  """
  will always be "30-Year Fixed" as this api doesn't accept multiple types
  """
  loan_type: String

  """interest rate percent in decimal used to determine home price"""
  loan_rate: Float
}

"""home mortgage details"""
type Mortgage {
  """link to location specific rates url"""
  rates_url: String

  """monthly payment breakdown"""
  estimate: MortgageEstimate

  """home owner insurance rate"""
  insurance_rate: Float

  """property tax rate"""
  property_tax_rate: Float

  """mortgage rates"""
  average_rates: [Rate]

  """county's fha loan limit"""
  county_fha_loan_limit: Int

  """is list price eligible for fha loan"""
  is_listing_price_eligible_for_fha: Boolean

  """is listing eligible for down payment assistance"""
  is_dpa_eligible: Boolean

  """due at close (down payment + closing costs)"""
  due_at_close: Int

  """closing cost rate"""
  closing_cost_rate: String

  """closing cost amount"""
  closing_cost: Int

  """
  assumable_loan provides info on whether this home may have an assumable loan
  (i.e. FHA, VA) and if so, the average rate at the
  time the loan was issued
  """
  assumable_loan: AssumableLoan
}

"""rates for home insurance, property tax, mortgage rates"""
type MortgageData {
  """rates for home insurance"""
  insurance_rate: Float

  """property tax rate"""
  property_tax_rate: Float

  """average mortgage rates"""
  average_rates: [Rate]
}

"""montly payment breakdown"""
type MortgageEstimate {
  """home loan amount"""
  loan_amount: Int

  """loan rate"""
  average_rate: Rate

  """total monthly payment"""
  monthly_payment: Int

  """monthly payment details"""
  monthly_payment_details: [MonthlyOwnershipExpense]

  """sum total of payments over term of loan"""
  total_payment: Int

  """down payment"""
  down_payment: Int
}

"""flags used when querying home monthly costs"""
input MortgageFlags {
  """
  apply veterans benefits (used for loan type, mortgage insurance, down payment calculations)
  """
  apply_veterans_benefits: Boolean
}

"""Mortgage length type"""
enum MortgageLengthType {
  """10-year fixed mortgage"""
  fixed_10

  """15-year fixed mortgage"""
  fixed_15

  """20-year fixed mortgage"""
  fixed_20

  """30-year fixed mortgage"""
  fixed_30
}

"""Mortgage params for monthly price filter"""
type MortgageParams {
  """Interest rate used for monthly payment calculation"""
  interest_rate: Float
}

"""Mortgage input parameters"""
input MortgageParamsInput {
  """Down payment value"""
  down_payment: DownPaymentInput

  """Mortgage payoff length in years"""
  mortgage_length: MortgageLengthType
}

"""Predefined packing options """
enum MovePacking {
  """full """
  full

  """none """
  none

  """partial """
  partial
}

"""Predefined move sizes """
enum MoveSize {
  """1 bedroom """
  bedroom_1

  """2 bedrooms """
  bedroom_2

  """2-3 bedrooms """
  bedroom_2_3

  """3 bedrooms """
  bedroom_3

  """4 bedrooms """
  bedroom_4

  """5 bedrooms """
  bedroom_5

  """studio """
  studio
}

"""Moving Cost Response """
type MovingCost {
  """origin """
  from: MovingLocation!

  """destination """
  to: MovingLocation!

  """lower and upper bound on weight based on move size (in lbs) """
  weight: IntRangeType!

  """lower and upper bound on price """
  price_estimate: PriceEstimateRange!

  """distance between origin and destination locations (in miles) """
  distance: Int!
}

"""Moving Cost Parameters """
input MovingCostInput {
  """origin postal code """
  from: String!

  """destination postal code """
  to: String!

  """size of move """
  size: MoveSize!

  """level of packing """
  packing: MovePacking!
}

input MovingLeadData {
  """Date of move (format:  YYYY/MM/DD)"""
  move_date: String!

  """User’s first name"""
  first_name: String!

  """User’s last name"""
  last_name: String!

  """User’s contact email address"""
  from_email: String!

  """
  Use format ###-###-####x###, Either a PhoneWork, PhoneHome, or PhoneCell is required (with a minimum of 10 digits)
  """
  phone_work: String

  """
  Use format ###-###-####x###, Either a PhoneWork, PhoneHome, or PhoneCell is required (with a minimum of 10 digits)
  """
  phone_home: String

  """
  Use format ###-###-####x###, Either a PhoneWork, PhoneHome, or PhoneCell is required (with a minimum of 10 digits)
  """
  phone_cell: String

  """
  Values: Morning, Afternoon, Evening, Weekend, Anytime.  If the partner does
  not want to include this field, Moving.com recommends they send a default
  value of “Anytime”.
  """
  best_call_time: String

  """
  Does the user desire to be contacted at work?  Values: Yes, No.  If the
  partner does not want to include this field, Moving.com recommends they send a
  default value of “Yes”.
  """
  contact_at_work: String

  """User comments/additional information"""
  comment: String

  """property info /Source of the lead for tracking purpose"""
  lead_source: String

  """
  Used for testing.  Set to “1” to activate test mode.  Set to “0” or blank when
  sending of leads is desired.  While in test mode all parameter validation and
  error reporting is enabled, but the sending of leads is disabled.  When in
  test mode the response includes the phrase "Test Mode" along with the normal
  Success or Error indication.  For example:
  
  "Test Successful (Test Mode)" or "Error: 101 (Test Mode)"
  """
  test_mode: Int

  """
  Must be set to "1" to enable sending leads.  If absent or not set to "1" then
  leads will not be sent, and the behavior will be the same as if the TestMode
  parameter is set to 1 as indicated above.
  """
  live: Int

  """Set to "FSvc" for Full Service/Set to "SSvc" to Self Service"""
  move_type: String!

  """
  Values:Studio (1500 lbs)
  1 Bedroom (2000 lbs)
  2 Bedrooms (5000 lbs)
  2-3 Bedrooms (7500 lbs)
  3 Bedrooms (10000 lbs)
  4 Bedrooms (15000 lbs)
  5 Bedrooms (20000 lbs)
  Note: only numerical weight value is sent in the HTTP request. Example:  MoveSize=5000
  """
  move_size: Int!

  """ZIP code of old residence.  """
  from_zip: String!

  """ZIP code of new residence. """
  to_zip: String
}

"""Type for Moving lead submission response"""
type MovingLeadResponse {
  """
  Status must be Submitted in case of success of  Moving lead submission response
  """
  submitted: Boolean!
}

"""input object for Moving lead submission """
input MovingLeadSubmissionInput {
  """
  user object has "visitor_id", "session_id", and "member_id" (optional) 
  """
  user: LeadUser!

  """client's device info that submitted the lead """
  client: ClientInfo!

  """
  moveing lead info, method email requires first_name, last_name, email, phone, message info. 
  """
  lead_data: MovingLeadData!
}

"""
Information representing a moving location, either origin or destination 
"""
type MovingLocation {
  """postal code, eg. 10021 """
  postal_code: String!

  """city, eg. New York """
  city: String!

  """state code, eg. NY """
  state_code: String!
}

type Mutation {
  meta: JSON

  """
  Authenticates the caller and returns a token that can be used to request
  restricted data. Contact SDS group to obtain credentials. 
  """
  login(username: String!, password: String!): String

  """Create Lead and return lead id and status """
  submit_lead(input: LeadSubmissionInput): LeadResponse

  """save/favorite a property """
  user_saved_property_create(input: SavedPropertyCreateInput!): SavedProperty

  """remove a saved property """
  user_saved_property_delete(input: SavedPropertyDeleteInput!): DeletedSavedResources

  """create a connection between two users """
  user_connection_create(input: UserConnectionCreateInput!): UserConnectionDetails

  """updates a connection between two users """
  user_connection_update(input: UserConnectionUpdateInput!): UserConnectionDetails

  """
  Create Saved search. returns created SavedSearch object. Throws error object on error
  """
  user_saved_search_create(input: SavedSearchCreateInput!): SavedSearch

  """
  Updates Saved search. returns updated SavedSearch object. Throws error object on error
  """
  user_saved_search_update(input: SavedSearchUpdateInput!): SavedSearch

  """
  Delete saved searches. returns DeleteSavedSearch object. Throws error object on error
  """
  user_saved_search_delete(input: SavedSearchDeleteInput!): DeleteSavedSearch

  """
  Delete All saved searches for a member. returns DeleteAllSavedSearch object. Throws error object on error
  """
  user_saved_search_delete_all: DeleteAllSavedSearch

  """
  Merge saved searches. returns MergeSavedSearch object. Throws error object on error
  """
  user_saved_search_merge(input: SavedSearchMergeInput!): MergeSavedSearch

  """hide a property """
  hidden_property_create(input: HiddenPropertyInput!): HiddenProperty

  """unhide a property """
  hidden_property_delete(input: HiddenPropertyInput!): DeletedHiddenProperty

  """
  Creates a Chat/Direct messaging session with GAB, creating users is they do not exist
  """
  create_chat_session: ChatSession @deprecated(reason: "Deprecated GAB API service.")

  """
  Reset the password for the user with the given email 
  returns true if the password reset succeeded, false otherwise 
  """
  user_reset_password(email: String!): Boolean @deprecated(reason: "use initiate_password_request instead")

  """
  Send email to user provided email address for initiating Add or reset password 
  Return Success for successful 
  """
  initiate_password_request(input: InitiatePasswordRequestInput): PasswordRequestResponse

  """
  Add a mobile notification token 
  returns the user's updated notification settings 
  """
  user_mobile_notification_token_add(input: MobileNotificationTokenInput!): UserNotificationSettings

  """
  Deletes a mobile notification token 
  returns true iff the delete succeeded 
  """
  user_mobile_notification_token_delete(input: MobileNotificationTokenInput!): Boolean

  """
  Update device notification settings 
  returns the user's updated notification settings 
  """
  user_notification_device_settings_update(input: UserNotificationDeviceSettingsInput): UserNotificationSettings

  """
  Update general notification settings 
  returns the user's updated notification settings 
  """
  user_notification_settings_update(input: UserNotificationSettingsInput): UserNotificationSettings

  """Create Moving Lead and return lead id and status """
  submit_moving_lead(input: MovingLeadSubmissionInput): MovingLeadResponse

  """
  Notify File Cabinet about a contacted property. Throws error if account ID 
  is not supplied in header. 
  """
  contacted_property_create(input: ContactedPropertyCreateInput!): ContactedProperty

  """delete a contacted property """
  contacted_property_delete(input: ContactedPropertyDeleteInput!): DeletedContactedProperty

  """Create a note about a property """
  property_note_create(input: PropertyNoteCreateInput!): PropertyNote

  """Delete a note about a property """
  property_note_delete(input: PropertyNoteDeleteInput!): DeletedPropertyNote

  """Update a note about a property """
  property_note_update(input: PropertyNoteUpdateInput!): PropertyNote

  """Create a rating  about a property """
  property_rating_create(input: PropertyRatingCreateInput!): PropertyRating

  """create a feedback link """
  feedback_link_create(input: FeedbackLinkCreateInput!): FeedbackLink
  persisted_query_create(input: PersistedQueryCreateInput!): PersistedQuery
  persisted_query_delete(input: PersistedQueryDeleteInput!): PersistedQueryDelete

  """Create a property collection """
  property_collection_create(input: PropertyCollectionCreateInput!): PropertyCollection

  """Update a property collection """
  property_collection_update(input: PropertyCollectionUpdateInput!): PropertyCollection

  """Delete a property collection """
  property_collection_delete(input: PropertyCollectionDeleteInput!): DeletedPropertyCollection

  """Delete a property from a collection """
  property_collection_property_delete(input: PropertyCollectionPropertyDeleteInput!): PropertyCollection

  """Mutation to submit the loan broker choice"""
  loan_broker_choice_submit(
    """The input to submit the loan broker choice"""
    input: LoanBrokerChoiceSubmitInput!
  ): LoanBrokerChoiceSubmitResult!

  """
  Mutation for Sharing Properties and Requesting Feedback
  
  Share Property and return Boolean to indicate success or failure 
  """
  share_property(input: SharePropertyInput): Boolean

  """
  Mutation for Share Rental Search and SRP URL
  
  Share Rental Search and return Boolean to indicate success or failure 
  """
  share_rental_search(input: ShareRentalSearchInput!): Boolean
}

type NamedChannel {
  """The object type of the channel that is being """
  type: NamedChannelType!

  """JSON representing the attributes that uniquely identify a channel """
  parameters: JSON!
}

enum NamedChannelType {
  """general channel used for chatting """
  general

  """channel type to chat about a property """
  property
}

type NamedChatParticipant {
  """Participants full name, if available """
  name: String

  """the role of the participant in the conversation """
  type: ParticipantRoles!

  """
  the system identifier (fulfillment id, member id, etc ...) for the Participant Type 
  """
  source_id: ID!

  """Unique id that represents the user with external parties """
  unique_id: ID!

  """The participants photo/avatar, if available """
  photo_url: String
}

input Nearbysearch {
  """
  type values are: postal, city 
  nearby is "95129", "West Miami" - value of type 
  """
  id: Int
  type: String
  nearby: String
  state_code: String
}

type NearbyTransit {
  """Location coordinate of the points returned by nearby transit api """
  coordinate: SimpleCoordinate!

  """Street / Line name """
  name: String!

  """lines available at this stop """
  lines: [String!]!

  """travel details """
  travel(transportation_type: TransportationType = walking): TravelDetails!
}

"""Input parameter when querying nearby transit """
input NearbyTransitInput {
  """Maximum number to fetch, default to 10 """
  limit: Int = 10
}

"""Data about a neighborhood """
type Neighborhood implements Geo {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """The name of the neighborhod. """
  name: String

  """The county where the neighborhood resides. """
  county: String

  """The primary city where the neighborhood resides. """
  city: String
  neighborhood: String

  """The centroid of the neighborhood. """
  centroid: Coordinate

  """The neighborhood boundary. """
  boundary: GeoJSON

  """Statistics about the neighborhood. """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """
  A list of geos that are recommended to be similar and nearby to the neighborhood. 
  """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """The neigbhorhood id """
  id: ID

  """The type of neighborhoood.  """
  level: String

  """The state code of the state where the neighborhood resides. """
  state_code: String

  """Geo's Parents """
  parents: [GeoParent]

  """county_needed_for_uniq"""
  county_needed_for_uniq: Boolean

  """Find relevant schools given a neighborhood. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

"""Commute filters to search for recommended neighborhoods in anchor geo """
input NeighborhoodDiscoveryCommuteFilter {
  """Coordinates of origin of commute filter """
  origin: Origin!

  """Interval of commute in minutes """
  interval_in_minutes: CommuteInterval
}

"""
The possible status of a New Homes property from the Builder perspective
"""
enum NewHomesBuilderStatus {
  """Currently available"""
  active

  """Not available anymore"""
  closeout

  """Will be available soon"""
  coming_soon

  """Currently available since short time ago"""
  grand_opening
}

"""A set of contact information specific to New Homes """
type NewHomesContacts {
  """
  Indicates, among all leads, which one to be preferred. DEFAULT: builder 
  """
  lead_preferred: NewHomesLeadSource

  """A list of Lead Contacts """
  lead_contacts: [NewHomesLeadContact]
}

"""
A single Lead contact (person) and it's information - specific to New Homes 
"""
type NewHomesLeadContact {
  """
  Indicates if it's the default contact or someone to copy (CC or BCC) the communication 
  """
  recipient_type: NewHomesLeadRecipientType

  """Indicates from where that lead contact was extracted """
  source: NewHomesLeadSource

  """The contact email """
  email: String
}

"""
A list of possible recipient types (`copy` means a recipient to CC or BCC a
message and `default` means the primary recipient) 
"""
enum NewHomesLeadRecipientType {
  copy
  default
}

"""
New Homes documents contain leads information in multiple levels and the source
represents in what level they were extracted 
"""
enum NewHomesLeadSource {
  all
  builder
  corporation
  subdivision
}

"""News and Insights Playlist details from MVS API """
type NewsCuratedPlaylist {
  """The unique id of the video hub page in UUID """
  id: ID!

  """The title of the page in plain text """
  title: String

  """The description of the page in plain text """
  description: String

  """The Relative path of the RDC URL """
  page_url_path: String

  """A List of the Playlist IDs """
  playlist_ids: [ID]
}

"""Input passed to the query to get video hub page by title """
input NewsCuratedPlaylistInput {
  """
  The title of the page. Video hub page will return by default with id as 0. 
  """
  title: String
}

"""NewsVideo having mainly the video and image details of Playlist Video """
type NewsVideo {
  """The Unique ID of the Video in UUID Format """
  id: ID!

  """Unique ID represent in JW Player Dashboard (Third Party) """
  third_party_video_id: String!

  """Video Size Width """
  width: Int

  """Video Size Height """
  height: Int

  """The name of the Video as title """
  title: String

  """Duration of the Video Playback time in seconds """
  duration: Int

  """Duration of the Video for SEO - Ex: "PT2M42S" """
  duration_seo: String

  """Video file format, ex: MP4 """
  type: String

  """seo_title describe the title of the Video for SEO meta title """
  seo_title: String

  """The more described detail of the Video as plain text """
  description: String

  """Video Published Date and Time """
  published_on: String

  """Thumbnail url is a Secure JW Platform Image URL """
  thumbnail_url: String

  """Video URL provided by JW Player Dashboard """
  video_url: String!

  """RDC Relative video details url path of the video """
  video_details_url_path: String

  """m3u8 Format Video url provided by JW Player Dashboard """
  hls_video_url: String

  """
  List of tags. tags are descriptive keywords you can add to your video to help
  viewers find your content. ex: ["unique-homes", "home-decor"] 
  """
  tags: [String]

  """Video availability status True/False """
  is_deleted: Boolean!

  """Advertisement details of video - client & tag """
  advertising: VideoAdvertising

  """captions provide a list of text tracks for video"""
  captions: [VideoCaption]
}

"""Noise information """
type Noise {
  """List of noise categories """
  noise_categories: [NoiseCategory]

  """Overall noise score """
  score: Float
}

"""Noise category information """
type NoiseCategory {
  """Type of noise """
  type: String

  """Noisiness """
  text: String
}

"""Mobile device type """
enum NotificationPlatform {
  """android """
  android

  """ios """
  ios
}

"""
Buckets used for number range aggregation.
"to" must be greater than "from"
"""
input NumberAggRange {
  """Bucket from."""
  from: Float

  """Bucket to."""
  to: Float
}

type Office {
  source_id: String
  source_name: String
  type: String
  mls_set: MLSSet
}

type OpCityLeadAttributes {
  """Flag to indicate markets which have support for OpCity """
  flip_the_market_enabled: Boolean

  """
  OpCity related flag to indicate if a property has cashback option enabled 
  """
  cashback_enabled: Boolean

  """
  OpCity related flag to indicate if a property has smart home option enabled 
  """
  smarthome_enabled: Boolean

  """DEPRECATED (Please use phones) """
  local_phone: String

  """local OpCity phone numbers """
  phones: [OpCityLocalPhone]
}

type OpCityLocalPhone {
  """Phone number """
  number: String

  """
  Phone number category. In general, it's module information which this phone number will be used. e.g.) schedule_tour 
  """
  category: String
}

type OpendoorReferral {
  url: String
}

type OpendoorValue {
  is_eligible: Boolean
  value_estimate: OpendoorValueEstimate
  referral: OpendoorReferral
}

type OpendoorValueEstimate {
  value: Float
}

enum Operator {
  """equals to value """
  equals

  """equals to comma separated values """
  in
}

input Origin {
  """
  latitude: the angular distance of a place north or south of the earth's
  equator, or of a celestial object north or south of the celestial equator,
  usually expressed in degrees and minutes.
  """
  lat: Float

  """
  longitude: is the angular distance, in degrees, minutes, and seconds, of a
  point east or west of the Prime (Greenwich) Meridian. Lines of longitude are
  often referred to as meridians
  """
  lon: Float
}

"""type of home ownership expense"""
enum OwnershipExpenseType {
  """home owner association fees"""
  hoa_fees

  """home owner insurance"""
  home_insurance

  """mortgage insurance"""
  mortgage_insurance

  """principal + interest"""
  principal_and_interest

  """property tax"""
  property_tax
}

enum ParticipantRoles {
  """Assigned professional agent for a consumer """
  agent

  """The consumer (buyer) """
  consumer

  """Customer Service Respresentative """
  csr
}

type PasswordRequestResponse {
  status: String
}

enum PasswordRequestType {
  """add password during swap flow"""
  new_subscriber_add_pwd

  """reset password"""
  reset_pwd

  """add password for returning swap user"""
  returning_subscriber_add_pwd
}

"""Convert a float ratio into percent with 2 significant digits"""
scalar Percent

type PersistedQuery {
  id: ID
  created_by: String
  created_date: DateTime
  client_id: String
  query: String
}

input PersistedQueryCreateInput {
  created_by: String
  created_date: DateTime
  client_id: String
  query: String
}

type PersistedQueryDelete {
  deleted_id: ID
}

input PersistedQueryDeleteInput {
  id: ID
}

"""Phone information"""
input PhoneInput {
  number: String
  type: String
}

type Photo {
  description: String
  href: String
  tags: [Tag]
  type: String
}

type PhotoInfo {
  """Photo URL"""
  href(
    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean
  ): String

  """Photo tag"""
  tag: String

  """Photo matching score"""
  score: Float
}

type Plat {
  """Unique subdivision number """
  number: String
  block_number: String
  lot_number: String

  """First component of a recording system to catalog subdivision """
  book: String

  """Second component of a recording system to catalog subdivision """
  page: String
}

"""Playlist having basic details from MVS API with list of Video details """
type Playlist {
  """The Unique ID of the Playlist in UUID Format """
  id: ID!

  """The name of the Playlist as title """
  title: String!

  """seo_title describe the title of the Playlist for SEO meta title """
  seo_title: String

  """The more described detail of the Playlist in plain text """
  description: String

  """The Playlist ad unit having video Advertisement data """
  ad_unit: String

  """List of the Video Objects """
  videos: [NewsVideo]

  """First Video ID for the plyalist as Default Video """
  default_video: String

  """The image url of the third party(JW Player) absolute path """
  thumbnail_url: String
}

"""
Input passed to the query to get video details page with different parameters 
"""
input PlaylistsInput {
  """The uniq playlist IDs as array to retrieve matching playlists. """
  playlist_ids: [ID]

  """
  Retrieve the playlists if video_id is present in videos list of playlist or
  with Default details of playlists with video details
  """
  video_id: ID

  """
  Retrieve the video based on JW Player ID or MVS Video ID, it can be mvs, jw
  """
  id_scheme: String

  """Videos by specific size of videos resolution """
  video_size: String

  """The maximum number of video items to return in each playlist. """
  limit: Int

  """
  Number of video items to skip before returning results of each playlist 
  """
  offset: Int
}

"""POIs """
type Poi {
  """Internal POI id """
  lid: String

  """POI Name """
  name: String

  """POI category """
  category: String

  """POI location lat """
  lat: Float

  """POI location lon """
  lon: Float

  """POI parent state code """
  state_code: String

  """POI parent city """
  city: String

  """POI parent city slug_id """
  city_slug_id: String

  """POI slug_id """
  slug_id: String
}

enum PoiCategory {
  park
  subway_station
  university
}

input PoiCriteria {
  """Slug ID of a geo, return pois within the geo """
  slug_id: String

  """Pois of specific categories, default will return all types """
  categories: [PoiCategory]
}

input PopularityFilter {
  """
  Only fetch popularity if the parent property status matches one of the statuses provided
  """
  status: [String]
}

"""Data for a postal code geo. Also known as zip. """
type PostalCode implements Geo {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """
  The name of the postal code. It is same as postal code or postal code number. 
  """
  name: String

  """Postal code number """
  postal_code: String

  """The centroid of the postal_code. """
  centroid: Coordinate

  """The postal code boundary """
  boundary: GeoJSON

  """Statistics about the postal code. """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """
  A list of geos that are recommended to be similar and nearby to the postal code. 
  """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """The state code of the state where the postal code resides. """
  state_code: String

  """Geo's Parents """
  parents: [GeoParent]

  """county_needed_for_uniq"""
  county_needed_for_uniq: Boolean

  """Find relevant schools given a postal code. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

"""
Preset for geo_insights endpoint used as input parameter to find recommended geos  
currently supported values 
+ similarity - filters and popularity both are used to find recommended geos 
+ neighborhood_discovery - only filters are used to find recommended geos 
If Preset is similarity or no preset value is passed then geo_search_method is passed to Market Trends API as expansion 
If Preset is neighborhood_discovery then geo_serch_method parameter is not passed to Market Trends API 
"""
enum Preset {
  """filters are used to find recommended geos """
  neighborhood_discovery

  """filters and popularity both are used to find similar geos """
  similarity
}

"""Price estimate range """
type PriceEstimateRange {
  """
  min price estimate, formatted with thousand separators 
  eg. $1,378, $120, $2,030,291 
  """
  min: String

  """
  max price estimate, formatted with thousand separators 
  eg. $1,378, $120, $2,030,291 
  """
  max: String
}

"""Primary MLS information"""
input PrimaryMlsInput {
  abbreviation: String
  member: MlsMemberInput
}

type PrioritizedCounts {
  """Total number of prioritized listings."""
  prioritized_total: Int

  """Total number of non prioritized listings."""
  non_prioritized_total: Int
}

enum ProductPropertyType {
  land
  rental
  residential
}

input ProductQuery {
  agent_mls_set: String
  office_mls_set: String
  property_type: ProductPropertyType
}

"""product information from the Products API """
type ProductSummary {
  products: [String]
  product_attributes: JSON
  product_attributes_search: JSON

  """RDC Branding product name. """
  brand_name: String
}

type Property {
  property_id: ID
  address: Address
  basic: Basic

  """
  Indicates quality of property, validated against a set criteria 
  + 1111 denotes a high quality property which passed all criteria 
  + 0000 denotes a low quality property which failed all criteria 
  """
  confidence_code: String
  details: Details
  listings: [PropertyListing]
  previous_property_ids: [ID]
  public_record: PublicRecord
  suppression_flags: [String]
  neighborhoods: [Neighborhood]
  property_history: [PropertyHistory]
  search_areas: [SearchArea]

  """
  A complete tax history for this Home. The source is Tax Assessor data from 3rd
  party Public Record vendor. Another attribute tax_record provides information
  for public record itself. 
  """
  tax_history: [TaxHistory]

  """Retrieve The Matterport media associated with the specified property """
  matterport: Matterport
  virtual_tours: [VirtualTour]
}

"""List of supported property centric home statuses"""
enum PropertyCentricHomeStatus {
  active
  for_rent
  for_sale
  new_community
  off_market
  other
  ready_to_build
  sold
}

input PropertyCentricSearchAPISort {
  """Fields to sort"""
  field: PropertyCentricSearchSortField

  """Sort direction, asc/desc"""
  direction: SortDirection
}

input PropertyCentricSearchCriteria {
  """Search for pending homes."""
  pending: Boolean

  """Unique Home identifier also known as property id"""
  property_id: [ID]

  """Search by home status for_rent/for_sale/etc"""
  status: [PropertyCentricHomeStatus]
}

"""List of supported sort fields for property centric search"""
enum PropertyCentricSearchSortField {
  """Date of last update."""
  last_update_date

  """Price property was listed at."""
  list_price

  """Date home price was reduced."""
  price_reduced_date

  """Property ID of property."""
  property_id

  """Square footage of the Unit"""
  sqft

  """Date property was indexed."""
  when_indexed
}

"""A property collection """
type PropertyCollection {
  """The document id of the collection """
  id: ID!

  """The name of the collection """
  collection_name: String!

  """Soft delete of the collection """
  deleted: Boolean!

  """The saved property document ids associated with this collection """
  saved_property_ids: [String!]!

  """User which owns this collection """
  saved_by: [Collaborator]

  """date when collection was created """
  created_date: DateTime

  """date when collection was last updated """
  updated_date: DateTime
}

"""Input to create a property collection """
input PropertyCollectionCreateInput {
  """Name of the collection """
  collection_name: String!

  """Saved property identifiers associated with this collection """
  saved_property_ids: [ID!]
}

"""Input to delete a property collection """
input PropertyCollectionDeleteInput {
  """The property collection document id """
  id: ID!
}

"""Input to delete a property collection """
input PropertyCollectionPropertyDeleteInput {
  """The property collection document id """
  id: ID!
  saved_property_id: ID!
}

"""Input to update a property collection """
input PropertyCollectionUpdateInput {
  """Document id of the collection """
  id: ID!

  """Name of the collection """
  collection_name: String

  """Saved property identifiers associated with this collection """
  saved_property_ids: [ID!]
}

"""Crime information for the property """
type PropertyCrime {
  """List of crime categories """
  crime_categories: [PropertyCrimeCategory]
}

"""Crime for a lat, lon from Crime API """
type PropertyCrimeCategory {
  """Type of Crime (min or max) """
  type: PropertyCrimeType

  """Indicator value between 1 and 6 with 1 being safest. """
  index: Float
}

"""Types of crime values returned from Market Trends API """
enum PropertyCrimeType {
  """property crime """
  property

  """total (aggregation over all type) cirme """
  total

  """the max total crime """
  total_max

  """the min total crime """
  total_min

  """violent crime """
  violent
}

"""Property highlight union """
union PropertyHighlight = HighlightTip | HighlightPhrase

type PropertyHistory {
  listing_id: ID
  date(format: DateFormat): DateTime
  event_name: String
  price: Int
  price_changed: Int
  source: String

  """
  the MLS name of the property history data source. If null, it comes from Public Record 
  """
  source_name: String
  sqft: Int
}

"""Represents a buyer information as exposed by public records """
type PropertyHistoryBuyer {
  """Buyer full name """
  name: String

  """Indicates if buyer is a corporate  entity or not """
  is_corporate: Boolean

  """
  Code indicates additional owners whose names were not supplied by the source 
  """
  has_additional_owners: String

  """Care of Name as supplied by the source """
  care_of_name: String

  """Form or method of property ownership (i.e.; joint tenancy) """
  ownership_rights: String

  """Relationship between multiple owners or marital status. """
  relationship: String
}

"""The Lender associated with a Mortgage """
type PropertyHistoryLender {
  """Last name of the lender """
  last_name: String

  """First name of the lender """
  first_name: String

  """Lender address """
  address: Address
}

"""Mortgage associated with sale """
type PropertyHistoryMortgage {
  """The lender associated with the mortgage """
  lender: PropertyHistoryLender

  """Amount of the mortgage """
  amount: Float

  """Date the mortgage was initiated """
  date: DateTime

  """Interest Rate """
  rate: Float

  """Interest rate type of the loan (Adjustable, Fixed) """
  rate_type: String

  """Type of loan secured """
  type: String

  """Type of deed used for recording (Agreement of sale, Assumption Etc) """
  deed_type: String

  """
  Code used to identify whether number stored in Mortgage Term is days, months or years 
  """
  term_type: String

  """Length of time for the mortgage to mature """
  term: Int

  """The date the mortgage becomes due """
  due_date: DateTime

  """The assumption amount related to the existing mortgage """
  assumption_amount: Int

  """
  Occurrence number when record applies to a second or higher mortgage recorded concurrently 
  """
  sequence: Int

  """Indicator showing the loan is for construction """
  is_construction_loan: Boolean
  is_foreclosure: Boolean @deprecated(reason: "is_foreclosure will be deprecated and going to be moved to HomePropertyHistory.is_foreclosure")
}

"""Represents the type of transfer document """
type PropertyHistoryRecorded {
  """Type of transfer document recorded (Grand Deed, Trust Deed etc) """
  document_type: String

  """FARES code identifying the type of transaction (standardized) """
  transaction_type: String

  """
  Recorders document number, used by some counties to record transactions 
  """
  doc_number: String

  """Recorders book & page, used by some counties to record transactions """
  book_page: String

  """Form or method of property ownership (i.e.; joint tenancy) """
  ownership_rights: String

  """Relationship between multiple owners or marital status. """
  relationship: String

  """Company assocaited with the sale """
  title_company: PropertyHistoryTitleCompany
}

"""Represents a seller information as exposed by public records """
type PropertyHistorySeller {
  """Seller full name """
  name: String
}

"""The Title Company associated with the sale """
type PropertyHistoryTitleCompany {
  """Company full name """
  name: String
}

type PropertyListing {
  listing_id: ID
  listing_status: String
  primary: Boolean
}

"""A property note """
type PropertyNote {
  """The note identifier """
  id: ID!

  """The property identifier """
  property_id: ID!

  """The property notes content """
  note: String!

  """date when note was created """
  created_date: DateTime!

  """date when note was last updated """
  updated_date: DateTime!

  """The home object """
  home: SearchHome
}

"""Input to create a property note """
input PropertyNoteCreateInput {
  """property id """
  property_id: ID!

  """listing id of property """
  listing_id: ID

  """preferred listing type """
  status: PropertyNoteListingType

  """property note content """
  note: String!
}

"""Input to delete a property note """
input PropertyNoteDeleteInput {
  """The property note document id """
  id: ID!
}

"""A note """
type PropertyNoteDetail {
  """The note identifier """
  id: ID!

  """The note content """
  note: String

  """date when note was created """
  created_date: DateTime!

  """date when note was last updated """
  updated_date: DateTime!

  """collaborator object stating who made the note """
  created_by: Collaborator

  """type: ‘note’ or ‘feedback’ """
  type: String

  """rating for the feedback type notes """
  rating: Int

  """the name of who post the note """
  feedback_provider_name: String
}

"""Listing types accepted by file cabinet """
enum PropertyNoteListingType {
  for_rent
  for_sale
  new_community
}

"""The property and its notes """
type PropertyNotes {
  """The property identifier """
  property_id: ID!

  """The home object """
  home: SearchHome

  """The list of notes """
  notes: [PropertyNoteDetail!]!
}

"""Input to query for property notes """
input PropertyNotesCriteria {
  """Filter by these property ids """
  property_ids: [ID]
}

"""Input to update a property note """
input PropertyNoteUpdateInput {
  """property note document id """
  id: ID!

  """property note content """
  note: String!
}

"""A property rating """
type PropertyRating {
  """The rating identifier """
  id: ID!

  """The property identifier """
  property_id: ID!

  """The property rating """
  rating: Int!

  """date when rating was created """
  created_date: DateTime

  """date when rating was last updated """
  updated_date: DateTime

  """The home object """
  home: SearchHome
}

"""Input to create a property rating """
input PropertyRatingCreateInput {
  """property id """
  property_id: ID!

  """listing id of property """
  listing_id: ID

  """preferred listing type """
  status: PropertyNoteListingType

  """property rating """
  rating: Int!
}

input PropertySearchCriteria {
  address: String
  allow_not_exists: [String]
  exists: [String]
  boundary: GeoJSON
  city: String
  locations: [SearchAPILocations]
  listing_key: String
  nearby: SearchAPINearby
  neighborhoods: [SearchAPINeighborhoods]
  new_construction: Boolean
  property_id: [ID]
  postal_code: String
  state_code: String

  """Search for homes with photos."""
  has_photos: Boolean
  street_name: String
  street_full_name: String
  status: [HomeStatus]
  sold_date: DateStringRange
  sold_date_search: DateStringRange

  """suppressed sold_date search for FIND user only"""
  sold_date_unsuppressed: DateStringRange

  """suppressed sold_price search for FIND user only"""
  sold_price_unsuppressed: IntRange

  """Search by range of property square footage."""
  sqft: FloatRange
  type: [String]
  building_id: ID
  street_first_letter: String
  owner_names: String

  """All owner names search for homes"""
  all_owner_names: String

  """All source lisiting id's of the property"""
  historic_source_listing_id: [String]

  """Subdivison name in the tax_record field"""
  property_subdivision_name: String
  beds: IntRange
  baths: FloatRange
  list_price: FloatRange
  lot_sqft: FloatRange
  year_built: IntRange
}

"""List of the property status available """
enum PropStatus {
  for_sale
}

type ProviderUrl {
  level: String
  type: String
  url: String
}

type PublicRecord {
  """
  A vendor specific public record identifier which is replaced by public_record_id. This field is DEPRECATED. 
  """
  cl_id: ID

  """An identifier used to uniquely identify public record. """
  public_record_id: ID
  cooling: String
  date_updated: String
  distinct_baths: Int
  exterior1: String
  heating: String
  lot_size: Int
  roofing: String
  sqft: Int
  stories: Int
  type: String
  units: Int
  year_built: Int
  year_renovated: Int
}

"""Frequency of push notifications """
enum PushNotificationFrequency {
  """daily """
  daily

  """real time """
  realtime
}

type Query {
  meta: JSON
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """
  Enable debug mode, allows the caller to see all of the URLs that have been
  called for the given query and how long each takes.  When using debug it
  should always be the first field in the query 
  """
  debug(enabled: Boolean): Boolean

  """
  Home (inventory) represents the current state(s) of every home -- API Info: Homes API
  """
  home(
    property_id: ID
    listing_id: ID

    """preferred listing type, valid values for now are - rental"""
    listing_type: String

    """
    providing true will prevent logic for providing best listing instead of listing requested. **NOT FOR USE BY RDC**.
    """
    ignore_logic: Boolean

    """
    OBSOLETE - DO NOT USE. Returns listing and property private data when set to true. **NOT FOR USE ON RDC**.
    """
    private_data: Boolean
  ): Home

  """List of schools -- API Info: Schools API """
  schools(
    """items per page """
    limit: Int

    """show next page starting from the nth item """
    offset: Int
  ): SchoolList

  """School by id -- API Info: Schools API """
  school(
    """ID of the school to fetch """
    id: ID!
  ): School

  """School District by id -- API Info: Schools API """
  school_district(
    """ID of the school district to fetch """
    id: ID!
  ): SchoolDistrict

  """School by criteria -- API Info: Schools API Intersect/Within endpoint """
  school_search(
    """payload sent to schools api """
    query: SchoolSearchCriteria!

    """number of schools returned """
    limit: Int

    """offset 0-based index """
    offset: Int

    """sort field sent to schools api """
    sort: [SchoolSortKey]
  ): SchoolList

  """School by criteria -- API Info: Schools API Intersect/Within endpoint """
  school_district_search(
    """payload sent to schools api """
    query: SchoolDistrictSearchCriteria!

    """number of schools returned """
    limit: Int

    """offset 0-based index """
    offset: Int
  ): SchoolDistrictList

  """
  Allows to query for advertisers based on MLS set -- API Info: Agent/Office cache API
  """
  advertisers(mls_sets: [String]!): [HomeAgentOffice]

  """Retrieves list of products -- API Info: Products cache API """
  products(query: [ProductQuery]): [ProductSummary]

  """A coordinate, mostly used to branch off into other queryies """
  coordinate(
    """latitude for the coordinate """
    lat: Float!

    """longitude for the coordinate """
    lon: Float!
  ): SimpleCoordinate

  """Property by id -- API Info: Property API """
  property(
    """id of the property to fetch """
    id: ID!
  ): Property

  """Listing by id -- API Info: Listings API """
  listing(
    """id of the listing to fetch """
    id: ID!
  ): Listing

  """
  Search for homes -- API Info: Search API. It only returns Active and Recently Sold. Using property_search for all results.
  """
  home_search(
    """
    Query based on HomeSearchCriteria, which involves particulars of a given
    home, number of beds, neighbourhood location, etc.
    """
    query: HomeSearchCriteria!

    """Limits the number of returned records."""
    limit: Int

    """The offset by which to start in the results."""
    offset: Int

    """
    Sort based on explicit characteristics, such as number of baths, or list price.
    """
    sort: [SearchAPISort]

    """
    sort_type allows user facing clients to enable search to implement sort
    orders (as opposed to sort, which requires explicit sort field/order). It
    also enables search to utilize any default reranking algorithms for that
    particular sort supported values [relevant]
    """
    sort_type: SearchSortType

    """Returns the aggregated output from search.api."""
    aggregate: SearchAPIAggregate

    """Returns map clustering from local."""
    geogrid: SearchGeoGridAggregate

    """Used for the purposes of reranking."""
    bucket: SearchAPIBucket

    """Search using client data."""
    client_data: JSON

    """Promotion search query parameters"""
    search_promotion: SearchPromotionInput

    """monthly payment parameters"""
    mortgage_params: MortgageParamsInput

    """perform search asynchronously"""
    async_search: Boolean

    """search_context input for asynchronous search"""
    search_context: SearchContextInput
  ): SearchHomeResult

  """
  Search for properties -- API Info: SearchAPI. It returns all properties that meet the criteria
  """
  property_search(query: PropertySearchCriteria!, limit: Int, offset: Int, sort: [SearchAPISort], aggregate: SearchAPIAggregate): SearchHomeResult

  """
  Search for property centric documents -- API Info: SearchAPI. It returns all
  property centric documents that meet the criteria
  """
  property_centric_search(
    """Query based on PropertyCentricSearchCriteria"""
    query: PropertyCentricSearchCriteria!

    """Limits the number of returned records"""
    limit: Int

    """The offset by which to start in the results"""
    offset: Int

    """Sort based on explicit characteristics, such as list price"""
    sort: [PropertyCentricSearchAPISort]
  ): SearchHomeResult

  """Search for community -- API Info: SearchAPI"""
  community_search(query: CommunitySearchCriteria!, limit: Int, offset: Int, sort: [CommunitySearchAPISort], aggregate: SearchAPIAggregate): SearchHomeResult

  """Search for closings -- API Info: SearchAPI """
  closings_search(query: ClosingsSearchCriteria!, limit: Int, offset: Int, sort: [SearchAPISort], aggregate: SearchAPIAggregate): SearchHomeResult

  """
  Home search counts -- API Info: SearchAPI. Retrieve counts for an array of home_search queries
  """
  home_search_counts(
    """query retrieve home_search counts in bulk """
    queries: [HomeSearchCountsCriteria!]!
  ): HomeSearchCountsResult

  """
  Home search expanded counts -- API Info: SearchAPI. Retrieve counts for expansions of search criteria
  """
  home_search_expanded_counts(
    """preserve_filters: when true, will not perform default filter removals"""
    preserve_filters: Boolean

    """
    query based on HomeSearchCriteria, which involves particulars of a given
    home, number of beds, neighbourhood location, etc.
    """
    query: HomeSearchCriteria!

    """Geo expansion criteria used for geo expansion"""
    geo_expansion: GeoExpansionCriteria

    """filter expansion criteria used for filter expansion"""
    filter_expansion: FilterExpansionCriteria
  ): HomeSearchExpandedCountsResult

  """Search for homes using vector embeddings to sort the results."""
  embeddings_search(
    """
    Query based on HomeSearchCriteria, which involves particulars of a given
    home, number of beds, neighbourhood location, etc.
    """
    query: HomeSearchCriteria!

    """Limits the number of returned records."""
    limit: Int

    """Used for the purposes of reranking using embeddings."""
    bucket: EmbeddingsSearchAPIBucket!
  ): SearchHomeResult

  """Search for keywords -- API Info: LookupAPI """
  keywords_search(
    """query to search keywords """
    query: KeywordsSearchCriteria!

    """limit of records to return """
    limit: Int

    """offset - record number you need to start getting results from """
    offset: Int

    """sort criteria """
    sort: [KeywordsSearchSort]
  ): KeywordsSearchResult

  """Search for builders -- API Info: LookupAPI """
  builders_search(
    """query to search builders """
    query: BuildersSearchCriteria!

    """maximum number of builders to return"""
    limit: Int
  ): BuildersSearchResult

  """GraphQL Service version number """
  version: String

  """
  Lookup a geo either by its unique slug_id, or its geo_type and components. 
  """
  geo(
    """slug_id if searching geo by its slug_id """
    slug_id: String

    """geo_type if searching by geo_type and components """
    geo_type: String

    """search by neighborhood name """
    neighborhood: String

    """search by city name """
    city: String

    """search by county name """
    county: String

    """search by postal code """
    postal_code: String

    """search by state code. Cannot be used with state """
    state_code: String

    """search by state name. Cannot be used with state_code """
    state: String

    """search by lat  """
    lat: Float

    """search by lon"""
    lon: Float
  ): Geo

  """Lookup a list of geos by various filters. """
  geo_recommendations(query: RecommendedQueryCriteria!): GeoRecommendationSearchList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(query: TopRatedGeosCritera): GeoRecommendationSearchList

  """Lookup markettrends for multiple geos by their slug_ids """
  get_market_trends_by_slug_ids(
    """slug_id for searching geos by its slug_id """
    slug_ids: [String]
  ): [Geo]
  pois(
    """POI query criterias """
    query: PoiCriteria

    """Limit of pois returned, between 1-100 inclusive, default 10 """
    limit: Int
  ): [Poi]
  user: User

  """
  query to get the list of all user connections, filtered based on optional connection status and optional invitation token
  """
  user_connections(connection_status: UserConnectionStatus, invitation_token: ID): [UserConnectionDetails]

  """Return similar homes suggestions"""
  you_might_also_like(input: YMALInput!): SearchHomeResult

  """
  loan analysis provides rate info based on location (interest rates, property tax rates, home insurance rate)
  """
  loan_analysis(location: String, home_price: Int, down_payment: Int): LoanAnalysis

  """
  loan mortgage provides monthly payment breakdown including amortization data
  """
  loan_mortgage(loan: LoanInput!, property_tax_rate: Float!, costs: MonthlyCostsInput!, options: MortgageFlags): LoanMortgage

  """
  loan amount provides loan type, loan rate and loan amount based on monthly_payment and state (eg. "US", "CA" etc.)
  """
  loan_amount(monthly_payment: Int, state: String): LoanAmount

  """
  loan monthly payments provides loan type, loan rate and monthly payments(eg.
  [5000, 6000]) based on loan_amount and state(eg. "US", "CA" etc.)
  """
  monthly_payment(loan_amounts: [Int], state: String): MonthlyPayments

  """
  Retrieve a list of home prices given a monthly payment budget
  use: monthly_payments (eg. [1500, 3000, 5000, ...] ), state (eg. "US", "CA",
  ...), veteran (eg. true/false - indicates veteran status qualifying for no
  downpayment and special rate)
  (Currently powers the Affordable Home Slider for use in home search to set max
  listing price, can also be used for a single affordable listing price given
  monthly payment)
  -- API Info: Mortgage Services API
  """
  max_affordable_home_by_monthly_payment(monthly_payments: [Int], state: String, veteran: Boolean): MaxAffordableHomeByMonthlyPaymentResult

  """
  Checks whether a home is eligible for Down Payment Assistance (DPA). You must provide at least the address and zipcode.
  --- API Info: Mortgage Services API
  """
  dpa_eligible(price: Int, address: String!, zip: String!, include_programs: Boolean = false, household: Int, income: Int, own: DPAEligibleOwnInput, occupation: [DPAEligibleOccupationInput]): DPAEligibleResponse

  """
  Get commute boundary for a given coordinate, time and transportation_type. 
  """
  get_commute_polygon(query: HomeSearchCriteria!): CommutePolygonResult

  """Get commute time for a given coordinate, and transportation_type. """
  get_commute_time(query: CommuteTimeRequest!): CommuteTimeResponse
  zoho(query: ZohoCriteria!): Zoho @deprecated(reason: "Schema will be replaced with seo npm package")
  snippets(query: ZohoCriteria!): Zoho @deprecated(reason: "Schema will be replaced with seo npm package")
  top_real_estate_markets(query: ZohoCriteria!): Zoho @deprecated(reason: "Schema will be replaced with seo npm package")

  """
  query to get the recommended properties based on user's recent activity
  """
  feeds(query: RecommendedSearchResultQuery!): RecommendedSearchResult!

  """estimated moving cost information """
  moving_cost(input: MovingCostInput!): MovingCost

  """
  query to get linked homes for a given home based on property_id
  linked homes returns a set of linked homes for a given property id 
  """
  linked_homes(query: linkedHomesQuery!): SearchHomeResult

  """
  query to return the list of playlists with video list
  News Video Playlists will return the Playlists data from MVS(Move Video
  Service tool) to construct the Video Details page in RDC Site
  """
  news_video_playlists(query: PlaylistsInput!): [Playlist]!

  """
  Return a list of playlist for videos hub page, Based on provided title OR Return all for without title in Query 
  """
  news_curated_playlist(query: NewsCuratedPlaylistInput): NewsCuratedPlaylist!

  """
  Return a list of articles for articles widget, Based on provided category 
  """
  vidora_latest_articles(query: LatestVidoraArticlesInput): [LatestVidoraArticles!]!

  """
  This query provides a reliable and organized way, for the Leads plaftorm, to
  find all lead contacts related to a New Homes property. 
  It provides all the contacts, their information and the source of each one. If
  the requested property is a Spec or Plan then the leads  
  information will be returned from the parent community level (Subdivision) 
  """
  new_homes_contacts(
    """Unique Home identifier also known as property id """
    property_id: ID
  ): NewHomesContacts

  """
  This query provides a reliable and organized way, for the Leads plaftorm, to
  find all lead contacts related to a Community Rental property. 
  It provides all the contacts, their information and the source of each one.
  """
  community_rentals_contacts(
    """Unique Community Rentals identifier also known as property id """
    property_id: ID
  ): CommunityRentalsContacts
  consumer: Consumer

  """
  validate if feedback link is still available
  for anonymous users who do not have an account but need to submit feedback 
  """
  feedback_link_validate(feedback_link_id: ID!): Boolean
  persisted_query(id: ID!): PersistedQuery

  """query to get real score for given property (listings) for the user_id"""
  real_score(query: RealScoreResultQuery!): RealScoreResult

  """Returns 14 exterior listing styles """
  listing_style_categories: ListingStyleCategories

  """Query to fetch the available loan brokers"""
  available_loan_brokers(
    """The input to fetch the available loan brokers"""
    input: AvailableLoanBrokersInput!
  ): [LoanBroker!]

  """
  Given array of RDC listing permalinks (min-length: 1, max-length: 10), returns
  array of transformed, tenant-specific listing hrefs and permalinks
  """
  transform_listing_urls(input: [TransformListingUrlsInput!]!): [TransformedListingUrls]

  """Spot offer data -- API Info: Spot Offer API """
  spot_offer(query: SpotOfferQuery!): SpotOffer

  """Get the for you feed recommendations based on the criteria passed"""
  for_you_feeds(query: ForYouSearchCriteria!): ForYouSearchResult

  """
  Get the for you feed recommendations based on the criteria passed, falling back to the provided city and state
  when domzip metadata for user is not available
  """
  for_you_feeds_location_fallback(query: ForYouSearchLocationFallbackCriteria!): ForYouSearchResult
}

"""
Range aggregation for a given field.
Accepted fields:
+ list_price
+ year_built (for_sale or ready_to_build status)
+ lot_sqft
+ sqft
+ hoa_fee (for_sale or ready_to_build status)
+ beds
+ baths
"""
input RangeAgg {
  """Listing price of the property."""
  list_price: ListPriceRangeAgg

  """Year built of the property."""
  year_built: YearBuiltRangeAgg

  """Lot sqft of the property."""
  lot_sqft: LotSqftRangeAgg

  """Sqft of the property."""
  sqft: SqftRangeAgg

  """HOA fee of the property."""
  hoa_fee: HoaFeeRangeAgg

  """Number of beds of the property."""
  beds: BedsRangeAgg

  """Number of baths of the property."""
  baths: BathsRangeAgg
}

"""mortgage rates by rate type"""
type Rate {
  """loan type"""
  loan_type: LoanType

  """interest rate"""
  rate: Float
}

"""interest rate + term for loan"""
input RateInput {
  """loan amortization term in years"""
  term: Int!

  """interest rate"""
  rate: Float!
}

type ReadyConnectMortgage {
  """Flag to indicate if we need to enable option for RCM """
  show_contact_a_lender: Boolean

  """
  one of our partner lenders whom we may need to send some lead information 
  """
  show_veterans_united: Boolean
}

"""Input to the query """
input RealScoreInput {
  listing_ids: [ID]
}

type RealScoreResult {
  real_scores: RealScores
}

"""Input to the query """
input RealScoreResultQuery {
  real_scores: RealScoreInput
}

type RealScores {
  listing_id_scores: [Score]
}

"""Input to recent_listings in query input  """
input RecentlyViewedInput {
  """id's of recently viewed properties """
  recently_viewed: [ID!]!
}

"""Flag for specific client to restrict geos in the result"""
enum RecommendedClientFlag {
  """flag for highrises.com client"""
  highrises
}

"""A recommended geo """
type RecommendedGeo {
  """Represents how well the geo matches the search criteria.   """
  relevance_score: Float

  """The geo being recommended. """
  geo: Geo
}

"""
If possible we will extend SearchHomeResult type(next to RecommendedHomeResult type) instead of RecommendedHomeResult type 
"""
type RecommendedHomeResult {
  type: ModuleType!
  results: [SearchHome!]!

  """
  Total number of properties in the current module, should always be present for every browse module, 0 if empty  
  """
  count: Int!

  """
  Total number of properties that this module can show, should always be present for every browse module, 0 is empty 
  """
  total: Int!

  """
  Time of the most recently updated property in ISO format, 'null' when not found 
  """
  last_update_date: DateTime!
  impression_token: JSON!

  """
  rank of the module, only present for a module when 'moduleType' is 'all' 
  """
  rank: Int!
}

"""Input passed to query to get recommended geos  """
input RecommendedQueryCriteria {
  """
  Scoping parameters - only recommend geos that fall within these filters. 
  Identifies the anchor point for recommendations. Geos near this geo satisfying the filters below will be recommended. 
  """
  anchor_slug_id: String

  """
  flag for specific client to restrict geos in the result. e.g. highrises.com
  """
  client_flag: RecommendedClientFlag

  """
  The type of geos to recommend. 
  + geo_search_type is required when preset is similarity or when preset is not passed 
  + geo_search_type is not allowed when preset is neighborhood_discovery 
  """
  geo_search_type: GeoType

  """min and max list price """
  list_price: FloatRange

  """total crime range index (valid 1 to 6). """
  total_crime: CrimeFilter

  """High school ratings (valid 1 to 10) """
  high_school_rating: SchoolRatingFilter

  """Middle school ratings (valid 1 to 10) """
  middle_school_rating: SchoolRatingFilter

  """Elementary school ratings (valid 1 to 10) """
  elementary_school_rating: SchoolRatingFilter

  """
  Neighborhood Discovery commute filter.  
  This filters to only neighborhoods that are within X minute of driving distance from a coordinate.  
  The commute time of the day is 990 minutes past midnight or 4:30 PM with traffic. 
  This is a subset of CommuteFilter type due to performance reasons. 
  """
  commute: NeighborhoodDiscoveryCommuteFilter

  """
  preset for geo_insights endpoint (similarity or neighborhood-discovery) 
  """
  preset: Preset

  """Limit how many geos to return. The max is 20 and the default is 20. """
  limit: Int
}

type RecommendedSearchResult {
  results: [RecommendedHomeResult!]!
}

"""Input to the query """
input RecommendedSearchResultQuery {
  """User id  """
  visitor_id: ID

  """Currently it's value is 'all'  """
  module_type: ModuleType!

  """Currently it's value is 'for_sale' """
  status: PropStatus!

  """Current date - 30 days will be the value  """
  last_visit_date: DateTime!
  limit: Int
  recent_listings: [RecentlyViewedInput!]!
}

type ReferralAgent {
  id: ID!
  broker: ReferralBroker!
  name: String
  first_name: String
  last_name: String
  photo: String
  email: String
  phone: String
}

type ReferralAssignment {
  id: ID!
  agent: ReferralAgent!
  active: Boolean!
  created_at: DateTime
  updated_at: DateTime
}

type ReferralBroker {
  id: ID!
  name: String
  email: String
  phone: String
}

type ReferralLead {
  id: ID!
  assignments: [ReferralAssignment!]!
  releases: [ReferralRelease!]
  loan_assignment: ReferralLoanAssignment
  created_at: DateTime
  updated_at: DateTime
}

type ReferralLender {
  id: ID!
  name: String
  email: String
  phone: String
  display_url: String
  logo_url: String
  url: String
  loan_officer: ReferralLoanOfficer
}

type ReferralLoanAssignment {
  id: ID!
  lender: ReferralLender
  pre_approval_status: String
}

type ReferralLoanOfficer {
  id: ID!
  name: String
  email: String
  phone: String
}

type ReferralRelease {
  prevent_agent_restore_at: DateTime
  released_at: DateTime
  release_type: ReleaseType
  release_reason: ReleaseReason
  assignment: ReferralAssignment
}

"""
RelatedHomesQuery to able to query different types of homes like similar homes etc., for the Home property,
"""
input RelatedHomesQuery {
  type: RelatedHomeType!

  """Request properties status."""
  status: HomeStatus

  """Request source type of the properties. (See MlsSource.type)"""
  source_type: String
  limit: Int
}

"""Supported related home types"""
enum RelatedHomeType {
  """similar homes type"""
  similar_homes
}

enum ReleaseReason {
  ALREADY_WORKING_WITH_AGENT
  AUTO_DUMP
  CLIENT_NOT_INTERESTED
  DONT_OFFER_PRODUCT
  DO_NOT_WANT
  DUPLICATE
  INAPPROPRIATE_BEHAVIOR
  LISTED_PROPERTY_NOT_AVAILABLE
  LOST_CONTACT
  MANUAL_DUMP
  NOT_FAMILIAR_WITH_AREA
  NO_TIME_FOR_CLIENT
  OFFENSIVE_HATE_SPEECH
  OFFENSIVE_RUDE_LANGUAGE
  OFFENSIVE_SEXUALLY_EXPLICIT
  OFFENSIVE_VIOLENCE
  OTHER
  POOR_CREDIT
  UNREALISTIC_CLIENT_EXPECTATIONS
  WANTS_LISTING_AGENT
}

enum ReleaseType {
  AGENT_RELEASE
  ANY
  REVOKE
}

type RentalsGoDirect {
  """
  Denotes whether this listing provider is prioritized as part of rentals go direct business logic.
  """
  is_prioritized: Boolean

  """Priority score for rentals listing provider"""
  priority_score: Int

  """Revenue per lead for a rentals listing provider."""
  revenue_per_lead: Float

  """Sponsored ad tier for rentals listing provider."""
  sponsored_ad_tier: Int
}

type RentToOwn {
  """
  Yearly rent to own prices. Array elements signify year1, year2, year3 etc. rent prices in order.
  """
  rent: [Int]

  """
  Yearly right to purchase prices. Array elements signify year1, year2, year3 etc. right to purchase prices in order.
  """
  right_to_purchase: [Int]

  """External provider name where the data source is fetched from."""
  provider: String!
}

"""Lead tour date"""
input RequestedTourData {
  """tour date entered by user to request a tour"""
  tour_date: DateTime

  """tour confirmation id provided by listing source"""
  tour_source_confirmation_id: String
}

input SavedPropertiesFilterCriteria {
  """pass in list of propertyIds """
  property_ids: [ID]

  """filter by status of saved properties """
  filters: [SavedPropertyFilterStatus]

  """exclude soft deleted properties, false by default """
  exclude_deleted: Boolean
}

type SavedPropertiesList {
  """saved/favorite properties """
  saved_properties: [SavedProperty!]!

  """
  total count of saved properties that satisfied the input filter conditions 
  """
  total_count: Int!
}

input SavedPropertiesSortingCriteria {
  """Fields to sort against """
  field: SavedPropertiesSortingField

  """Sort direction, asc/desc """
  direction: SortDirection
}

enum SavedPropertiesSortingField {
  """price of the property """
  price

  """date that the property is updated """
  updated_date
}

type SavedProperty {
  """id for saved property """
  id: ID!

  """property id for saved property """
  property_id: ID!

  """The timestamp when this listing was created in Move system """
  created_date: DateTime

  """The timestamp when this listing was updated in Move system """
  updated_date: DateTime

  """listing id for saved property """
  listing_id: ID

  """listing status for property, for_rent OR for_sale """
  listing_status: SavedPropertyStatus

  """
  soft delete indicator for saved properties. e.g. if deleted is true that means
  property was saved in the past and then unsaved by consumer. 
  """
  deleted: Boolean

  """property notes associated with the saved property """
  notes: [PropertyNoteDetail!]!

  """
  feedbacks for the saved property from anonymous user that is requested by the consumer 
  """
  feedbacks: FeedbackList

  """object that contains co-buyer information """
  saved_by: [Collaborator]
  home: SearchHome
}

input SavedPropertyCreateInput {
  """property id """
  property_id: ID!

  """listing id of property """
  listing_id: ID!

  """home status """
  status: SavedPropertyStatus!
}

input SavedPropertyDeleteInput {
  """saved property id(s) to be deleted """
  saved_ids: [ID!]!
}

"""Information about consumer's saved properties  """
type SavedPropertyDetails {
  """document ID of the saved property """
  id: ID
}

enum SavedPropertyFilterStatus {
  """limit to only properties for rent """
  for_rent

  """limit to only properties for sale """
  for_sale

  """limit to only new_community properties """
  new_community

  """limit to only pending properties """
  pending

  """limit to only sold properties """
  sold
}

"""
Supported property status as a input parameter when querying for saved properties 
"""
enum SavedPropertyStatus {
  for_rent
  for_sale
  new_community
}

type SavedSearch {
  id: ID

  """object that contains co-buyer information"""
  saved_by: [Collaborator]
  alert_frequency: SavedSearchAlertFrequency

  """client meta data."""
  client_meta: SavedSearchClientMetaResponse

  """push notificaton"""
  enable_push_notifications: Boolean
  user_query: SavedSearchUserQueryResponse

  """query_string (e.g. view=map)"""
  query_string: String

  """resource type (e.g. for_sale, for_rent)"""
  resource_type: String

  """title of saved search"""
  search_title: String

  """user note"""
  note: String
  created_date: DateTime
  updated_date: DateTime
}

enum SavedSearchAlertFrequency {
  daily
  none
  weekly
}

input SavedSearchById {
  """Saved search Id"""
  id: ID
}

input SavedSearchClientMeta {
  client_id: String

  """
  describes the location specified by points inside search query. e.g. "Collierville High School, Ridgway CC"
  """
  points_description: String

  """
  percolation points. e.g. "Mulan Bistro: 35.094123, -89.730164"
  """
  percolation_points: String

  """
  sorting used during search. e.g. "price_high"
  """
  sort: String

  """source_id of the client (e.g. findv2)"""
  source_id: String

  """
  description of user search. e.g. "listingSearchTypePointRadius"
  """
  user_search_context: String
}

type SavedSearchClientMetaResponse {
  client_id: String

  """
  describes the location specified by points inside search query. e.g. "Collierville High School, Ridgway CC"
  """
  points_description: String

  """
  percolation points. e.g. "Mulan Bistro: 35.094123, -89.730164"
  """
  percolation_points: String

  """
  sorting used during search. e.g. "price_high"
  """
  sort: String

  """source_id of the client (e.g. findv2)"""
  source_id: String

  """
  description of user search. e.g. "listingSearchTypePointRadius"
  """
  user_search_context: String
}

input SavedSearchCreateInput {
  alert_frequency: SavedSearchAlertFrequency

  """client meta data."""
  client_meta: SavedSearchClientMeta

  """push notificaton"""
  enable_push_notifications: Boolean
  user_query: SavedSearchUserQuery

  """query_string (e.g. view=map)"""
  query_string: String

  """resource type (e.g. for_sale, for_rent)"""
  resource_type: String
  search_title: String
  note: String
}

input SavedSearchCriteria {
  """source_id of the client (e.g. findv2)"""
  source_id: String
}

input SavedSearchDeleteInput {
  id: [ID!]!
}

"""
search payload to check for existence of a saved search with same search payload
"""
input SavedSearchExistsInput {
  """user query to perform a saved search"""
  user_query: SavedSearchUserQuery

  """source_id of the client (e.g. findv2, rdc). default value rdc."""
  source_id: String
}

type SavedSearchList {
  """list of saved searches"""
  saved_searches: [SavedSearch!]!

  """
  total count of saved searches that satisfied the input filter conditions
  """
  total: Int
}

input SavedSearchMergeInput {
  """
  Source Member ID of the saved searches that need to be merged with corresponding Destination Member ID
  """
  source_member_id: String

  """Destination Member ID of the resulting merged saved searches"""
  destination_member_id: String
}

input SavedSearchSearchParam {
  """
  Minimum home age. Use to update HomeSearchCriteria.year_built.max (today - age_min)
  when getting saved search.
  """
  age_min: Int

  """
  Maximum home age. Use to update HomeSearchCriteria.year_built.min (today - age_max)
  when getting saved search.
  """
  age_max: Int

  """area_type of the provided geo"""
  area_type: String

  """
  city_slug_id from parser.api call for area_type university, neighborhood, and street.
  Example: for area_type: university (e.g. harvard university) city_slug_id:
  "Cambridge_MA" and slug_id: "Harvard-University-00000001104469494001".
  For area_type: city (e.g. austin, tx) city_slug_id: undefined and slug_id: "Austin_TX"
  """
  city_slug_id: String

  """commute filter slug"""
  commute_address: String

  """
  Whether county name is needed to generate a unique location slug portion
  """
  county_needed_for_unique: Boolean

  """
  Number of days the property has been listed on. Use to update HomeSearchCriteria.list_date.min (today - days_on_market)
  when getting saved search.
  """
  days_on_market: Int

  """whether user has panned the map"""
  discovery_mode: Boolean

  """
  (e.g "game rd, Burbank, WA"), should be provided if homesearchCriteria contains only boundary info.
  """
  location: String

  """
  comma-separated string of location IDs which are used to construct the nearby
  search filter slug (e.g. Alum-Rock_CA,Monte-Sereno_CA,Boulder-Creek_CA)
  """
  location_ids: String

  """Map draw boundary"""
  draw_boundary: GeoJSON

  """
  map_viewport_url part for map view. E.g. 42.477256,-71.248854,42.244372,-71.019171,12. Last component in the url is zoom.
  """
  map_viewport_url: String

  """
  open_house checked in frontend. When true, during retrieval open_house_date will be updated 1 months from retrieval date
  """
  open_house: Boolean

  """
  price_reduced checked in frontend. When true, during retrieval
  price_reduced_date will be updated to last 30 days from retrieval date
  """
  price_reduced: Boolean

  """
  frontend showing only new listings (i.e. listings that added in last 14 days from retrieval date)
  """
  show_new_listings: Boolean

  """
  slug_id from parser.api call using geo info like "austin, tx" or "harvard university".
  """
  slug_id: String
}

input SavedSearchUpdateInput {
  id: ID!
  alert_frequency: SavedSearchAlertFrequency

  """title of saved search"""
  search_title: String

  """user notes"""
  note: String
}

input SavedSearchUserQuery {
  """
  Search query used to perform the saved search, formatted for as HomeSearchCriteria
  """
  search_query: HomeSearchCriteria

  """additional search parameters used in front end."""
  search_params: SavedSearchSearchParam
}

type SavedSearchUserQueryResponse {
  """
  Search query used to perform the saved search, formatted for as HomeSearchCriteria
  """
  search_query: HomeSearchCriteriaJSON

  """additional search parameters used in front end."""
  search_params: SearchParamResponse
}

type School {
  """A unique identifier for the school """
  id: ID!

  """The name of the school """
  name: String

  """Information about the school's district """
  district: SchoolDistrict

  """
  The education levels supported by the school 
  Can be one of elementary, middle, or high 
  """
  education_levels: [String]

  """
  Distance of the school from a given Home 
  Only non null for Home.assigned_search and Home.nearby_search 
  """
  distance_in_miles: Float

  """The ratio of students to teachers for the school """
  student_teacher_ratio: Float

  """The total number of students attending the school """
  student_count: Int

  """
  The type of the school 
  Can be public or private 
  """
  funding_type: String

  """The id of the school as assigned by Greatschools """
  greatschools_id: String

  """Information about the school's location """
  location: SchoolLocation

  """The school's id as assigned by the US Department of Education """
  nces_code: String

  """The school's rating as determined by the parent of students """
  parent_rating: Int

  """The number of reviews given for the school """
  review_count: Int

  """The school's Greatschool rating """
  rating: Int

  """
  The boundary of the schools attendance zone (catchment) 
  Students in homes within this boundary will likely be able to attend this school 
  """
  boundary: String

  """
  The school's latitude and longitude 
  The boundary of the school in JSON format 
  """
  boundary_json: GeoJSON
  coordinate: Coordinate

  """The school website's url """
  website: String

  """The school's phone number """
  phone: String

  """
  The grade levels supported by the schools 
  Each grade will be one of PK,K,1,2,3,4,5,6,7,8,9,10,11,12 
  """
  grades: [String]

  """
  When traversing from Home to schools, the school.assigned flag indicates if this school is assigned to the home. 
  """
  assigned: Boolean

  """
  This is the unique and human friendly string in a url to identify the school. 
  """
  slug: String @deprecated(reason: "slug is replaced by slug_id")

  """
  This is the unique and human friendly id following the new SRP url standard. 
  """
  slug_id: String

  """
  Information about the tests (e.g. id, year, subject, grade, number of students
  tested) and the scores (e.g. score, state average, district average) 
  """
  test_scores: TestScore

  """The school reviews """
  reviews: [SchoolReview]
}

type SchoolDistrict {
  """A unique identifier for the school district """
  id: ID!

  """The name of the school district """
  name: String

  """The number of students attending schools in the district """
  student_count: Int

  """The id of the school district as assigned by Greatschools """
  greatschools_id: String

  """Information about the school district's location """
  location: SchoolLocation

  """
  The id of the school district as assigned by the US Department of Education 
  """
  nces_code: String

  """The school district's rating """
  rating: Int

  """The number of schools in the district """
  school_count: Int

  """
  This is the unique and human friendly id following the new SRP url standard. 
  """
  slug_id: String

  """The district website's url """
  website: String

  """The district's phone number """
  phone: String

  """
  The grade levels supported by the district 
  Each grade will be one of PK,K,1,2,3,4,5,6,7,8,9,10,11,12 
  """
  grades: [String]

  """The latitude and longitude of the school district """
  coordinate: Coordinate

  """The rdc geo (gis) data of the school district """
  gis: Gis

  """The boundary of the school district """
  boundary_trimmed: GeoJSON

  """Schools in the school district """
  schools: [School] @deprecated(reason: "school is replaced by schools_in_district")

  """Find schools in the school district given the search criteria """
  schools_in_district(
    """filter parameters """
    query: SchoolsInDistrictCriteria

    """number of schools returned """
    limit: Int

    """offset 0-based index """
    offset: Int

    """the sorting criteria """
    sort: SchoolSortKey
  ): SchoolList
}

type SchoolDistrictComplete {
  """A unique identifier for the school district """
  id: ID!

  """The name of the school district """
  name: String

  """The number of students attending schools in the district """
  student_count: Int

  """The id of the school district as assigned by Greatschools """
  greatschools_id: String

  """Information about the school district's location """
  location: SchoolLocation

  """
  The id of the school district as assigned by the US Department of Education 
  """
  nces_code: String

  """The school district's rating """
  rating: Int

  """The latitude and longitude of the school district's headquarters """
  coordinate: Coordinate

  """The number of schools in the district """
  school_count: Int

  """
  This is the unique and human friendly id following the new SRP url standard. 
  """
  slug_id: String
}

"""a list of School District objects, with some meta data """
type SchoolDistrictList {
  total: Int
  pages: Int
  districts: [SchoolDistrictComplete]
}

input SchoolDistrictSearchCriteria {
  """Search by county name """
  county: String

  """Search by city name """
  city: String

  """Search by postal code """
  postal_code: String

  """Search by state code """
  state_code: String

  """Search by neigborhood name """
  neighborhood: String

  """
  A GeoJSON object. If it represents a bounding box than that will be used, 
  otherwise the bounding box enveloping the geometry will be used. 
  """
  bounding_box: GeoJSON
}

"""a list of School objects, with some meta data """
type SchoolList {
  total: Int
  pages: Int
  schools: [School]
}

type SchoolLocation {
  """The city where the school is located """
  city: String

  """The county where the school is located """
  county: String

  """The postal code where the school is located """
  postal_code: String

  """The state where the school is located """
  state: String

  """The street where the school is located """
  street: String

  """The parent slug_id for the schools city """
  city_slug_id: String
}

"""School rating filters """
input SchoolRatingFilter {
  """
  School rating lower bound.  Valid values are 1 to 10, with 10 being the best. 
  """
  min: Int
}

"""School review  """
type SchoolReview {
  """The rating that the reviewer gives  """
  quality: Int

  """The comments of the review """
  comments: String

  """The date of the review """
  posted: String

  """Who wrote the review """
  who: String

  """A unique identifier for the review """
  id: ID!
}

"""Payload sent to schools api intersect/within endpoint """
input SchoolSearchCriteria {
  """Search by county name """
  county: String

  """Search by city name """
  city: String

  """Search by postal code """
  postal_code: String

  """Search by state code """
  state_code: String

  """Search by neigborhood name """
  neighborhood: String

  """
  A GeoJSON object. If it represents a bounding box than that will be used, 
  otherwise the bounding box enveloping the geometry will be used. 
  """
  bounding_box: GeoJSON
  education_level: EducationLevel

  """Search by school district id """
  school_district_id: ID
}

input SchoolsInDistrictCriteria {
  """
  Filter by education types: Default [elementary, middle, high] (all public) 
  """
  education_level: EducationLevel
}

input SchoolsInGeoCriteria {
  """
  Filter by education types: Default [elementary, middle, high] (all public) 
  """
  education_levels: [EducationLevel]
}

"""Payload sent to schools api assigned/nearby endpoint """
input SchoolsInput {
  """Radius for nearby schools endpoint"""
  radius: Float

  """Number of schools per level to be returned by nearby schools endpoint"""
  limit_per_level: Int

  """
  Flag for including suppressed schools as assigned schools in assigned and nearby endpoints
  """
  include_suppressed_schools: Boolean
}

"""Enum for sort field used in schools api """
enum SchoolSortKey {
  """maps to 'name' in sort field for schools api"""
  nameAsc

  """maps to '-name' in sort field for schools api"""
  nameDesc

  """maps to 'rating' in sort field for schools api"""
  ratingAsc

  """maps to '-rating' in sort field for schools api"""
  ratingDesc

  """maps to 'student_count' in sort field for schools api"""
  studentCountAsc

  """maps to '-student_count' in sort field for schools api"""
  studentCountDesc
}

"""Representation of a school test object """
type SchoolTest {
  """A unique identifier for the test """
  id: ID!

  """The description of the test  """
  description: String
}

"""Representation of a school score object """
type SchoolTestScore {
  """A unique identifier for the score """
  id: ID!

  """The year when the score is received  """
  year: Int

  """The subject of the test  """
  subject: String

  """The grade tested  """
  grade: String

  """The number of total students tested """
  tested: Int

  """The score for the test """
  score: Float

  """The state average score for the test  """
  state_avg: Float

  """The district average score for the test """
  district_avg: Float
}

type Score {
  listing_id: String
  score: String
}

input SearchAPIAgentsMlsSet {
  id: String
  agent_id: String
  office_id: String
  type: String
}

input SearchAPIAggregate {
  """Parameters for performing aggregation"""
  field: [SearchAPIAggregateField]

  """Size of the aggregation."""
  size: Int

  """The offset by which to start in the results."""
  offset: Int

  """
  Perform a date range aggregation on a given field.
  Can be used with any other aggregation present.
  ```
  Example:
   date_range: {
        "list_date": {
            "ranges": [
                {
                    "from": "2023-10-14",
                    "to": "2023-10-20"
                }
            ]
        }
    }
  ```
  """
  date_range: DateRangeAgg

  """
  Perform a date histogram aggregation on a given field.
  Can be used with any other aggregation present.
  ```
  Example:
   date_histogram: {
     availability_date: {
       calendar_interval: "day"
     }
   }
  ```
  """
  date_histogram: DateHistogramAgg

  """
  Perform a histogram aggregation on a given field.
  Can be used with any other aggregation present.
  ```
  Example:
   histogram: {
     list_price: {
       interval: 100000
     }
   }
  ```
  """
  histogram: HistogramAgg

  """
  Perform a range aggregation on a given field.
  Can be used with any other aggregation present.
  ```
  Example:
   range: {
     list_price: {
       ranges: [
         {
           from: 100000,
           to: 200000
         }
       ]
     }
   }
  ```
  """
  range: RangeAgg

  """
  Perform a histogram segment aggregation on a given field.
  Multiplier is used to calculate bucket interval based on median value of field.
  Can be used with any other aggregation present.
  ```
  Example:
    histogram_segments: {
      field: list_price,
      multiplier: 2,
      buckets: 30
    }
  ```
  """
  histogram_segments: HistogramSegmentAggInput
}

enum SearchAPIAggregateField {
  """City."""
  city

  """County."""
  county

  """Exclude tags"""
  exclude_tags

  """Features which include flags, matterport, virtual tour and has tour."""
  features_aggregation

  """Type of pets."""
  pets

  """Postal Code."""
  postal_code

  """Property type."""
  prop_type

  """Source ID."""
  source_id

  """First letter of street."""
  street_first_letter

  """Full name of street."""
  street_full_name

  """Tags."""
  tags
}

input SearchAPIBucket {
  """Model to use for sorting."""
  sort: String

  """Rerank model to use."""
  rerank: String

  """Personalized search rerank model name"""
  psr_model: String

  """
  Is a boolean parameter which allows for search rerank to be extended to a larger result set (false by default)
  """
  page_extension: Boolean

  """parameters for sort models"""
  sort_options: SortOptions

  """
  Boost field for Search API, results will be ordered based on boosted fields.
  """
  boost: SearchAPIBucketBoost
}

input SearchAPIBucketBoost {
  """Freshness coefficient."""
  freshness_coef: Float

  """Photo coefficient."""
  photo_coef: Float

  """Boost based on block."""
  block: Int

  """Boost based on precision."""
  precision: Int

  """Photo constant."""
  photo_constant: Float

  """Boost based on photos."""
  photo_weight: Float

  """Pending constant."""
  pending_constant: Float

  """Boost based on pending listings."""
  pending_weight: Float

  """Boost based on land."""
  land_weight: Float

  """Land constant."""
  land_constant: Float

  """Boost based on farm."""
  farm_weight: Float

  """Farm constant."""
  farm_constant: Float
}

input SearchAPILocations {
  """Postal code of location."""
  postal_code: String

  """City of location."""
  city: String

  """State code of location."""
  state_code: String

  """County of location."""
  county: String
}

input SearchAPINearby {
  """Radius of search area."""
  radius: String

  """Coordinates of center of search."""
  coordinates: [Float]
}

input SearchAPINeighborhoods {
  """Name of neighborhood."""
  name: String

  """City neighborhood is located in."""
  city: String

  """State code of neighborhood."""
  state_code: String
}

input SearchAPISort {
  """Fields to search."""
  field: SearchSortField

  """Sort direction, asc/desc."""
  direction: SortDirection

  """Sort based on latitute/longitude."""
  criteria: TargetLocation
}

type SearchArea {
  city: String
  state_code: String
  county: String
}

type SearchAssumableLoan {
  """Display assumable loan eligibility"""
  is_eligible: Boolean
}

"""builders"""
type SearchBuilder {
  """Builder ID"""
  builder_id: ID

  """Builder name"""
  name: String

  """Source builder ID"""
  source_builder_id: String

  """Source ID"""
  source_id: String

  """URL for the logo picture"""
  logo: Href

  """URL for builder website"""
  href: String

  """Home type counts"""
  home_type_counts: JSON

  """Price range values for builder listings"""
  price_range: JSON

  """Builder set"""
  builder_set: String

  """
  All listings that belong to the builder (plan, spec_home, and communities)
  """
  records: [SearchBuilderRecord] @deprecated(reason: "records will be replaced by plan_records, spec_records, and community_records")

  """Community listings that belong to the builder"""
  communities: [SearchBuilderRecord]

  """Plan listings that belong to the builder"""
  plans: [SearchBuilderRecord]

  """Spec home listings that belong to the builder"""
  spec_homes: [SearchBuilderRecord]
}

"""
builders records (Communities, plans and spec homes that belong to the builder)
"""
type SearchBuilderRecord {
  """Property ID"""
  property_id: ID

  """Listing ID"""
  listing_id: ID

  """
  Parties advertising the Home for sale/rent. It could be an agent/office (for
  sale listings) or community/management/corporation (for rental properties).
  The source of data is coming from Relator.com Profile system and it might be
  different from source.agent information that is coming from MLS.
  """
  advertisers: [HomeAdvertiser]

  """previous_property_ids"""
  previous_property_ids: [ID]

  """Location"""
  location: SearchHomeLocation

  """Description"""
  description: SearchHomeDescription

  """Information about the source of the data."""
  source: MlsSource

  """Max list price"""
  list_price_max: Float

  """Min list price"""
  list_price_min: Float

  """The current price of the home."""
  list_price: Float

  """Builder information"""
  builder: HomeBuilder

  """Home type for builder record (plan, spec_home or community)"""
  home_type: String

  """Home flags is_coming_soon, is_new_listing ... etc"""
  flags: HomeFlags

  """
  Primary Home photo/image (first photo from what is available under photos)
  """
  primary_photo(
    """
    Photos should use https schema if set to true -- optional, default to false
    """
    https: Boolean

    """size of the photo to be returned -- optional"""
    size: SizeStrategy
  ): HomePhoto

  """Search by one or multiple home tags"""
  tags: [String]

  """
  The 'permalink' portion of the full property url - also known as address slug 
  """
  permalink: String
}

type SearchCommunityMetrics {
  """
  Number of leads generated across this community in the current calendar month
  """
  leads_month_to_date: Int

  """Count of active listings in this community"""
  active_listing_count: Int

  """Price per lead for this community"""
  community_price_per_lead: Float
}

"""Floorplans for community rentals, replacing deprecated units field."""
type SearchCommunityRentalFloorplan {
  """Description of floorplan, beds/baths/type/etc."""
  floorplan_description: SearchHomeFloorplanDescription

  """Current price of the building floorplan."""
  list_price: Float

  """Availability date of the building floorplan."""
  availability: HomeAvailability

  """Floorplan available images/photos."""
  photos(
    """limit the number of photos returned -- optional."""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean
  ): [HomePhoto]

  """ID associated with floorplan"""
  floorplan_id: String

  """Listing of floorplan units with each unit_description/beds/baths..."""
  floorplan_units: [SearchFloorplanUnits]
}

"""SearchContext parameters"""
type SearchContext {
  """
  Service that running the async search (e.g visual_search_api or elasticsearch)
  """
  service: String!

  """status of the service"""
  status: String!

  """status of the ML models api"""
  ml_models_api_status: String

  """Asynchronous ID of the service"""
  async_id: String

  """Request ID that is same across all the async request set"""
  async_request_id: String

  """Start time of the first request in async request set"""
  start_time: Float

  """Initial free text search payload used by service"""
  free_text_search: FreeTextSearch
}

"""SearchContext input parameters"""
input SearchContextInput {
  """
  Service that running the async search (e.g visual_search_api or elasticsearch)
  """
  service: String!

  """status of the service"""
  status: String!

  """status of the ML models api"""
  ml_models_api_status: String

  """Asynchronous ID of the service"""
  async_id: String

  """Request ID that is same across all the async request set"""
  async_request_id: String!

  """Start time of the first request in async request set"""
  start_time: Float!

  """Initial free text search payload used by service"""
  free_text_search: FreeTextSearchInput
}

input SearchFilters {
  days_on_market: Int
  page_type: String
  prop_type: [String]
  features: [String]
  show_listings: [String]
  radius: Int
  pending: Boolean
  contingent: Boolean
  foreclosure: Boolean
  new_construction: Boolean
  age: FilterRange
  beds: FilterRange
  baths: FloatRange
  price: FloatRange
  sqft: FloatRange
  lot_sqft: FloatRange
  locations: [Nearbysearch]
  keywords: [String]
}

type SearchFloorplanUnits {
  """ID associated with unit."""
  unit_id: ID
}

input SearchGeoGridAggregate {
  """Precision of cluster."""
  precision: Int

  """When provided, provides cluster of search results."""
  max_clusters: Int
}

type SearchHome {
  """Unique identifier of a listing selected to present this home."""
  listing_id: ID

  """Unique identifier of a listing."""
  listing_key: String

  """Unique Home identifier also known as property ID."""
  property_id: ID!

  """Number of New Home plans for subdivision"""
  plan_count: Int

  """Number of New Home Spec for subdivision"""
  spec_count: Int

  """Number of floor plans for community rental"""
  community_rental_floor_plan_count: Int

  """Source level timestamp"""
  refresh_timestamp: DateTime

  """Denotes whether this is a primary listing or not."""
  primary: Boolean

  """
  Flag used to mark listings that may not be the primary listing for a property
  but have unique characteristics such that users may be interested in them.
  """
  unique: Boolean

  """Description of home, beds/baths/type/etc."""
  description: SearchHomeDescription

  """Categorized listing attributes"""
  details: [HomeDetails]

  """Location of home."""
  location: SearchHomeLocation

  """The current price of the home."""
  list_price: Float

  """The calculated field values at search time."""
  runtime: SearchRuntime

  """The current price per sqft of the home."""
  price_per_sqft: Float

  """previous_property_ids + property_id."""
  previous_property_ids: [ID]

  """Information about the source of the data."""
  source: MlsSource

  """String value containing Application Link URL"""
  application_url: String

  """
  Parties advertising the Home for sale/rent. It could be an agent/office (for
  sale listings) or community/management/corporation (for rental properties).
  The source of data is coming from Relator.com Profile system and it might be
  different from source.agent information that is coming from MLS.
  """
  advertisers: [HomeAdvertiser]

  """MLS standardized listing status."""
  mls_status: String

  """Search tags used for advanced feature search."""
  tags: [String]

  """Search by home flags is_coming_soonis_new_listing/etc."""
  flags: HomeFlags

  """List of open house events. Only current/future events are exposed."""
  open_houses: [HomeOpenHouse]

  """A list of other listings available for this home."""
  other_listings: HomeOtherListings

  """Home available image/photo count."""
  photo_count: Int

  """Home available images/photos."""
  photos(
    """limit the number of photos returned -- optional."""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean

    """size of the photo to be returned -- optional."""
    size: SizeStrategy
  ): [HomePhoto]

  """
  Primary Home photo/image (first photo from what is available under photos).
  """
  primary_photo(
    """
    Photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean

    """size of the photo to be returned -- optional."""
    size: SizeStrategy
  ): HomePhoto

  """Home available images/photos with ability to get only required images."""
  images(
    """Limit the number of photos returned -- optional."""
    limit: Int

    """
    Photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean

    """What types of images to return --optional, defaults to all."""
    type: ImageType
  ): HomeImages

  """Date home price was reduced."""
  price_reduced_date: DateTime

  """Amount home price was reduced by."""
  price_reduced_amount: Float

  """Product information from the Products API."""
  products: ProductSummary

  """List of available promotions for New Home data."""
  promotions: [HomePromotions]

  """
  Rentals go direct fields, used for sorting by ad tier/revenue per lead for a listing provider.
  """
  rentals_go_direct: RentalsGoDirect

  """
  Green Program information. It comes from New Homes data. Null value means no
  specific green program associated with New Home Community from the data provider.
  """
  ecofriendly: [HomeEcoFriendly]

  """A list of applicable suppression rules."""
  suppression_flags: JSON

  """Last time the price has changed."""
  last_price_change_date: DateTime

  """Last price change amount - could be positive or negative."""
  last_price_change_amount: Float

  """Last time the status of the listing has changed."""
  last_status_change_date: DateTime

  """Last time the home was updated."""
  last_update_date: DateTime

  """Last sold price for this Home."""
  last_sold_price: Float

  """Last time the Home was sold."""
  last_sold_date: DateTime

  """The date listing became pending as indicated by flags.is_pending."""
  pending_date: DateTime

  """Move in date for the home."""
  move_in_date: DateTime

  """Date the home was indexed."""
  when_indexed: DateTime

  """Coming soon to market date for the listing."""
  coming_soon_date: String

  """Home Owners Association."""
  hoa: HomeHOA

  """Complete URL as exposed on RDC."""
  href: String

  """The pet policy of the home."""
  pet_policy: HomePetPolicy

  """
  Listing status:
  + for_sale
  + for_rent
  + sold
  + off_market
  + active (New Home Subdivisions)
  + other (if none of the above conditions were met)
  """
  status: String

  """The time this Home entered Move system."""
  list_date: DateTime

  """
  A link to a parent community. Could be one of the following:
  + NewHome subdivision - if current Home is NewHome plan
  + NewHome subdivision - if current Home is MLS listing linked to NewHome spec
  + Building assembly - if current Home is a unit inside the building
  """
  community: Home

  """Search by virtual tour."""
  virtual_tours: [VirtualTour]

  """Videos for the home."""
  videos: [Video]

  """Indicates presence of matterport data."""
  matterport: Boolean

  """
  Information about tax record as provided by Tax Assessor data from 3rd party
  Public Record vendor. – API Info: Homes API. See tax_history for the detailed
  data from tax_record.
  """
  tax_record: TaxRecord

  """
  Unit availability. Only available for results exposed under "Home.units" node when Home is a rental community.
  """
  availability: HomeAvailability

  """
  String representation of a deposit description. Only available for results
  exposed under "Home.units" node when Home is a rental community.
  """
  deposit_hint: String

  """
  Deposit amount. If null, deposit_hint should contain additional info. Only
  available for results exposed under "Home.units" node when Home is a rental community.
  """
  deposit: Int

  """
  Floor plan identifier as provided by the source system - DataManager. Only
  available for results exposed under "Home.units" node when Home is a rental community.
  """
  plan_id: ID

  """
  String representation of a price description. Only available for results
  exposed under "Home.units" node when Home is a rental community.
  """
  list_price_hint: String

  """
  Retrieve the Matterport media associsated with the specified unit. Applies to
  floor plans provided by Community Rental listings only.
  """
  matterports: [HomeMatterport]

  """
  Click Token is an object that contains the impression id along with the
  property and click data to send to tracking upon user clicks in the UI.
  """
  click_token: JSON

  """
  Resolves to phrases extracted from descriptions for homes with special features.
  """
  highlights(highlight_type: HighlightType!, limit: Int): [PropertyHighlight]

  """
  Fields that were suppressed from Home. Available to authorized clients only.
  """
  suppressed_data: JSON

  """Style category tags used for advanced feature search."""
  style_category_tags: SearchHomeStyleCategoryTags

  """List of building units that belong to this home."""
  units: [SearchHomeUnit]

  """Field to expose community rental floorplans"""
  community_rental_floorplans: [SearchCommunityRentalFloorplan]

  """
  Community metrics, active_listing_count, leads_month_to_date, community_price_per_lead
  """
  community_metrics: SearchCommunityMetrics

  """Rent to own prices for listings."""
  rent_to_own: [RentToOwn]

  """Display if home has specials"""
  has_specials: Boolean

  """
  Applied search promotions: will return currently applied list of promotions to
  search result home. Will be populated only for promotional query
  """
  search_promotions: [SearchPromotion]

  """Mortgage params: will return data related to monthly payment"""
  mortgage_params: MortgageParams

  """Management office for a listing."""
  advertiser_management_office: String

  """Display mortgage"""
  mortgage: SearchMortgage

  """text-to-image embeddings search result"""
  embedding_results: EmbeddingResults

  """
  The 'permalink' portion of the full property url - also known as address slug 
  """
  permalink: String

  """
  (DEPRECATED) Number of days listing is active on market. Provided directly by
  MLS. This field is only available for `Prosoft`
  """
  days_on_market: Int @deprecated(reason: "This field was only supported for prosoft, who is no longer a client for home_search")

  """
  Estimate is Automated Valuation Model. Source - AVM API.
  Currently, this will return valuation specific to corelogic vendor only.
  This will be deprecated in future and will be replaced by current_estimates.
  current_estimates will return estimates for all the vendors along with best home value.
  """
  estimate: LatestEstimate

  """
  Estimate is Automated Valuation Model. Source - AVM API.
  current_estimates will return estimates for all the vendors along with best home value.
  """
  current_estimates: [LatestEstimate]
  property_history: [HomePropertyHistory]
  list_price_max: Float
  list_price_min: Float
  builder: HomeBuilder

  """app-friendly abstraction of products + advertisers + mls source data """
  consumer_advertisers: [ConsumerAdvertiser]

  """Branding information for SRP specific to RDC web/mobile."""
  branding: [Branding]

  """lead_attributes information for SRP specific to RDC web/mobile. """
  lead_attributes(caller: CallerPlatform): LeadAttributes

  """
  Information about the home from user's account (Caller must supply user account id using http header "x-rdc-member-id") 
  """
  user_data: SearchHomeUserData

  """Promotion information SRP specific to RDC web/mobile. """
  seller_promotion: SellerPromotion
  comparable_data: HomeComparableData
}

type SearchHomeAddress {
  """City of home."""
  city: String

  """Country home is located in."""
  country: String

  """Bus line associated with home."""
  line: String

  """Postal code of home."""
  postal_code: String

  """State code of home."""
  state_code: String

  """State home is lcoated in."""
  state: String
  street_direction: String

  """Name of street home is located on."""
  street_name: String

  """Street number home is located on."""
  street_number: String

  """Address which pertains to postal delivery."""
  street_post_direction: String

  """Suffix of street home is located on."""
  street_suffix: String

  """Unit home is located in."""
  unit: String

  """Coordinate of home."""
  coordinate: Coordinate
}

type SearchHomeDescription {
  """Number of bathrooms."""
  baths: Float

  """Number of full bathrooms."""
  baths_full: Int

  """Number of half bathrooms."""
  baths_half: Int

  """Number of 1/4 bathrooms."""
  baths_1qtr: Int

  """Number of 3/4 bathrooms."""
  baths_3qtr: Int

  """
  Total number of full bathrooms calculated from baths_full and baths_3qtr fields.
  """
  baths_full_calc: Int

  """Total number of partial bathrooms calculated from baths_half field."""
  baths_partial_calc: Int

  """
  Total number of baths_full + baths_3qtr + 0.5 if there is a single baths_half + "+"" if there is more than one baths_half
  """
  baths_consolidated: String

  """Number of beds."""
  beds: Int

  """Lot square footage"""
  lot_sqft: Float

  """Square footage of the Home"""
  sqft: Float

  """
  Listing description - retrieved from Homes API in a separate call (will have
  performance impact depending how many search results are requested)
  """
  text: String

  """
  Standardized property type. Available values:
  + apartment
  + building
  + commercial
  + condo_townhome
  + condo_townhome_rowhome_coop
  + condos
  + coop
  + duplex_triplex
  + farm
  + investment
  + land
  + mobile
  + multi_family
  + rental
  + single_family
  + townhomes
  """
  type: String

  """
  Standardized property sub-type. Available values:
  + condo
  + condop
  + co-op
  + townhouse
  """
  sub_type: String

  """Sold price of home."""
  sold_price: Float

  """Sold date of home."""
  sold_date: DateTime

  """Number of stories in home."""
  stories: Int

  """Year home was built."""
  year_built: Int

  """Number of garage spaces"""
  garage: Int

  """Rental community/management/corporation name"""
  name: String

  """Home styles"""
  styles: [String]

  """Unit number associated with complex"""
  unit_number: String

  """Vacancy of the unit"""
  vacancy_class: String

  """Floor number for Unit"""
  floor_number: String
  baths_min: Float
  baths_max: Float
  beds_max: Int
  beds_min: Int
  garage_min: Int
  garage_max: Int
  sqft_max: Float
  sqft_min: Float
  plan_types: [String]
}

"""Description of floorplan, beds/baths/etc."""
type SearchHomeFloorplanDescription {
  """Number of bathrooms."""
  baths: Float

  """Number of half bathrooms."""
  baths_half: Int

  """Number of bedrooms."""
  beds: Int

  """Name of floorplan."""
  name: String

  """Square footage of floorplan."""
  sqft: Float

  """Listing description for floorplan"""
  text: String

  """Type of floorplan"""
  type: String
}

type SearchHomeLocation {
  """
  A display address for this Home. Created by overlaying agent entered address
  parts on top of standardized address (location->property_address). Only used
  when a listing is active.
  """
  address: SearchHomeAddress

  """One or multiple search areas associated with home."""
  search_areas: [SearchArea]

  """County associated with home."""
  county: HomeCounty

  """One or multiple neighborhoods associated with home."""
  neighborhoods: [Neighborhood]

  """
  Google street view url link - used by clients if there are no images of a property available 
  """
  street_view_url(input: StreetViewUrlInput): String

  """
  Google street view metadata url link - used by clients for getting metadata from google to initialize dynamic street view 
  """
  street_view_metadata_url(input: StreetViewUrlInput): String
}

type SearchHomeResult {
  """Amount of records returned in this query, affected by limit."""
  count: Int

  """Total number of documents matching criteria, not effected by limit."""
  total: Int

  """Results of search, one or more SearchHome objects."""
  results: [SearchHome]

  """Aggregated output from search.api"""
  aggregation: JSON

  """The boundary of the search home result respresented by a geo object."""
  boundary: GeoJSON

  """
  Impression Token is an object containing the details about the algorithm and
  model used to generate the properties in the module that would be passed in
  tracking call in the UI.
  """
  impression_token: JSON

  """Total number of costars."""
  costar_counts: CostarCounts

  """Total number of prioritized counts."""
  prioritized_counts: PrioritizedCounts

  """Promotion query next page data structure"""
  search_promotion: SearchPromotionNextPagePayload

  """mortgage param values"""
  mortgage_params: MortgageParams

  """free-text-search params"""
  free_text_search: FreeTextSearch

  """search_context params"""
  search_context: SearchContext

  """
  returns linking modules depending on the geo_type resolved by geo_parser.  
  returns state level reults when the query has state_code and search_location is missing.   
  """
  seo_linking_modules(type: SeoModuleType!, limit: Int): SeoLinkingModuleResponse
}

type SearchHomeStyleCategoryTags {
  """Exterior style tags."""
  exterior: [String]
}

type SearchHomeUnit {
  """Description of the building unit, beds/baths/type/etc."""
  description: SearchHomeDescription

  """Current price of the building unit."""
  list_price: Float

  """Availability date of the building unit."""
  availability: HomeAvailability

  """Unit available images/photos."""
  photos(
    """limit the number of photos returned -- optional."""
    limit: Int

    """
    photos should use https schema if set to true -- optional, default to false.
    """
    https: Boolean
  ): [HomePhoto]

  """
  Standardized rental type. Available values:
  + Unit
  + Condo
  + Apt
  """
  type: String

  """Source ID."""
  source_id: ID

  """ID associated with unit."""
  unit_id: ID
}

"""Information about consumer's data  """
type SearchHomeUserData {
  """
  Information about saved property when given property is saved by provided memberId 
  """
  saved_property: SavedPropertyDetails
}

"""
Search location based on free text address string, buffer in miles (optional) and boundary (optional)
"""
input SearchLocation {
  """
  A free text string that will be parsed and sent to underlying API for search
  Represents any of these locations:
  + address (123 Main St, Seattle, WA, 92281)
  + city (Seattle WA or Seattle, WA)
  + duplicate city with county name (Salem, Saline, AR)
  + duplicate city without county name (Salem, AR). Here county will be taken from top result of Parser API
  + state (WA or Washington)
  + neighborhood (Manhattan, New York City, NY)
  + county (Orange County, CA)
  + postal code (90210)
  + school (Beverly Hills High, CA)
  + school district (Los Angeles School District, CA)
  """
  location: String!

  """
  A value representing how much to expand the location/boundary when
  doing a search (expressed in miles) buffer, limited up to 50 miles
  """
  buffer: Float

  """
  Additional boundary to limit search results too.
  Useful when viewing just a portion of a data belonging to specified location on a map.
  
  
  Example: Polygon
  ```
     viewport_boundary: {
        type: "Polygon",
        coordinates: [[
           [-122.31585502624512, 47.64879512494596],
           [-122.29268074035646, 47.64879512494596],
           [-122.29268074035646, 47.66524284745839],
           [-122.31585502624512, 47.66524284745839],
           [-122.31585502624512, 47.64879512494596]
        ]]}
  ```
  
  Example: Envelope
  ```
     viewport_boundary: {
        type: "envelope",
        coordinates: [
           [-122.31585502624512, 47.64879512494596],
           [-122.29268074035646, 47.66524284745839]
        ]}
  ```
  """
  viewport_boundary: GeoJSON
}

type SearchMortgage {
  """Display assumable loan"""
  assumable_loan: SearchAssumableLoan
}

type SearchParamResponse {
  """Minimum home age"""
  age_min: Int

  """Maximum home age"""
  age_max: Int

  """area_type of the provided geo"""
  area_type: String
  city: String

  """
  city slug_id for non city, state geo type (e.g. university, neighborhood)
  """
  city_slug_id: String

  """commute filter slug"""
  commute_address: String

  """
  Whether county name is needed to generate a unique location slug portion
  """
  county_needed_for_unique: Boolean

  """Number of days the property has been listed on"""
  days_on_market: Int

  """whether user has panned the map"""
  discovery_mode: Boolean

  """Location string provided by client."""
  location: String

  """
  comma-separated string of location IDs which are used to construct the nearby
  search filter slug (e.g. Alum-Rock_CA,Monte-Sereno_CA,Boulder-Creek_CA)
  """
  location_ids: String

  """Map draw boundary"""
  draw_boundary: GeoJSON

  """map_viewport_url part for map view"""
  map_viewport_url: String

  """
  open_house checked in frontend. When true, during retrieval open_house_date will be updated 1 months from retrieval date
  """
  open_house: Boolean

  """
  price_reduced checked in frontend. When true, during retrieval
  price_reduced_date will be updated to last 30 days from retrieval date
  """
  price_reduced: Boolean

  """
  frontend showing only new listings (i.e. listings that added in last 14 days from retrieval date)
  """
  show_new_listings: Boolean
  state_code: String

  """
  Slug ID such as "Seattle_WA" or "California"
  """
  slug_id: String

  """school_id, which is used by mobile team to get details of a school"""
  school_id: String
}

"""
Promoted property structure used for returning data about what property was
promoted in page and meta information on document origin
"""
type SearchPromotedProperty {
  """Unique Home identifier also known as property ID."""
  id: ID!

  """Asset id associated with promotion, used for monetization"""
  asset_id: String

  """
  From other page flag indicates if promoted result was moved into page from other pages. Used for offset
  """
  from_other_page: Boolean!
}

"""Promoted property structure input structure"""
input SearchPromotedPropertyInput {
  """Unique Home identifier also known as property ID."""
  id: ID!

  """Asset id associated with promotion, used for monetization"""
  asset_id: String

  """
  From other page flag indicates if promoted result was moved into page from other pages. Used for offset
  """
  from_other_page: Boolean!
}

"""Search promotion applied to SearchHome document"""
type SearchPromotion {
  """Promotion name"""
  name: String

  """Asset id associated with promotion, used for monetization"""
  asset_id: String
}

"""Search promotion input parameters"""
input SearchPromotionInput {
  """Promotion name"""
  name: String

  """List of promotion names to backfill multiple promotions"""
  names: [String]

  """
  Slots list used to place promoted results into fixed locaton in results list
  """
  slots: [Int]

  """Promoted property"""
  promoted_properties: [[SearchPromotedPropertyInput]]
}

"""
Search promotions next page payload data structure. Used by clients for subsequent page calls
"""
type SearchPromotionNextPagePayload {
  """Promotion name"""
  name: String

  """List of promotion names to backfill multiple promotions"""
  names: [String]

  """
  Slots list used to place promoted results into fixed locaton in results list. Slot 1 == first element on result list
  """
  slots: [Int]

  """Promoted property"""
  promoted_properties: [[SearchPromotedProperty]]
}

type SearchRuntime {
  """
  The calculated monthly payment of the home. Combines property tax/insurance,
  mortgage principal/interest/insurance, hoa fee
  """
  monthly_payment: Int
}

enum SearchSortField {
  """The number of active listings for community"""
  active_listing_count

  """Availability date."""
  availability_date

  """Number of baths."""
  baths

  """Number of beds."""
  beds

  """Total number of clicks in the past 14 days"""
  clicks_total_past_14_days

  """Price per lead for this community."""
  community_price_per_lead

  """State of home."""
  completeness

  """Date of contract."""
  contract_date

  """Home phrase score."""
  home_phrases_score

  """Home type."""
  home_type

  """Date of last status change."""
  last_status_change_date

  """Date of last update."""
  last_update_date

  """Date property was listed."""
  list_date

  """Price property was listed at."""
  list_price

  """Listing ID of property."""
  listing_id

  """Square footage."""
  lot_sqft

  """Move in date."""
  move_in_date

  """
  New construction sort tier, plans, specs without year_built, and then all other listings.
  """
  nhc_year_built_sort_tier

  """Date of open house."""
  open_house_date

  """Pending date of property."""
  pending_date

  """Number of photos relating to property."""
  photo_count

  """Date property price was reduced."""
  price_reduced_date

  """Priority score for a listing provider, for rentals go direct."""
  priority_score

  """Type of property."""
  prop_type

  """Revenue per lead for a listing provider, for rentals go direct."""
  revenue_per_lead

  """Date property was sold."""
  sold_date

  """sold_date search without any suppression applied, for FIND user only."""
  sold_date_unsuppressed

  """Price property was sold at."""
  sold_price

  """sold_price search without any suppression applied, for FIND user only."""
  sold_price_unsuppressed

  """Spnsored ad tier for a listing provider, for rentals go direct."""
  sponsored_ad_tier

  """Square footage."""
  sqft

  """Target location."""
  target_location

  """Date property was indexed."""
  when_indexed

  """Year propery was build."""
  year_built
}

enum SearchSortType {
  """Relevant search type."""
  relevant
}

"""Search terms recognized by model from free_text_filter"""
type SearchTerm {
  """name of the term recognized by model"""
  term: String

  """type of terms (e.g. [text, visual])"""
  type: [String]
}

type SearchTermResult {
  """Search term"""
  search_term: String

  """matching photos for search_term, sorted by matching score"""
  photos: [PhotoInfo]
}

"""sell by date value and enumerated value from picklist """
input SellByDate {
  """"3_to_6_months", "6_months_to_1_year", "longer_than_1_year", "unsure" """
  enum_value: String

  """
  "Now to 3 months", "3 to 6 months", "6 months to 1 year", "Longer than 1 year", "Not sure when to sell" 
  """
  value: String
}

"""RDC listing promotion """
type SellerPromotion {
  """flag if a listing is promoted """
  is_promoted: Boolean

  """flag if products node contains listing_iq products """
  is_listing_iq: Boolean

  """flag if this is a new home and it is promoted """
  is_new_construction_promoted: Boolean @deprecated(reason: "currently this feature is on hold, and there is plan to use this feature in near future.")
}

type SeoLinkingModuleResponse {
  title: String
  linking_module: [LinkingModuleType]
  type: SeoModuleType!
}

enum SeoModuleType {
  """
  pop searches fetched from ZOHO API. These searches are generated based on ML algo 
  """
  popular_searches

  """property types with inventory for every city geo """
  top_property_types

  """top real estates or top cities fetched from ZOHO API. """
  top_real_estate
}

"""Input for share_property mutation """
input SharePropertyInput {
  """Property ID for property search """
  property_id: ID!

  """Listing ID to include in property search """
  listing_id: ID

  """Listing status to include in property search """
  status: HomeStatus

  """Email of the sender """
  sender_email: String!

  """Name of the sender """
  sender_name: String!

  """Custom message in share email (optional) """
  message: String

  """Array of recipient email addresses """
  send_to: [String!]!

  """ID of feedback link for requesting feedback (share if not included) """
  feedback_link: ID

  """
  SRP and LDP will send a different value of cid to identify the property type
  """
  cid: String

  """
  Visitor ID for the following scenarios: share listing, community share, and rental share search 
  """
  visitor_id: ID
}

"""Input for share_rental_search mutation """
input ShareRentalSearchInput {
  """Email of the sender """
  sender_email: String!

  """Name of the sender """
  sender_name: String!

  """Custom message in share email"""
  message: String!

  """Array of recipient email addresses """
  send_to: [String!]!

  """SRP URL"""
  srp_url: String!

  """
  Visitor ID for the following scenarios: share listing, community share, and rental share search 
  """
  visitor_id: ID
}

enum Silo {
  detail_page
  home_page
  landing_page
  search_result_page
}

"""
a geographical coordinate (latitude and longitude), without accuracy information 
"""
type SimpleCoordinate {
  """
  latitude: the angular distance of a place north or south of the earth's
  equator, or of a celestial object north or south of the celestial equator,
  usually expressed in degrees and minutes. 
  """
  lat: Float

  """
  longitude: is the angular distance, in degrees, minutes, and seconds, of a
  point east or west of the Prime (Greenwich) Meridian. Lines of longitude are
  often referred to as meridians 
  """
  lon: Float
}

"""The possible size strategies for photos"""
enum SizeStrategy {
  AGENT_PROFILE
  FIND_AGENT_DIMENSIONS_LDP
  FIND_AGENT_DIMENSIONS_SRP
  FIND_COMP_HOMES_SMALL
  FIND_IMG_DIMENSIONS
  FIND_IMG_DIMENSIONS_LDP
  FIND_IMG_DIMENSIONS_SRP
  FIND_IMG_DIMENSIONS_SRP_LARGE
  FIND_LARGE
  FIND_LDP_THUMBNAIL
  FIND_MEDIUM
  FIND_MOBILE_LDP_HERO
  FIND_MODAL_GALLERY
  FIND_PDP_TIMELINE
  FIND_PDP_TIMELINE_SMALL
  FIND_SMALL
  FIND_THUMBNAIL
  MAX
  M_WEB_LDP_CAROUSEL
  M_WEB_LDP_FULL_SCREEN
  M_WEB_LDP_HERO
  M_WEB_PDP_CAROUSEL
  M_WEB_PDP_FULL_SCREEN
  M_WEB_PDP_HERO
  M_WEB_SRP_CARD
  SMALL
  UMA_CAROUSEL_L
  UMA_CAROUSEL_M
  UMA_CAROUSEL_S
  WEB_AGENT_HEADER_BANNER
  WEB_CDP_SLIDE
  WEB_LDP_CAROUSEL
  WEB_LDP_FULL_SCREEN
  WEB_LDP_HERO
  WEB_LDP_LEAD_FOOTER
  WEB_LDP_RENTAL_FP
  WEB_NH_VT
  WEB_OFFICE_LEAD_FOOTER
  WEB_PDP_CAROUSEL
  WEB_PDP_FULL_SCREEN
  WEB_PDP_HERO
  WEB_PDP_LEAD_FOOTER
  WEB_SRP_CARD
}

type Snippets {
  title: String
  body: Body
}

enum SortDirection {
  """Ascending order."""
  asc

  """Descending order."""
  desc
}

input SortOptions {
  """
  Number of total costar results from previous query (used for pagination). Required field for rental sort models
  """
  costar_total: Int

  """
  Number of non total costar results from previous query (used for pagination). Required field for rental sort models
  """
  non_costar_total: Int

  """
  Number of total priortized results from previous query (used for pagination). Required field for rental sort models
  """
  prioritized_total: Int

  """
  Number of non total priortized results from previous query (used for pagination). Required field for rental sort models
  """
  non_prioritized_total: Int

  """Name of the model to use for business logic sort"""
  variation: String
}

input SourceBuilderSet {
  """source_builder_id example: '32425'"""
  source_builder_id: String

  """MLS abbreviation of the source_builder_id example: ‘PHPA'"""
  source_id: String
}

type SpotOffer {
  """Unique Spot Offer identifier also known as property id"""
  property_id: ID

  """Spot offer address"""
  address: SpotOfferAddress

  """Home value"""
  home_value: Float

  """Best Home value"""
  best_home_value: Float

  """last sold price"""
  last_sold_price: Float

  """last sold date"""
  last_sold_date: DateTime

  """status"""
  status: String

  """Property recent event"""
  property_recent_event: SpotOfferPropertyRecentEvent

  """opendoor values"""
  opendoor: OpendoorValue
}

type SpotOfferAddress {
  line: String
  city: String
  state_code: String
  postal_code: String
}

type SpotOfferPropertyRecentEvent {
  date: DateTime
  event_name: String
}

"""Input to the query """
input SpotOfferQuery {
  """Unique Spot Offer identifier also known as property id """
  property_id: ID!

  """User data"""
  user_data: SpotOfferUserData

  """Request source (ex - pdp_spot_offer, myhome_spot_offer)"""
  source: String!
}

input SpotOfferUserData {
  """RDC Session ID"""
  session_id: ID
}

"""Sqft histogram aggregation."""
input SqftHistogramAgg {
  """
  Accepts interval size of int in range [400, 1700] for for_rent status
  Accepts interval size of int in range [100, 2400] otherwise
  """
  interval: Int
}

"""Sqft range aggregation"""
input SqftRangeAgg {
  """Accepts array of float ranges."""
  ranges: [NumberAggRange]
}

"""Data for a state. """
type State implements Geo {
  """The type of each Geo implementation. """
  geo_type: GeoType

  """External facing and human-readable id for url and lookups. """
  slug_id: String

  """The name of the state """
  name: String

  """The name of the state """
  state: String

  """The centroid of the state. """
  centroid: Coordinate

  """The state boundary. """
  boundary: GeoJSON

  """Statistics about the state. """
  geo_statistics(group_by: GroupBy): GeoStatistics

  """
  A list of geos that are recommended to be similar and nearby to the state. 
  """
  recommended(query: RecommendedQueryCriteria): GeoList

  """
  A list of the top rated child geos. For example the top two geos in California are "Los Angeles, CA" and "San Diego, CA" 
  """
  top_rated(limit: Int): GeoList

  """The FIPs (Federal Information Processing Standard) code for the state """
  fips_code: String

  """The state code of the state where the state resides. """
  state_code: String

  """Geo's Parents """
  parents: [GeoParent]

  """county_needed_for_uniq"""
  county_needed_for_uniq: Boolean

  """Find relevant schools given a state. """
  schools(
    """filter parameters """
    query: SchoolsInGeoCriteria

    """The number of schools to return of each type: Default = 1 """
    limit_per_level: Int

    """The sorting criteria: Defaut = rating descending (ratingDesc) """
    sort: [SchoolSortKey]
  ): SchoolList
}

"""
Please refer to https://developers.google.com/maps/documentation/streetview/intro for more information 
"""
input StreetViewUrlInput {
  """
  use_location string is a parameter specifing what to use for location (full_address or coordunate)
  """
  use_location: LocationOptionsInput

  """
  location string is a combination of line city, state_code and postal_code 
  """
  location: String

  """field of view degree (default is 90) """
  fov: Int

  """
  pitch (default is 0) specifies the up or down angle of the camera relative to the Street View vehicle 
  """
  pitch: Int

  """size specifies the output size of the image in pixels. """
  size: String

  """
  Add the channel parameter to requests so you can view more detailed usage reports 
  """
  channel: String

  """client is used for authenticating your requests """
  client: String

  """source limits Street View searches to selected sources """
  source: String
}

type Tag {
  """
  List of supported tags 
  + bathroom 
  + bedroom 
  + dining_room 
  + exterior 
  + kitchen 
  + living_room 
  + street_view 
  + swimming_pool 
  + unknown 
  """
  label: String
  probability: Float
}

"""Tag Version"""
enum TagVersion {
  """
  Set of tags using first version of machine learning algorithm.
  Supported tags(v1): ['bathroom', 'bedroom', 'dining_room', 'exterior',
  'kitchen', 'living_room', 'street_view', 'swimming_pool', 'unknown']
  """
  v1

  """
  Set of tags using improved version of machine learning algorithm.
  Supported tags(v2): ['garage', 'house_view', 'yard', 'farm_land',
  'water_front', 'porch', 'porch_yard', 'road_view', 'pool', 'bathroom',
  'bedroom', 'living_room', 'dining_room', 'kitchen', 'floor_plan', 'unknown', 'laundry_room']
  """
  v2

  """
  Set of tags using newest version of machine learning algorithm.
  Supported tags(v3):
  Interior: ['bathroom', 'bedroom', 'closet', 'corridor', 'dining_room', 'exterior', 'floor_plan', 'garage_indoor',
   'gymnasium', 'home_office', 'kitchen', 'living_room', 'other_interiors',
  'other_plan', 'other_unknowns', 'recreation_room', 'utility_room']
  Exterior: ['aerial_view', 'balcony', 'barn', 'condo', 'desert', 'door',
  'farm', 'forest', 'garage', 'gazebo', 'house_view', 'patio',
   'pavilion', 'playground', 'porch', 'road', 'shed', 'swimming_pool', 'water_view', 'yard']
  """
  v3
}

input TargetLocation {
  """Latitude/Longitude coordinates of location."""
  coordinates: [Float]
}

"""
A complete tax history for this Home. The source is Tax Assessor data from 3rd party Public Record vendor. 
"""
type TaxHistory {
  assessment: Assessment

  """
  Market values as provided by the county or local taxing/assessment authority. 
  """
  market: Assessment

  """Appraised value given by taxing authority """
  appraisal: Assessment

  """
  Value closest to current market value used for assessment by county or local taxing authorities 
  """
  value: Assessment
  tax: Int
  year: Int

  """Assessment year for which taxes were billed """
  assessed_year: Int

  """County specific code that represents the entities that will be taxed """
  tax_code_area: String
}

"""
Information about Home as provided by Tax Assessor data from 3rd party Public
Record vendor(CoreLogic Deeds). -- API Info: Homes API 
"""
type TaxRecord {
  """
  A vendor specific public record identifier which is replaced by public_record_id. This field is DEPRECATED. 
  """
  cl_id: ID

  """An identifier used to uniquely identify public record. """
  public_record_id: ID
  last_update_date: DateTime

  """Home location as recorded in tax record. """
  location: TaxRecordLocation

  """Home facts as recorded in tax record. """
  description: TaxRecordDescription

  """
  NOT FOR PUBLIC DISPLAY. Information about home owner as recorded in tax record. Available to authorized callers only.
  """
  owner: TaxRecordOwner

  """
  NOT FOR PUBLIC DISPLAY. Address Parcel Number: a unique property identifier
  within specific county but not unique across states. Available to authorized callers only.
  """
  apn: String

  """TBD"""
  tax_parcel_id: String
}

"""Home facts """
type TaxRecordDescription {
  type: String
  beds: Int
  baths: Float

  """Number of full bathrooms """
  baths_full: Int

  """Number of 3/4 bathrooms """
  baths_3qtr: Int

  """Number of half bathrooms """
  baths_half: Int

  """Number of one quarter bathrooms """
  baths_1qtr: Int

  """Total number of bathrooms """
  baths_total: Float

  """Total land mass """
  acres: Float

  """Home square footage """
  sqft: Float

  """Building square footage """
  sqft_gross: Int

  """Used for determining improvement value """
  sqft_adjusted_gross: Int

  """Building square footage """
  sqft_building: Float
  sqft_floor_1: Float
  sqft_basement: Float

  """Garage square footage """
  sqft_garage: Float

  """Lot square footage """
  lot_sqft: Float
  lot_width: Float
  lot_depth: Float

  """Home styles """
  styles: [String]

  """Number of stories in the building """
  stories: Int
  rooms: Int

  """Number of units in the building """
  units: Int

  """The year the building/home was built """
  year_built: Int

  """The year the home was last renovated """
  year_renovated: Int

  """Number of car spaces """
  garage: Int

  """Garage type/description """
  garage_type: String
  heating: String
  cooling: String
  electrical: String
  water_source: String
  fireplace: String
  construction: String
  construction_quality: String
  exterior: String
  exterior2: String
  roofing: String
  pool: String
  zoning: String
  view: String
  legal_description: String
}

type TaxRecordLocation {
  census_tract: CensusTract
  survey: TaxRecordSurvey
  subdivision: TaxRecordSubdivision
}

type TaxRecordMailingAddress {
  street_number: String
  street_direction: String
  street: String
  street_suffix: String
  street_post_direction: String
  unit: String
  city: String
  state_code: String
  postal_code: String

  """Code that identifies delivery route """
  carrier_route: String
}

"""Information about owner """
type TaxRecordOwner {
  """Mailing address """
  mailing_address: TaxRecordMailingAddress

  """Owner names """
  names: [String]

  """Indicates if the owner is a corporation """
  is_corporate: Boolean

  """Indicates if the owner is qualified for homestead exemption  """
  is_homestead_exempt: Boolean

  """
  Indicates if there are additional owners that aren't shown in owner.names[] 
  """
  has_additional_owners: Boolean

  """Form of property ownership """
  ownership_rights: String

  """
  Relationship between multiple owners or the marital status of a single owner 
  """
  relationship: String
}

type TaxRecordSubdivision {
  name: String

  """A map that represents the divisions of a subdivision """
  plat: Plat
}

type TaxRecordSurvey {
  range: String
  township: String
  section: String
  quarter_section: String
}

type TermResult {
  """Search term"""
  term: String

  """matching photos for search_term"""
  photos: [PhotoInfo]

  """matching text embeddings"""
  text_embeddings: [TextEmbeddingInfo]
}

"""Representation of a test score object """
type TestScore {
  """An array of the test objects """
  tests: [SchoolTest]

  """An array of the score objects """
  scores: [SchoolTestScore]
}

type TextEmbeddingInfo {
  """Text embedding name"""
  embedding_name: String

  """Text matching score"""
  score: Float
}

"""List of supported time zone types"""
enum TimeZoneType {
  local
  utc
}

input TopRatedGeosCritera {
  """
  Identifies the anchor or parent geo. Top rated geos related to this will be returned 
  """
  anchor_slug_id: String

  """Limit how many geos to return. The max is 20 and the default is 20. """
  limit: Int
}

type TopRealEstateMarkets {
  title: String
  top_markets: [Markets]
}

"""
Array of transformed, tenant-specific listing hrefs and permalinks
Example output: { href: "https://www.highrises.com/listings/7110-beacon-ave-s_seattle_wa_98108_9098495250",
permalink: "7110-beacon-ave-s_seattle_wa_98108_9098495250" }
"""
type TransformedListingUrls {
  """Transformed href for listing"""
  href: String

  """Transformed permalink for listing"""
  permalink: String
}

"""
RDC listing permalink and tenant_id used for transforming permalink
Example input: { permalink: "7110-Beacon-Ave-S_Seattle_WA_98108_M90984-95250", tenant_id: "highrises.com" }
"""
input TransformListingUrlsInput {
  """RDC listing permalink field """
  permalink: String!

  """Tenant ID used for transformation"""
  tenant_id: String!
}

"""The transportation type used to travel to the destination """
enum TransportationType {
  bicycling
  cycling
  driving
  public_transport
  transit
  walking
}

type TravelDetails {
  """Travel time in seconds,  """
  time: Int!

  """Travel distance in miles """
  distance: Int!
}

"""travel time value  """
type TravelTimeValue {
  """travel time value """
  travel_time: Int
}

"""
Unique insights (E.g. Safest, best schools, etc) from Market Trends API. 
"""
type UniqueInsights {
  """The id (type) of unique insight. """
  id: ID

  """The value of the level insight. """
  level: String

  """The value of the median age insight. """
  median_age: Int

  """The value of the sold over asking insight. """
  sold_over_ask_percent: Float

  """The value of the median lot size insight. """
  median_lot_size: Float

  """The value of the days on market insight. """
  days_on_market: Int

  """The value of the property type insight. """
  property_type: String

  """The value of the bed count insight. """
  bed_count: Int

  """The inight's textual description. """
  text: String
}

type UnitDescription {
  """Unit number associated with complex"""
  unit_number: String

  """Is the unit furnished."""
  unit_furnished: Boolean

  """Vacancy of the unit"""
  vacancy_class: String

  """Floor number for Unit"""
  floor_number: String

  """Unit price. """
  price: Float

  """Number of bathrooms."""
  baths: Float

  """Number of half bathrooms."""
  baths_half: Int

  """Number of beds."""
  beds: Int

  """Rental community/management/corporation name"""
  name: String

  """Square footage of the Unit"""
  sqft: Float

  """Listing description"""
  text: String

  """Unit type."""
  type: String
}

type User {
  """
  hidden properties (Deprecated - use hidden_properties query in Consumer object type instead)
  """
  hidden_properties(query: HiddenPropertyCriteria): [HiddenProperty!]! @deprecated(reason: "use Consumer.hidden_properties instead")

  """
  saved/favorite properties (deprecated. use saved_properties query in consumer object type instead) 
  """
  saved_properties(
    """number of properties returned """
    limit: Int

    """offset 0-based index """
    offset: Int

    """filters for saved properties """
    query: SavedPropertiesFilterCriteria

    """sorting criteria for saved properties """
    sort: [SavedPropertiesSortingCriteria]
  ): [SavedProperty!]! @deprecated(reason: "use consumer.saved_properties instead")
  alerts(
    query: AlertsCriteria

    """which result to start from in the set of results """
    offset: Int

    """how many results to return """
    limit: Int
  ): AlertsList
  notification_settings(client_visitor_id: ID, caller_platform: NotificationPlatform): UserNotificationSettings

  """Fetch all the contacted properties for a given user. """
  contacted_properties(query: ContactedPropertiesCriteria): [ContactedProperty!]! @deprecated(reason: "use Consumer.contacted_properties instead")

  """Fetch all the property notes for a given user """
  property_notes(query: PropertyNotesCriteria): [PropertyNotes!]! @deprecated(reason: "use Consumer.property_notes instead")

  """Fetch all the property collections for a given user """
  property_collections: [PropertyCollection!]! @deprecated(reason: "use Consumer.property_collections instead")
}

"""input needed for creating a connection between two users"""
input UserConnectionCreateInput {
  """email address of recepient of invitation to connect """
  receiver_email: String!

  """email address of sender of invitation to connect """
  sender_email: String

  """name of sender of invitation to connect """
  sender_name: String

  """name of receiver of invitation to connect """
  receiver_name: String

  """message content of invitation to connect """
  invitation_message: String

  """message content of invitation to connect """
  invitation_method: InvitationMethodType!

  """type of connection between two users """
  connection_type: UserConnectionType!
}

"""attributes of user connection """
type UserConnectionDetails {
  """invitation token of the connection records """
  invitation_token: ID

  """email address of the invitee """
  invite_sent_to: String

  """member id of the connected user """
  connected_user_member_id: ID

  """connection status of the connection record """
  connection_status: UserConnectionStatus

  """method used to send the invitation to collborate """
  invitation_method: InvitationMethodType

  """type of connection between two users """
  connection_type: UserConnectionType

  """first name of the connected user """
  connected_user_first_name: String

  """last name of the connected user """
  connected_user_last_name: String

  """email address of the connected user """
  connected_user_email: String

  """profile photo URL of the connected user """
  connected_user_profile_image_url: String

  """role of the connected user """
  role: String

  """date when the records is created """
  created_date: DateTime

  """date when the record is updated """
  updated_date: DateTime
}

"""valid values of connection status between two users """
enum UserConnectionStatus {
  connected
  declined
  disconnected
  pending
  withdrawn
}

"""types of connection between two users """
enum UserConnectionType {
  cobuyer
}

"""input needed for creating a connection between two users"""
input UserConnectionUpdateInput {
  """type of connection between two users """
  connection_status: UserConnectionStatus!
  invitation_token: String!
}

"""Settings specific to mobile devices """
input UserNotificationDeviceSettingsInput {
  """
  client app identifier, which is the concatenation of app, app version, and
  platform (eg. rdc_mobile_native,14.13.0.68,iphone) 
  """
  client_app_id: ID

  """mobile operating system type """
  os_identifier: NotificationPlatform

  """Push token for delivering push notification"""
  device_token: ID

  """Visitor id of the client """
  client_visitor_id: ID!

  """Whether or not to send push notifications """
  push_notification_optin: Boolean

  """How often to receive push notifications """
  push_notification_frequency: PushNotificationFrequency

  """Whether or not to send push notifications for Direct Messaging """
  messaging_push_notification_optin: Boolean

  """Device identifier provided by Braze"""
  braze_device_id: ID
}

type UserNotificationSettings {
  """Whether or not to send push notifications """
  push_notification_optin: Boolean

  """How often to receive push notifications """
  push_notification_frequency: PushNotificationFrequency

  """Whether or not to send home alerts """
  home_alert_email_optin: Boolean

  """How often to receive home alerts """
  home_alert_email_frequency: HomeAlertEmailFrequency

  """Whether or not to send marketing emails """
  marketing_emails_optin: Boolean

  """Whether or not to send web notifications """
  web_notification_optin: Boolean

  """How often to receive web notifications """
  web_notification_frequency: WebNotificationFrequency

  """Push token for delivering push notification"""
  device_token: ID

  """Whether or not to send push notifications for Direct Messaging """
  messaging_push_notification_optin: Boolean

  """Device identifier provided by Braze"""
  braze_device_id: ID
}

"""General settings """
input UserNotificationSettingsInput {
  """
  client app identifier, which is the concatenation of app, app version, and
  platform (eg. rdc_mobile_native,14.13.0.68,iphone) 
  """
  client_app_id: ID

  """Whether or not to send home alerts """
  home_alert_email_optin: Boolean

  """How often to receive home alerts """
  home_alert_email_frequency: HomeAlertEmailFrequency

  """Whether or not to send marketing emails """
  marketing_emails_optin: Boolean

  """Whether or not to send web notifications """
  web_notification_optin: Boolean

  """How often to receive web notifications """
  web_notification_frequency: WebNotificationFrequency
}

"""Vendor information"""
type VendorData {
  """Disclaimer for vendor """
  disclaimer: String

  """URL for vendor """
  url: VendorUrl

  """Logo for vendor """
  logo: String
}

"""Vendor Url fields"""
type VendorUrl {
  """Link """
  href: String

  """Text for link  """
  text: String

  """Detail regarding link """
  message: String
}

type Video {
  href: String
}

"""VideoAdvertising contains the advertisement details for the video """
type VideoAdvertising {
  """Advertisement client data as string """
  client: String

  """Advertisement Click url details - URL with tag details """
  tag: String
}

"""VideoCaption contains the text track detail for the video"""
type VideoCaption {
  """Default value to specify the first default track"""
  default: Boolean

  """Text track file - vtt format"""
  file: String

  """Type of tracks"""
  kind: String

  """Label to show in the video player"""
  label: String
}

type VirtualTour {
  href: String
  type: String
}

"""Frequency of web notifications """
enum WebNotificationFrequency {
  """daily """
  daily

  """real time """
  realtime
}

"""Wildfire information for the property """
type Wildfire {
  """First Street wildfire parcel ID """
  fsid: String

  """
  Fire Factor Score. Valid values 1 to 10, where 1 is low wildfire risk. 
  """
  fire_factor_score: Int

  """
  Fire Factor Severity: Minimal, Minor, Moderate, Major, Severe, Extreme 
  """
  fire_factor_severity: String

  """
  Trend direction: -1, 0, 1.  -1 is trending less risky, 0 is stationary, 1 is trending riskier. 
  """
  trend_direction: String

  """
  Wildfire Trend : decreasing, not changing, increasing based on trend_direction
  (-1 is trending decreasing, 0 is not changing, 1 is increasing). 
  """
  fire_trend: String

  """US Forest Service relative risk to other counties"""
  usfs_relative_risk: String

  """Wildfire risk over 30 years"""
  fire_cumulative_30: String

  """Property page on First Street's website """
  firststreet_url: String

  """Wildfire Insurance quotes """
  insurance_rates: [InsuranceQuote]

  """
  Wildfire trend paragraph for property. Example - This property's risk of wildfire is constant.
  """
  fire_trend_paragraph: String

  """
  Wildfire insurance texual decaription. Ex. whether insurance is required or not.
  """
  fire_insurance_text: String
}

"""Wind information for the property """
type WindStatistics {
  """First Street wind parcel ID """
  fsid: String

  """Wind Factor Score. Valid values 1 to 10, where 1 is low wind risk"""
  wind_factor_score: Int

  """
  Wind Factor Severity: Minimal, Minor, Moderate, Major, Severe, Extreme 
  """
  wind_factor_severity: String

  """
  Wind Trend : decreasing, not changing, increasing based on trend_direction (-1
  is trending decreasing, 0 is not changing, 1 is increasing)
  """
  wind_trend: String

  """Property page on First Street's website """
  firststreet_url: String

  """Link to page containing more information regarding wind data"""
  wind_study_link: VendorUrl

  """Wind forcast for next 30 years"""
  wind_forecast: [EnvironmentForecast]

  """Historical Wind Events for the current property"""
  wind_historical: [HistoricalWindEvents]
}

"""
Algorithm type, see https://moveinc.atlassian.net/wiki/spaces/MTM/pages/116900332064/YMAL+Algorithm+Types
"""
enum YamlInputAlgorithm {
  """Return Choice and Pure Market New Home constructions with fallback."""
  CHOICE_PURE_MARKET_NHC_WITH_FALLBACK

  """Return 1 for-sale and 2 New Home construction properties."""
  FOR_SALE_1_NHC_2

  """Return 1 for-sale and 2 New Home construction properties."""
  FOR_SALE_2_NHC_1

  """Return Choice and Pure Market New Home constructions only."""
  FOR_SALE_CHOICE_PURE_MARKET_NHC

  """Return new homes properites for a given new homes property."""
  NEWHOMES_TO_NEWHOMES

  """Return For Sale properites for a given off market property."""
  OFF_MARKET_TO_FOR_SALE

  """Return Pure Market New Home constructions with fallback."""
  PURE_MARKET_NHC_WITH_FALLBACK
}

"""Year_built histogram aggregation."""
input YearBuiltHistogramAgg {
  """Accepts interval size of int in range [1, 100]"""
  interval: Int
}

"""Year_built range aggregation"""
input YearBuiltRangeAgg {
  """Accepts array of int ranges."""
  ranges: [IntAggRange]
}

"""
Fields to specify the target property of the 'you_might_also_like' query 
"""
input YMALInput {
  """property_id of the property """
  property_id: ID!

  """status of the property """
  status: HomeStatus

  """source type of the property (See MlsSource.type). """
  source_type: String

  """type of the ID """
  ymal_type: YmalType

  """Number of results """
  ymal_limit: Int

  """Choice or Pure market"""
  property_market_type: YmalInputPropertyMarketType

  """Algorithm type"""
  algorithm: YamlInputAlgorithm

  """Where the query comes from, for sub-page-feature tracking."""
  feature_track_id: String

  """The ABTest and its variation, if a test is running."""
  ab_test: YmalInputAbTest
}

"""ABTest name and variation"""
input YmalInputAbTest {
  """Experiment name"""
  name: String!

  """Experiment variation"""
  variation: String!
}

"""Choice or Pure property market type"""
enum YmalInputPropertyMarketType {
  """Choice market"""
  CHOICE

  """Pure market"""
  PURE
}

"""
List of supported ymal types
Used in Apollo API to differentiate Property ID & Plan ID
"""
enum YmalType {
  plan
  property
}

type Zoho {
  meta_data: MetaData
  snippets: Snippets
  top_real_estate_markets: TopRealEstateMarkets
}

input ZohoAddress {
  line: String
  city: String
  postal_code: String
  county: String
  street: String
  state_code: String
  neighborhood: String
}

input ZohoCriteria {
  silo: Silo!
  property_status: String
  geo_type: ZohoGeoType
  location: String
  address: ZohoAddress
  filters: SearchFilters
  mpr_id: String
  page_index: String
  user_agent: String
}

enum ZohoGeoType {
  city
  county
  neighborhood
  postal_code
  street
}

